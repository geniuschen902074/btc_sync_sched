!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/missing aclocal-1.15$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACQUIRED_AFTER	threadsafety.h	22;"	d
ACQUIRED_AFTER	threadsafety.h	41;"	d
ACQUIRED_BEFORE	threadsafety.h	23;"	d
ACQUIRED_BEFORE	threadsafety.h	42;"	d
ADDR	protocol.cpp	/^const char *ADDR="addr";$/;"	m	namespace:NetMsgType	file:
ADDRMAN_BUCKET_SIZE	addrman.h	145;"	d
ADDRMAN_GETADDR_MAX	addrman.h	172;"	d
ADDRMAN_GETADDR_MAX_PCT	addrman.h	169;"	d
ADDRMAN_HORIZON_DAYS	addrman.h	157;"	d
ADDRMAN_MAX_FAILURES	addrman.h	163;"	d
ADDRMAN_MIN_FAIL_DAYS	addrman.h	166;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	addrman.h	154;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	addrman.h	151;"	d
ADDRMAN_NEW_BUCKET_COUNT	addrman.h	142;"	d
ADDRMAN_RETRIES	addrman.h	160;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	addrman.h	148;"	d
ADDRMAN_TRIED_BUCKET_COUNT	addrman.h	139;"	d
ADD_SERIALIZE_METHODS	addrdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBanEntry
ADD_SERIALIZE_METHODS	addrman.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddrInfo
ADD_SERIALIZE_METHODS	amount.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CFeeRate
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	bloom.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBloomFilter
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockFileInfo
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CDiskBlockIndex
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskBlockPos
ADD_SERIALIZE_METHODS	compressor.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOutCompressor
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleBlock
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CPartialMerkleTree
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CNetAddr
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CService
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CSubNet
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddress
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CInv
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMessageHeader
ADD_SERIALIZE_METHODS	rest.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CCoin	file:
ADD_SERIALIZE_METHODS	serialize.h	160;"	d
ADD_SERIALIZE_METHODS	txdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskTxPos
ADD_SERIALIZE_METHODS	undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockUndo
ADD_SERIALIZE_METHODS	undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxUndo
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = $(HARDENED_CPPFLAGS)$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_LDFLAGS	Makefile	/^AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_V_AR	Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_OBJCXX	Makefile	/^AM_V_OBJCXX = $(am__v_OBJCXX_$(V))$/;"	m
AM_V_OBJCXXLD	Makefile	/^AM_V_OBJCXXLD = $(am__v_OBJCXXLD_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = \/usr\/bin\/ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
ARRAYLEN	utilstrencodings.h	20;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/missing automake-1.15$/;"	m
AVG_ADDRESS_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;$/;"	v
AVG_FEEFILTER_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;$/;"	v
AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;$/;"	v
AWK	Makefile	/^AWK = gawk$/;"	m
AbortNode	validation.cpp	/^bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon18
AbortNode	validation.cpp	/^bool AbortNode(const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon18
AbstractThresholdConditionChecker	versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AcceptBlock	validation.cpp	/^static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)$/;"	f	file:
AcceptBlockHeader	validation.cpp	/^static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)$/;"	f	file:
AcceptConnection	net.cpp	/^void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {$/;"	f	class:CConnman
AcceptToMemoryPool	validation.cpp	/^bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,$/;"	f
AcceptToMemoryPoolWithTime	validation.cpp	/^bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,$/;"	f
AcceptToMemoryPoolWorker	validation.cpp	/^bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,$/;"	f
AccessCoins	coins.cpp	/^const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
Acquire	sync.h	/^    void Acquire()$/;"	f	class:CSemaphoreGrant
ActivateBestChain	validation.cpp	/^bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f
ActivateBestChainStep	validation.cpp	/^static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)$/;"	f	file:
Add	addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueue
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueueControl
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& _addr)$/;"	f	class:CNode
AddBlock	chain.h	/^     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {$/;"	f	class:CBlockFileInfo
AddCScript	keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	keystore.cpp	/^bool CKeyStore::AddKey(const CKey &key) {$/;"	f	class:CKeyStore
AddKeyPubKey	keystore.cpp	/^bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CBasicKeyStore
AddLocal	net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddNewAddress	net.cpp	/^void CConnman::AddNewAddress(const CAddress& addr, const CAddress& addrFrom, int64_t nTimePenalty)$/;"	f	class:CConnman
AddNewAddresses	net.cpp	/^void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)$/;"	f	class:CConnman
AddNode	net.cpp	/^bool CConnman::AddNode(const std::string& strNode)$/;"	f	class:CConnman
AddOneShot	net.cpp	/^void CConnman::AddOneShot(const std::string& strDest)$/;"	f	class:CConnman
AddRef	net.h	/^    CNode* AddRef()$/;"	f	class:CNode
AddTimeData	timedata.cpp	/^void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)$/;"	f
AddToBlock	miner.cpp	/^void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
AddToBlockIndex	validation.cpp	/^CBlockIndex* AddToBlockIndex(const CBlockHeader& block)$/;"	f
AddToCompactExtraTransactions	net_processing.cpp	/^void AddToCompactExtraTransactions(const CTransactionRef& tx)$/;"	f
AddTransactionsUpdated	txmempool.cpp	/^void CTxMemPool::AddTransactionsUpdated(unsigned int n)$/;"	f	class:CTxMemPool
AddWatchOnly	keystore.cpp	/^bool CBasicKeyStore::AddWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
AddWhitelistedRange	net.cpp	/^void CConnman::AddWhitelistedRange(const CSubNet &subnet) {$/;"	f	class:CConnman
Add_	addrman.cpp	/^bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)$/;"	f	class:CAddrMan
AddedNodeInfo	net.h	/^struct AddedNodeInfo$/;"	s
AddrPow	ntunodeid.h	/^    AddrPow() { fNew = 0; }$/;"	f	class:AddrPow
AddrPow	ntunodeid.h	/^class AddrPow$/;"	c
AdvertiseLocal	net.cpp	/^void AdvertiseLocal(CNode *pnode)$/;"	f
AlertNotify	validation.cpp	/^static void AlertNotify(const std::string& strMessage)$/;"	f	file:
AllocateFileRange	util.cpp	/^void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {$/;"	f
AllowFree	txmempool.h	/^inline bool AllowFree(double dPriority)$/;"	f
AllowFreeThreshold	txmempool.h	/^inline double AllowFreeThreshold()$/;"	f
AmountErrMsg	ui_interface.cpp	/^std::string AmountErrMsg(const char* const optname, const std::string& strValue)$/;"	f
AmountFromValue	bitcoin-tx.cpp	/^static CAmount AmountFromValue(const UniValue& value)$/;"	f	file:
AmountHighWarn	ui_interface.cpp	/^std::string AmountHighWarn(const std::string& optname)$/;"	f
AnnotatedMixin	sync.h	/^class LOCKABLE AnnotatedMixin : public PARENT$/;"	c
AppInit	bitcoind.cpp	/^bool AppInit(int argc, char* argv[])$/;"	f
AppInitBasicSetup	init.cpp	/^bool AppInitBasicSetup()$/;"	f
AppInitMain	init.cpp	/^bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
AppInitParameterInteraction	init.cpp	/^bool AppInitParameterInteraction()$/;"	f
AppInitRPC	bitcoin-cli.cpp	/^static int AppInitRPC(int argc, char* argv[])$/;"	f	file:
AppInitRawTx	bitcoin-tx.cpp	/^static int AppInitRawTx(int argc, char* argv[])$/;"	f	file:
AppInitSanityChecks	init.cpp	/^bool AppInitSanityChecks()$/;"	f
AppInitServers	init.cpp	/^bool AppInitServers(boost::thread_group& threadGroup)$/;"	f
AppendParamsHelpMessages	chainparamsbase.cpp	/^void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)$/;"	f
ApplyDeltas	txmempool.cpp	/^void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const$/;"	f	class:CTxMemPool
ApplyTxInUndo	validation.cpp	/^bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)$/;"	f
AreBaseParamsConfigured	chainparamsbase.cpp	/^bool AreBaseParamsConfigured()$/;"	f
ArithToUint256	arith_uint256.cpp	/^uint256 ArithToUint256(const arith_uint256 &a)$/;"	f
AskFor	net.cpp	/^void CNode::AskFor(const CInv& inv)$/;"	f	class:CNode
AssertLockHeld	sync.h	95;"	d
AssertLockHeldInternal	sync.cpp	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockHeldInternal	sync.h	/^void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}$/;"	f
Attempt	addrman.h	/^    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
AttemptToEvictConnection	net.cpp	/^bool CConnman::AttemptToEvictConnection()$/;"	f	class:CConnman
Attempt_	addrman.cpp	/^void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)$/;"	f	class:CAddrMan
AvailableDataFormatsString	rest.cpp	/^static std::string AvailableDataFormatsString()$/;"	f	file:
BDB_CFLAGS	Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CPPFLAGS	Makefile	/^BDB_CPPFLAGS = $/;"	m
BDB_LIBS	Makefile	/^BDB_LIBS = -ldb_cxx$/;"	m
BEGIN	utilstrencodings.h	16;"	d
BENCHMARKS	Makefile	/^BENCHMARKS = $/;"	m
BENCH_BINARY	Makefile	/^BENCH_BINARY = bench\/bench_bitcoin$(EXEEXT)$/;"	m
BENCH_SRCDIR	Makefile	/^BENCH_SRCDIR = bench$/;"	m
BF_EXPLICIT	init.cpp	/^    BF_EXPLICIT     = (1U << 0),$/;"	e	enum:BindFlags	file:
BF_NONE	init.cpp	/^    BF_NONE         = 0,$/;"	e	enum:BindFlags	file:
BF_REPORT_ERROR	init.cpp	/^    BF_REPORT_ERROR = (1U << 1),$/;"	e	enum:BindFlags	file:
BF_WHITELIST	init.cpp	/^    BF_WHITELIST    = (1U << 2),$/;"	e	enum:BindFlags	file:
BIP0031_VERSION	version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BIP32Hash	hash.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32_EXTKEY_SIZE	pubkey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP9DeploymentInfo	versionbits.h	/^struct BIP9DeploymentInfo {$/;"	s
BITCOIN_ADDRDB_H	addrdb.h	7;"	d
BITCOIN_ADDRMAN_H	addrman.h	7;"	d
BITCOIN_AMOUNT_H	amount.h	7;"	d
BITCOIN_ARITH_UINT256_H	arith_uint256.h	7;"	d
BITCOIN_BASE58_H	base58.h	15;"	d
BITCOIN_BLOCK_ENCODINGS_H	blockencodings.h	6;"	d
BITCOIN_BLOOM_H	bloom.h	6;"	d
BITCOIN_CHAINPARAMSBASE_H	chainparamsbase.h	6;"	d
BITCOIN_CHAINPARAMSSEEDS_H	chainparamsseeds.h	2;"	d
BITCOIN_CHAINPARAMS_H	chainparams.h	7;"	d
BITCOIN_CHAIN_H	chain.h	7;"	d
BITCOIN_CHECKPOINTS_H	checkpoints.h	6;"	d
BITCOIN_CHECKQUEUE_H	checkqueue.h	6;"	d
BITCOIN_CLIENTVERSION_H	clientversion.h	6;"	d
BITCOIN_CLI_NAME	Makefile	/^BITCOIN_CLI_NAME = bitcoin-cli$/;"	m
BITCOIN_COINS_H	coins.h	7;"	d
BITCOIN_COMPAT_H	compat.h	7;"	d
BITCOIN_COMPRESSOR_H	compressor.h	7;"	d
BITCOIN_CONFIG_INCLUDES	Makefile	/^BITCOIN_CONFIG_INCLUDES = -I$(builddir)\/config$/;"	m
BITCOIN_CONF_FILENAME	util.cpp	/^const char * const BITCOIN_CONF_FILENAME = "bitcoin.conf";$/;"	v
BITCOIN_CONSENSUS_VERSIONBITS	versionbits.h	6;"	d
BITCOIN_CORE_H	Makefile	/^BITCOIN_CORE_H = \\$/;"	m
BITCOIN_CORE_IO_H	core_io.h	6;"	d
BITCOIN_CORE_MEMUSAGE_H	core_memusage.h	6;"	d
BITCOIN_DAEMON_NAME	Makefile	/^BITCOIN_DAEMON_NAME = bitcoind$/;"	m
BITCOIN_DBWRAPPER_H	dbwrapper.h	6;"	d
BITCOIN_GUI_NAME	Makefile	/^BITCOIN_GUI_NAME = bitcoin-qt$/;"	m
BITCOIN_HASH_H	hash.h	7;"	d
BITCOIN_HTTPRPC_H	httprpc.h	6;"	d
BITCOIN_HTTPSERVER_H	httpserver.h	6;"	d
BITCOIN_INCLUDES	Makefile	/^BITCOIN_INCLUDES = -I$(builddir) -I$(builddir)\/obj $(BDB_CPPFLAGS) \\$/;"	m
BITCOIN_INDIRECTMAP_H	indirectmap.h	6;"	d
BITCOIN_INIT_H	init.h	7;"	d
BITCOIN_KEYSTORE_H	keystore.h	7;"	d
BITCOIN_KEY_H	key.h	7;"	d
BITCOIN_LIMITEDMAP_H	limitedmap.h	6;"	d
BITCOIN_MEMUSAGE_H	memusage.h	6;"	d
BITCOIN_MERKLEBLOCK_H	merkleblock.h	7;"	d
BITCOIN_MINER_H	miner.h	7;"	d
BITCOIN_MM	Makefile	/^BITCOIN_MM = \\$/;"	m
BITCOIN_NETADDRESS_H	netaddress.h	6;"	d
BITCOIN_NETBASE_H	netbase.h	6;"	d
BITCOIN_NETMESSAGEMAKER_H	netmessagemaker.h	7;"	d
BITCOIN_NET_H	net.h	7;"	d
BITCOIN_NET_PROCESSING_H	net_processing.h	7;"	d
BITCOIN_NOUI_H	noui.h	6;"	d
BITCOIN_PID_FILENAME	util.cpp	/^const char * const BITCOIN_PID_FILENAME = "bitcoind.pid";$/;"	v
BITCOIN_POW_H	pow.h	7;"	d
BITCOIN_PROTOCOL_H	protocol.h	11;"	d
BITCOIN_PUBKEY_H	pubkey.h	7;"	d
BITCOIN_QT_BASE_CPP	Makefile	/^BITCOIN_QT_BASE_CPP = \\$/;"	m
BITCOIN_QT_CPP	Makefile	/^BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP) \\$/;"	m
BITCOIN_QT_H	Makefile	/^BITCOIN_QT_H = \\$/;"	m
BITCOIN_QT_INCLUDES	Makefile	/^BITCOIN_QT_INCLUDES = -I$(builddir)\/qt -I$(srcdir)\/qt -I$(srcdir)\/qt\/forms \\$/;"	m
BITCOIN_QT_WALLET_CPP	Makefile	/^BITCOIN_QT_WALLET_CPP = \\$/;"	m
BITCOIN_QT_WINDOWS_CPP	Makefile	/^BITCOIN_QT_WINDOWS_CPP = qt\/winshutdownmonitor.cpp$/;"	m
BITCOIN_RANDOM_H	random.h	7;"	d
BITCOIN_RC	Makefile	/^BITCOIN_RC = qt\/res\/bitcoin-qt-res.rc$/;"	m
BITCOIN_REVERSELOCK_H	reverselock.h	6;"	d
BITCOIN_SCHEDULER_H	scheduler.h	6;"	d
BITCOIN_SERIALIZE_H	serialize.h	7;"	d
BITCOIN_STREAMS_H	streams.h	7;"	d
BITCOIN_SYNC_H	sync.h	7;"	d
BITCOIN_TESTS	Makefile	/^BITCOIN_TESTS = test\/arith_uint256_tests.cpp \\$/;"	m
BITCOIN_THREADINTERRUPT_H	threadinterrupt.h	6;"	d
BITCOIN_THREADSAFETY_H	threadsafety.h	7;"	d
BITCOIN_TIMEDATA_H	timedata.h	6;"	d
BITCOIN_TIMEDATA_MAX_SAMPLES	timedata.cpp	46;"	d	file:
BITCOIN_TORCONTROL_H	torcontrol.h	9;"	d
BITCOIN_TXDB_H	txdb.h	7;"	d
BITCOIN_TXMEMPOOL_H	txmempool.h	7;"	d
BITCOIN_TX_NAME	Makefile	/^BITCOIN_TX_NAME = bitcoin-tx$/;"	m
BITCOIN_UINT256_H	uint256.h	7;"	d
BITCOIN_UI_INTERFACE_H	ui_interface.h	7;"	d
BITCOIN_UNDO_H	undo.h	7;"	d
BITCOIN_UTILMONEYSTR_H	utilmoneystr.h	10;"	d
BITCOIN_UTILSTRENCODINGS_H	utilstrencodings.h	10;"	d
BITCOIN_UTILTIME_H	utiltime.h	7;"	d
BITCOIN_UTIL_H	util.h	11;"	d
BITCOIN_VALIDATIONINTERFACE_H	validationinterface.h	7;"	d
BITCOIN_VALIDATION_H	validation.h	7;"	d
BITCOIN_VERSION_H	version.h	6;"	d
BITCOIN_WARNINGS_H	warnings.h	7;"	d
BLOCK	protocol.cpp	/^const char *BLOCK="block";$/;"	m	namespace:NetMsgType	file:
BLOCK	txmempool.h	/^    BLOCK,       \/\/! Removed for block$/;"	m	class:MemPoolRemovalReason
BLOCKFILE_CHUNK_SIZE	validation.h	/^static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
BLOCKTXN	protocol.cpp	/^const char *BLOCKTXN="blocktxn";$/;"	m	namespace:NetMsgType	file:
BLOCK_DOWNLOAD_TIMEOUT_BASE	validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;$/;"	v
BLOCK_DOWNLOAD_TIMEOUT_PER_PEER	validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;$/;"	v
BLOCK_DOWNLOAD_WINDOW	validation.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	chain.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:uint32_t
BLOCK_FAILED_MASK	chain.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:uint32_t
BLOCK_FAILED_VALID	chain.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:uint32_t
BLOCK_HAVE_DATA	chain.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:uint32_t
BLOCK_HAVE_MASK	chain.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:uint32_t
BLOCK_HAVE_UNDO	chain.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:uint32_t
BLOCK_OPT_WITNESS	chain.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:uint32_t
BLOCK_STALLING_TIMEOUT	validation.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_VALID_CHAIN	chain.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:uint32_t
BLOCK_VALID_HEADER	chain.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:uint32_t
BLOCK_VALID_MASK	chain.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:uint32_t
BLOCK_VALID_SCRIPTS	chain.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:uint32_t
BLOCK_VALID_TRANSACTIONS	chain.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:uint32_t
BLOCK_VALID_TREE	chain.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:uint32_t
BLOCK_VALID_UNKNOWN	chain.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:uint32_t
BLOOM_UPDATE_ALL	bloom.h	/^    BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	bloom.h	/^    BLOOM_UPDATE_MASK = 3,$/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	bloom.h	/^    BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	bloom.h	/^    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BOOST_CHRONO_LIB	Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono$/;"	m
BOOST_CPPFLAGS	Makefile	/^BOOST_CPPFLAGS = -pthread -I\/usr\/include$/;"	m
BOOST_FILESYSTEM_LIB	Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_LDFLAGS	Makefile	/^BOOST_LDFLAGS = -L\/usr\/lib\/x86_64-linux-gnu$/;"	m
BOOST_LIBS	Makefile	/^BOOST_LIBS = -L\/usr\/lib\/x86_64-linux-gnu -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread -lboost_chrono$/;"	m
BOOST_PROGRAM_OPTIONS_LIB	Makefile	/^BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options$/;"	m
BOOST_SYSTEM_LIB	Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_THREAD_LIB	Makefile	/^BOOST_THREAD_LIB = -lboost_thread$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework$/;"	m
BREW	Makefile	/^BREW = $/;"	m
BTN_ABORT	ui_interface.h	/^        BTN_ABORT   = 0x00040000U, \/\/ QMessageBox::Abort$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_APPLY	ui_interface.h	/^        BTN_APPLY   = 0x02000000U, \/\/ QMessageBox::Apply$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CANCEL	ui_interface.h	/^        BTN_CANCEL  = 0x00400000U, \/\/ QMessageBox::Cancel$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CLOSE	ui_interface.h	/^        BTN_CLOSE   = 0x00200000U, \/\/ QMessageBox::Close$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_DISCARD	ui_interface.h	/^        BTN_DISCARD = 0x00800000U, \/\/ QMessageBox::Discard$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_HELP	ui_interface.h	/^        BTN_HELP    = 0x01000000U, \/\/ QMessageBox::Help$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_IGNORE	ui_interface.h	/^        BTN_IGNORE  = 0x00100000U, \/\/ QMessageBox::Ignore$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_MASK	ui_interface.h	/^        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_NO	ui_interface.h	/^        BTN_NO      = 0x00010000U, \/\/ QMessageBox::No$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_OK	ui_interface.h	/^        BTN_OK      = 0x00000400U, \/\/ QMessageBox::Ok$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RESET	ui_interface.h	/^        BTN_RESET   = 0x04000000U, \/\/ QMessageBox::Reset$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RETRY	ui_interface.h	/^        BTN_RETRY   = 0x00080000U, \/\/ QMessageBox::Retry$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_YES	ui_interface.h	/^        BTN_YES     = 0x00004000U, \/\/ QMessageBox::Yes$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BUILD_DESC	clientversion.cpp	63;"	d	file:
BUILD_DESC	clientversion.cpp	65;"	d	file:
BUILD_DESC	clientversion.cpp	67;"	d	file:
BUILD_DESC_FROM_COMMIT	clientversion.cpp	55;"	d	file:
BUILD_DESC_FROM_UNKNOWN	clientversion.cpp	58;"	d	file:
BUILD_DESC_WITH_SUFFIX	clientversion.cpp	52;"	d	file:
Ban	net.cpp	/^void CConnman::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {$/;"	f	class:CConnman
Ban	net.cpp	/^void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {$/;"	f	class:CConnman
BanReason	addrdb.h	/^typedef enum BanReason$/;"	g
BanReason	addrdb.h	/^} BanReason;$/;"	t	typeref:enum:BanReason
BanReasonManuallyAdded	addrdb.h	/^    BanReasonManuallyAdded    = 2$/;"	e	enum:BanReason
BanReasonNodeMisbehaving	addrdb.h	/^    BanReasonNodeMisbehaving  = 1,$/;"	e	enum:BanReason
BanReasonUnknown	addrdb.h	/^    BanReasonUnknown          = 0,$/;"	e	enum:BanReason
BannedListChanged	ui_interface.h	/^    boost::signals2::signal<void (void)> BannedListChanged;$/;"	m	class:CClientUIInterface
BannedSetIsDirty	net.cpp	/^bool CConnman::BannedSetIsDirty()$/;"	f	class:CConnman
Base58Prefix	chainparams.h	/^    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }$/;"	f	class:CChainParams
Base58Type	chainparams.h	/^    enum Base58Type {$/;"	g	class:CChainParams
BaseParams	chainparamsbase.cpp	/^CBaseChainParams& BaseParams(const std::string& chain)$/;"	f
BaseParams	chainparamsbase.cpp	/^const CBaseChainParams& BaseParams()$/;"	f
BatchWrite	coins.cpp	/^bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }$/;"	f	class:CCoinsView
BatchWrite	coins.cpp	/^bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }$/;"	f	class:CCoinsViewBacked
BatchWrite	coins.cpp	/^bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
BatchWrite	txdb.cpp	/^bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {$/;"	f	class:CCoinsViewDB
BeginTime	validation.cpp	/^    int64_t BeginTime(const Consensus::Params& params) const { return 0; }$/;"	f	class:WarningBitsConditionChecker
BeginTime	versionbits.cpp	/^    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }$/;"	f	class:__anon19::VersionBitsConditionChecker
Bind	init.cpp	/^bool static Bind(CConnman& connman, const CService &addr, unsigned int flags) {$/;"	f	file:
BindFlags	init.cpp	/^enum BindFlags {$/;"	g	file:
BindListenPort	net.cpp	/^bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)$/;"	f	class:CConnman
BlockAssembler	miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& _chainparams)$/;"	f	class:BlockAssembler
BlockAssembler	miner.h	/^class BlockAssembler$/;"	c
BlockChecked	net_processing.cpp	/^void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:PeerLogicValidation
BlockChecked	validationinterface.h	/^    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;$/;"	m	struct:CMainSignals
BlockChecked	validationinterface.h	/^    virtual void BlockChecked(const CBlock&, const CValidationState&) {}$/;"	f	class:CValidationInterface
BlockFound	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> BlockFound;$/;"	m	struct:CMainSignals
BlockHasher	validation.h	/^struct BlockHasher$/;"	s
BlockMap	validation.h	/^typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;$/;"	t
BlockNotifyCallback	init.cpp	/^static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockNotifyGenesisWait	init.cpp	/^static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockTransactions	blockencodings.h	/^    BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	blockencodings.h	/^    BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	blockencodings.h	/^class BlockTransactions {$/;"	c
BlockTransactionsRequest	blockencodings.h	/^class BlockTransactionsRequest {$/;"	c
BlockTxCount	blockencodings.h	/^    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
Broadcast	validationinterface.h	/^    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;$/;"	m	struct:CMainSignals
BuildSkip	chain.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
CADDR_TIME_VERSION	version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CAddrDB	addrdb.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	addrdb.h	/^class CAddrDB$/;"	c
CAddrInfo	addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	addrman.h	/^    CAddrMan()$/;"	f	class:CAddrMan
CAddrMan	addrman.h	/^class CAddrMan$/;"	c
CAddress	protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress : public CService$/;"	c
CAmount	amount.h	/^typedef int64_t CAmount;$/;"	t
CAutoFile	streams.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	streams.h	/^class CAutoFile$/;"	c
CBanDB	addrdb.cpp	/^CBanDB::CBanDB()$/;"	f	class:CBanDB
CBanDB	addrdb.h	/^class CBanDB$/;"	c
CBanEntry	addrdb.h	/^    CBanEntry()$/;"	f	class:CBanEntry
CBanEntry	addrdb.h	/^    CBanEntry(int64_t nCreateTimeIn)$/;"	f	class:CBanEntry
CBanEntry	addrdb.h	/^class CBanEntry$/;"	c
CBase58Data	base58.cpp	/^CBase58Data::CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBaseChainParams	chainparamsbase.h	/^    CBaseChainParams() {}$/;"	f	class:CBaseChainParams
CBaseChainParams	chainparamsbase.h	/^class CBaseChainParams$/;"	c
CBaseMainParams	chainparamsbase.cpp	/^    CBaseMainParams()$/;"	f	class:CBaseMainParams
CBaseMainParams	chainparamsbase.cpp	/^class CBaseMainParams : public CBaseChainParams$/;"	c	file:
CBaseRegTestParams	chainparamsbase.cpp	/^    CBaseRegTestParams()$/;"	f	class:CBaseRegTestParams
CBaseRegTestParams	chainparamsbase.cpp	/^class CBaseRegTestParams : public CBaseChainParams$/;"	c	file:
CBaseTestNetParams	chainparamsbase.cpp	/^    CBaseTestNetParams()$/;"	f	class:CBaseTestNetParams
CBaseTestNetParams	chainparamsbase.cpp	/^class CBaseTestNetParams : public CBaseChainParams$/;"	c	file:
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBitcoinAddress	base58.h	/^    CBitcoinAddress() {}$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^class CBitcoinAddress : public CBase58Data {$/;"	c
CBitcoinAddressVisitor	base58.cpp	/^    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}$/;"	f	class:__anon2::CBitcoinAddressVisitor
CBitcoinAddressVisitor	base58.cpp	/^class CBitcoinAddressVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon2	file:
CBitcoinExtKey	base58.h	/^typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;$/;"	t
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase() {}$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase(const K &key) {$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase(const std::string& strBase58c) {$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data$/;"	c
CBitcoinExtPubKey	base58.h	/^typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;$/;"	t
CBitcoinSecret	base58.h	/^    CBitcoinSecret() {}$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^class CBitcoinSecret : public CBase58Data$/;"	c
CBlockFileInfo	chain.h	/^     CBlockFileInfo() {$/;"	f	class:CBlockFileInfo
CBlockFileInfo	chain.h	/^class CBlockFileInfo$/;"	c
CBlockHeaderAndShortTxIDs	blockencodings.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	blockencodings.h	/^    CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	blockencodings.h	/^class CBlockHeaderAndShortTxIDs {$/;"	c
CBlockIndex	chain.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^    CBlockIndex(const CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	validation.cpp	/^    struct CBlockIndexWorkComparator$/;"	s	namespace:__anon17	file:
CBlockReject	net_processing.cpp	/^struct CBlockReject {$/;"	s	namespace:__anon8	file:
CBlockTemplate	miner.h	/^struct CBlockTemplate$/;"	s
CBlockTreeDB	txdb.cpp	/^CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() \/ "blocks" \/ "index", nCacheSize, fMemory, fWipe) {$/;"	f	class:CBlockTreeDB
CBlockTreeDB	txdb.h	/^class CBlockTreeDB : public CDBWrapper$/;"	c
CBlockUndo	undo.h	/^class CBlockUndo$/;"	c
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^class CBloomFilter$/;"	c
CBufferedFile	streams.h	/^    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :$/;"	f	class:CBufferedFile
CBufferedFile	streams.h	/^class CBufferedFile$/;"	c
CC	Makefile	/^CC = gcc$/;"	m
CCACHE	Makefile	/^CCACHE = $/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CChain	chain.h	/^class CChain {$/;"	c
CChainParams	chainparams.h	/^    CChainParams() {}$/;"	f	class:CChainParams
CChainParams	chainparams.h	/^class CChainParams$/;"	c
CCheckQueue	checkqueue.h	/^    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}$/;"	f	class:CCheckQueue
CCheckQueue	checkqueue.h	/^class CCheckQueue$/;"	c
CCheckQueueControl	checkqueue.h	/^    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)$/;"	f	class:CCheckQueueControl
CCheckQueueControl	checkqueue.h	/^class CCheckQueueControl$/;"	c
CCheckpointData	chainparams.h	/^struct CCheckpointData {$/;"	s
CClientUIInterface	ui_interface.h	/^class CClientUIInterface$/;"	c
CCoin	rest.cpp	/^struct CCoin {$/;"	s	file:
CCoins	coins.h	/^    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }$/;"	f	class:CCoins
CCoins	coins.h	/^    CCoins(const CTransaction &tx, int nHeightIn) {$/;"	f	class:CCoins
CCoins	coins.h	/^class CCoins$/;"	c
CCoinsCacheEntry	coins.h	/^    CCoinsCacheEntry() : coins(), flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	coins.h	/^struct CCoinsCacheEntry$/;"	s
CCoinsMap	coins.h	/^typedef boost::unordered_map<uint256, CCoinsCacheEntry, SaltedTxidHasher> CCoinsMap;$/;"	t
CCoinsModifier	coins.cpp	/^CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {$/;"	f	class:CCoinsModifier
CCoinsModifier	coins.h	/^class CCoinsModifier$/;"	c
CCoinsView	coins.h	/^class CCoinsView$/;"	c
CCoinsViewBacked	coins.cpp	/^CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }$/;"	f	class:CCoinsViewBacked
CCoinsViewBacked	coins.h	/^class CCoinsViewBacked : public CCoinsView$/;"	c
CCoinsViewCache	coins.cpp	/^CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }$/;"	f	class:CCoinsViewCache
CCoinsViewCache	coins.h	/^class CCoinsViewCache : public CCoinsViewBacked$/;"	c
CCoinsViewCursor	coins.h	/^    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}$/;"	f	class:CCoinsViewCursor
CCoinsViewCursor	coins.h	/^class CCoinsViewCursor$/;"	c
CCoinsViewDB	txdb.cpp	/^CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() \/ "chainstate", nCacheSize, fMemory, fWipe, true) $/;"	f	class:CCoinsViewDB
CCoinsViewDB	txdb.h	/^class CCoinsViewDB : public CCoinsView$/;"	c
CCoinsViewDBCursor	txdb.h	/^    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):$/;"	f	class:CCoinsViewDBCursor
CCoinsViewDBCursor	txdb.h	/^class CCoinsViewDBCursor: public CCoinsViewCursor$/;"	c
CCoinsViewErrorCatcher	init.cpp	/^    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}$/;"	f	class:CCoinsViewErrorCatcher
CCoinsViewErrorCatcher	init.cpp	/^class CCoinsViewErrorCatcher : public CCoinsViewBacked$/;"	c	file:
CCoinsViewMemPool	txmempool.cpp	/^CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }$/;"	f	class:CCoinsViewMemPool
CCoinsViewMemPool	txmempool.h	/^class CCoinsViewMemPool : public CCoinsViewBacked$/;"	c
CCompactSize	serialize.h	/^    CCompactSize(uint64_t& nIn) : n(nIn) { }$/;"	f	class:CCompactSize
CCompactSize	serialize.h	/^class CCompactSize$/;"	c
CConditionVariable	sync.h	/^typedef boost::condition_variable CConditionVariable;$/;"	t
CConnectionFailed	bitcoin-cli.cpp	/^    explicit inline CConnectionFailed(const std::string& msg) :$/;"	f	class:CConnectionFailed
CConnectionFailed	bitcoin-cli.cpp	/^class CConnectionFailed : public std::runtime_error$/;"	c	file:
CConnman	net.cpp	/^CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)$/;"	f	class:CConnman
CConnman	net.h	/^class CConnman$/;"	c
CCriticalBlock	sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	sync.h	/^class CCriticalSection : public AnnotatedMixin<boost::recursive_mutex>$/;"	c
CDBBatch	dbwrapper.h	/^    CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION) { };$/;"	f	class:CDBBatch
CDBBatch	dbwrapper.h	/^class CDBBatch$/;"	c
CDBIterator	dbwrapper.h	/^    CDBIterator(const CDBWrapper &_parent, leveldb::Iterator *_piter) :$/;"	f	class:CDBIterator
CDBIterator	dbwrapper.h	/^class CDBIterator$/;"	c
CDBWrapper	dbwrapper.cpp	/^CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)$/;"	f	class:CDBWrapper
CDBWrapper	dbwrapper.h	/^class CDBWrapper$/;"	c
CDNSSeedData	chainparams.h	/^    CDNSSeedData(const std::string &strName, const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : name(strName), host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}$/;"	f	struct:CDNSSeedData
CDNSSeedData	chainparams.h	/^struct CDNSSeedData {$/;"	s
CDataStream	streams.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(int nTypeIn, int nVersionIn, Args&&... args)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	streams.h	/^class CDataStream$/;"	c
CDiskBlockIndex	chain.h	/^    CDiskBlockIndex() {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^    explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskBlockPos	chain.h	/^    CDiskBlockPos() {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^struct CDiskBlockPos$/;"	s
CDiskTxPos	txdb.h	/^    CDiskTxPos() {$/;"	f	struct:CDiskTxPos
CDiskTxPos	txdb.h	/^    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {$/;"	f	struct:CDiskTxPos
CDiskTxPos	txdb.h	/^struct CDiskTxPos : public CDiskBlockPos$/;"	s
CDynamicCriticalSection	sync.h	/^typedef CCriticalSection CDynamicCriticalSection;$/;"	t
CENT	amount.h	/^static const CAmount CENT = 1000000;$/;"	v
CExtKey	key.h	/^struct CExtKey {$/;"	s
CExtPubKey	pubkey.h	/^struct CExtPubKey {$/;"	s
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CFeeRate	amount.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    CFeeRate() : nSatoshisPerK(0) { }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^class CFeeRate$/;"	c
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^    explicit CFlatData(prevector<N, T, S, D> &v)$/;"	f	class:CFlatData
CFlatData	serialize.h	/^    explicit CFlatData(std::vector<T,TAl> &v)$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CHARS_ALPHA_NUM	utilstrencodings.cpp	/^static const string CHARS_ALPHA_NUM = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";$/;"	v	file:
CHECKSUM_OFFSET	protocol.h	/^        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,$/;"	e	enum:CMessageHeader::__anon10
CHECKSUM_SIZE	protocol.h	/^        CHECKSUM_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon10
CHash160	hash.h	/^class CHash160 {$/;"	c
CHash256	hash.h	/^class CHash256 {$/;"	c
CHashWriter	hash.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CHashWriter
CHashWriter	hash.h	/^class CHashWriter$/;"	c
CImportingNow	init.cpp	/^    CImportingNow() {$/;"	f	struct:CImportingNow
CImportingNow	init.cpp	/^struct CImportingNow$/;"	s	file:
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.h	/^class CInv$/;"	c
CKey	key.h	/^    CKey() : fValid(false), fCompressed(false)$/;"	f	class:CKey
CKey	key.h	/^class CKey$/;"	c
CKeyID	pubkey.h	/^    CKeyID() : uint160() {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^    CKeyID(const uint160& in) : uint160(in) {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^class CKeyID : public uint160$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyingMaterial	keystore.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLEANFILES	Makefile	/^CLEANFILES = $(EXTRA_LIBRARIES) *.gcda *.gcno compat\/*.gcda \\$/;"	m
CLEAN_BITCOIN_BENCH	Makefile	/^CLEAN_BITCOIN_BENCH = bench\/*.gcda bench\/*.gcno $(GENERATED_TEST_FILES)$/;"	m
CLEAN_BITCOIN_QT_TEST	Makefile	/^CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt\/test\/*.gcda qt\/test\/*.gcno$/;"	m
CLEAN_BITCOIN_TEST	Makefile	/^CLEAN_BITCOIN_TEST = test\/*.gcda test\/*.gcno $(GENERATED_TEST_FILES)$/;"	m
CLEAN_QT	Makefile	/^CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt\/*.gcda qt\/*.gcno$/;"	m
CLIENT_VERSION	clientversion.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	clientversion.h	20;"	d
CLIENT_VERSION_IS_RELEASE	Makefile	/^CLIENT_VERSION_IS_RELEASE = true$/;"	m
CLIENT_VERSION_IS_RELEASE	clientversion.h	23;"	d
CLIENT_VERSION_MAJOR	Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	clientversion.h	17;"	d
CLIENT_VERSION_MINOR	Makefile	/^CLIENT_VERSION_MINOR = 14$/;"	m
CLIENT_VERSION_MINOR	clientversion.h	18;"	d
CLIENT_VERSION_REVISION	Makefile	/^CLIENT_VERSION_REVISION = 1$/;"	m
CLIENT_VERSION_REVISION	clientversion.h	19;"	d
CLIENT_VERSION_SUFFIX	clientversion.cpp	21;"	d	file:
CLockLocation	sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)$/;"	f	struct:CLockLocation
CLockLocation	sync.cpp	/^struct CLockLocation {$/;"	s	file:
CMPCTBLOCK	protocol.cpp	/^const char *CMPCTBLOCK="cmpctblock";$/;"	m	namespace:NetMsgType	file:
CMainCleanup	validation.cpp	/^    CMainCleanup() {}$/;"	f	class:CMainCleanup
CMainCleanup	validation.cpp	/^class CMainCleanup$/;"	c	file:
CMainParams	chainparams.cpp	/^    CMainParams() {$/;"	f	class:CMainParams
CMainParams	chainparams.cpp	/^class CMainParams : public CChainParams {$/;"	c	file:
CMainSignals	validationinterface.h	/^struct CMainSignals {$/;"	s
CMedianFilter	timedata.h	/^    CMedianFilter(unsigned int size, T initial_value) : nSize(size)$/;"	f	class:CMedianFilter
CMedianFilter	timedata.h	/^class CMedianFilter$/;"	c
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^    CMerkleBlock() {}$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^class CMerkleBlock$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMutexLock	sync.h	/^class SCOPED_LOCKABLE CMutexLock$/;"	c
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)$/;"	f	class:CNetAddr
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	netaddress.h	/^class CNetAddr$/;"	c
CNetCleanup	net.cpp	/^    CNetCleanup() {}$/;"	f	class:CNetCleanup
CNetCleanup	net.cpp	/^class CNetCleanup$/;"	c	file:
CNetMessage	net.h	/^    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {$/;"	f	class:CNetMessage
CNetMessage	net.h	/^class CNetMessage {$/;"	c
CNetMsgMaker	netmessagemaker.h	/^    CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}$/;"	f	class:CNetMsgMaker
CNetMsgMaker	netmessagemaker.h	/^class CNetMsgMaker$/;"	c
CNetProcessingCleanup	net_processing.cpp	/^    CNetProcessingCleanup() {}$/;"	f	class:CNetProcessingCleanup
CNetProcessingCleanup	net_processing.cpp	/^class CNetProcessingCleanup$/;"	c	file:
CNode	net.cpp	/^CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
CNodeSignals	net.h	/^struct CNodeSignals$/;"	s
CNodeState	net_processing.cpp	/^    CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {$/;"	f	struct:__anon8::CNodeState
CNodeState	net_processing.cpp	/^struct CNodeState {$/;"	s	namespace:__anon8	file:
CNodeStateStats	net_processing.h	/^struct CNodeStateStats {$/;"	s
CNodeStats	net.h	/^class CNodeStats$/;"	c
COIN	amount.h	/^static const CAmount COIN = 100000000;$/;"	v
COINBASE_FLAGS	validation.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COMMAND_SIZE	protocol.h	/^        COMMAND_SIZE = 12,$/;"	e	enum:CMessageHeader::__anon10
COMPACTSIZE	serialize.h	349;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFLICT	txmempool.h	/^    CONFLICT,    \/\/! Removed for conflict with in-block transaction$/;"	m	class:MemPoolRemovalReason
CONNECTIONS_ALL	net.h	/^        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_IN	net.h	/^        CONNECTIONS_IN = (1U << 0),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_NONE	net.h	/^        CONNECTIONS_NONE = 0,$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_OUT	net.h	/^        CONNECTIONS_OUT = (1U << 1),$/;"	e	enum:CConnman::NumConnections
CONTINUE_EXECUTION	bitcoin-cli.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
CONTINUE_EXECUTION	bitcoin-tx.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
COPYRIGHT_HOLDERS	Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	Makefile	/^COPYRIGHT_HOLDERS_FINAL = The Bitcoin Core developers$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = Bitcoin Core$/;"	m
COPYRIGHT_STR	clientversion.h	41;"	d
COPYRIGHT_YEAR	Makefile	/^COPYRIGHT_YEAR = 2017$/;"	m
COPYRIGHT_YEAR	clientversion.h	29;"	d
COrphanTx	net_processing.cpp	/^struct COrphanTx {$/;"	s	file:
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFILT	Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS$/;"	m
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.h	/^class CPartialMerkleTree$/;"	c
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	pubkey.h	/^    CPubKey()$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const T pbegin, const T pend)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const std::vector<unsigned char>& _vch)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^class CPubKey$/;"	c
CRYPTO_CFLAGS	Makefile	/^CRYPTO_CFLAGS = $/;"	m
CRYPTO_LIBS	Makefile	/^CRYPTO_LIBS = -lcrypto$/;"	m
CRegTestParams	chainparams.cpp	/^    CRegTestParams() {$/;"	f	class:CRegTestParams
CRegTestParams	chainparams.cpp	/^class CRegTestParams : public CChainParams {$/;"	c	file:
CRollingBloomFilter	bloom.cpp	/^CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate)$/;"	f	class:CRollingBloomFilter
CRollingBloomFilter	bloom.h	/^class CRollingBloomFilter$/;"	c
CScheduler	scheduler.cpp	/^CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)$/;"	f	class:CScheduler
CScheduler	scheduler.h	/^class CScheduler$/;"	c
CScriptCheck	validation.h	/^    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}$/;"	f	class:CScriptCheck
CScriptCheck	validation.h	/^    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :$/;"	f	class:CScriptCheck
CScriptCheck	validation.h	/^class CScriptCheck$/;"	c
CScriptCompressor	compressor.h	/^    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }$/;"	f	class:CScriptCompressor
CScriptCompressor	compressor.h	/^class CScriptCompressor$/;"	c
CSemaphore	sync.h	/^    CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionSerialize	serialize.h	/^struct CSerActionSerialize$/;"	s
CSerActionUnserialize	serialize.h	/^struct CSerActionUnserialize$/;"	s
CSerializedNetMsg	net.h	/^struct CSerializedNetMsg$/;"	s
CService	netaddress.cpp	/^CService::CService()$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, addr.sin6_scope_id), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	netaddress.h	/^class CService : public CNetAddr$/;"	c
CSipHasher	hash.cpp	/^CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)$/;"	f	class:CSipHasher
CSipHasher	hash.h	/^class CSipHasher$/;"	c
CSizeComputer	serialize.h	/^    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CSizeComputer
CSizeComputer	serialize.h	/^class CSizeComputer$/;"	c
CSubNet	netaddress.cpp	/^CSubNet::CSubNet():$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr):$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)$/;"	f	class:CSubNet
CSubNet	netaddress.h	/^class CSubNet$/;"	c
CTAES_DIST	Makefile	/^CTAES_DIST = crypto\/ctaes\/bench.c crypto\/ctaes\/ctaes.c \\$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CT_DELETED	ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTestNetParams	chainparams.cpp	/^    CTestNetParams() {$/;"	f	class:CTestNetParams
CTestNetParams	chainparams.cpp	/^class CTestNetParams : public CChainParams {$/;"	c	file:
CThreadInterrupt	threadinterrupt.h	/^class CThreadInterrupt$/;"	c
CTranslationInterface	util.h	/^class CTranslationInterface$/;"	c
CTxInUndo	undo.h	/^    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}$/;"	f	class:CTxInUndo
CTxInUndo	undo.h	/^    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }$/;"	f	class:CTxInUndo
CTxInUndo	undo.h	/^class CTxInUndo$/;"	c
CTxMemPool	txmempool.cpp	/^CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :$/;"	f	class:CTxMemPool
CTxMemPool	txmempool.h	/^class CTxMemPool$/;"	c
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.h	/^class CTxMemPoolEntry$/;"	c
CTxMemPoolModifiedEntry	miner.h	/^    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)$/;"	f	struct:CTxMemPoolModifiedEntry
CTxMemPoolModifiedEntry	miner.h	/^struct CTxMemPoolModifiedEntry {$/;"	s
CTxOutCompressor	compressor.h	/^    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }$/;"	f	class:CTxOutCompressor
CTxOutCompressor	compressor.h	/^class CTxOutCompressor$/;"	c
CTxUndo	undo.h	/^class CTxUndo$/;"	c
CURRENCY_UNIT	amount.cpp	/^const std::string CURRENCY_UNIT = "BTC";$/;"	v
CURRENT_VERSION	addrdb.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBanEntry
CValidationInterface	validationinterface.h	/^class CValidationInterface {$/;"	c
CVarInt	serialize.h	/^    CVarInt(I& nIn) : n(nIn) { }$/;"	f	class:CVarInt
CVarInt	serialize.h	/^class CVarInt$/;"	c
CVectorWriter	streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn, Args&&... args) : CVectorWriter(nTypeIn, nVersionIn, vchDataIn, nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	streams.h	/^class CVectorWriter$/;"	c
CVerifyDB	validation.cpp	/^CVerifyDB::CVerifyDB()$/;"	f	class:CVerifyDB
CVerifyDB	validation.h	/^class CVerifyDB {$/;"	c
CWaitableCriticalSection	sync.h	/^typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;$/;"	t
CXX	Makefile	/^CXX = g++ -std=c++11$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2 -Wall -Wextra -Wformat -Wvla -Wformat-security -Wno-unused-parameter$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CalcHash	merkleblock.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcMaskSize	coins.cpp	/^void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {$/;"	f	class:CCoins
CalcTreeWidth	merkleblock.h	/^    unsigned int CalcTreeWidth(int height) {$/;"	f	class:CPartialMerkleTree
CalculateCurrentUsage	validation.cpp	/^uint64_t CalculateCurrentUsage()$/;"	f
CalculateDescendants	txmempool.cpp	/^void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants)$/;"	f	class:CTxMemPool
CalculateKeyedNetGroup	net.cpp	/^uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const$/;"	f	class:CConnman
CalculateMemPoolAncestors	txmempool.cpp	/^bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents \/* = true *\/) const$/;"	f	class:CTxMemPool
CalculateNextWorkRequired	pow.cpp	/^unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)$/;"	f
CalculateSequenceLocks	validation.cpp	/^static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f	file:
CallRPC	bitcoin-cli.cpp	/^UniValue CallRPC(const std::string& strMethod, const UniValue& params)$/;"	f
CanDirectFetch	net_processing.cpp	/^bool CanDirectFetch(const Consensus::Params &consensusParams)$/;"	f	namespace:__anon8
ChainCode	hash.h	/^typedef uint256 ChainCode;$/;"	t
ChainCode	pubkey.h	/^typedef uint256 ChainCode;$/;"	t
ChainNameFromCommandLine	chainparamsbase.cpp	/^std::string ChainNameFromCommandLine()$/;"	f
ChainTxData	chainparams.h	/^struct ChainTxData {$/;"	s
ChangeType	ui_interface.h	/^enum ChangeType$/;"	g
Check	addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check	key.cpp	/^bool CKey::Check(const unsigned char *vch) {$/;"	f	class:CKey
CheckBlock	validation.cpp	/^bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
CheckBlockHeader	validation.cpp	/^bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW)$/;"	f
CheckBlockIndex	validation.cpp	/^void static CheckBlockIndex(const Consensus::Params& consensusParams)$/;"	f	file:
CheckDiskSpace	validation.cpp	/^bool CheckDiskSpace(uint64_t nAdditionalBytes)$/;"	f
CheckFinalTx	validation.cpp	/^bool CheckFinalTx(const CTransaction &tx, int flags)$/;"	f
CheckForkWarningConditions	validation.cpp	/^void CheckForkWarningConditions()$/;"	f
CheckForkWarningConditionsOnNewFork	validation.cpp	/^void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)$/;"	f
CheckIncomingNonce	net.cpp	/^bool CConnman::CheckIncomingNonce(uint64_t nonce)$/;"	f	class:CConnman
CheckIndexAgainstCheckpoint	validation.cpp	/^static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const uint256& hash)$/;"	f	file:
CheckInputs	validation.cpp	/^bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)$/;"	f
CheckLowS	pubkey.cpp	/^\/* static *\/ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
CheckProofOfWork	pow.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)$/;"	f
CheckSequenceLocks	validation.cpp	/^bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints)$/;"	f
CheckTransaction	validation.cpp	/^bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)$/;"	f
CheckTxInputs	validation.cpp	/^bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)$/;"	f	namespace:Consensus
CheckWarmup	rest.cpp	/^static bool CheckWarmup(HTTPRequest* req)$/;"	f	file:
Check_	addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
Checkpoints	chainparams.h	/^    const CCheckpointData& Checkpoints() const { return checkpointData; }$/;"	f	class:CChainParams
Checkpoints	checkpoints.cpp	/^namespace Checkpoints {$/;"	n	file:
Checkpoints	checkpoints.h	/^namespace Checkpoints$/;"	n
Cleanup	coins.h	/^    void Cleanup() {$/;"	f	class:CCoins
CleanupBlockRevFiles	init.cpp	/^void CleanupBlockRevFiles()$/;"	f
Clear	addrman.h	/^    void Clear()$/;"	f	class:CAddrMan
Clear	coins.h	/^    void Clear() {$/;"	f	class:CCoins
Clear	torcontrol.cpp	/^    void Clear()$/;"	f	class:TorControlReply
Clear	versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearBanned	net.cpp	/^void CConnman::ClearBanned()$/;"	f	class:CConnman
ClearDatadirCache	util.cpp	/^void ClearDatadirCache()$/;"	f
ClearNew	addrman.cpp	/^void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)$/;"	f	class:CAddrMan
ClearPrioritisation	txmempool.cpp	/^void CTxMemPool::ClearPrioritisation(const uint256 hash)$/;"	f	class:CTxMemPool
ClearUnspendable	coins.h	/^    void ClearUnspendable() {$/;"	f	class:CCoins
ClientAllowed	httpserver.cpp	/^static bool ClientAllowed(const CNetAddr& netaddr)$/;"	f	file:
CloseSocket	netbase.cpp	/^bool CloseSocket(SOCKET& hSocket)$/;"	f
CloseSocketDisconnect	net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CombinerAll	net.h	/^struct CombinerAll$/;"	s
Command	torcontrol.cpp	/^bool TorControlConnection::Command(const std::string &cmd, const ReplyHandlerCB& reply_handler)$/;"	f	class:TorControlConnection
CommandLineRPC	bitcoin-cli.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommandLineRawTx	bitcoin-tx.cpp	/^static int CommandLineRawTx(int argc, char* argv[])$/;"	f	file:
Compact	streams.h	/^    inline void Compact()$/;"	f	class:CDataStream
Compare	uint256.h	/^    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }$/;"	f	class:base_blob
CompareCTxMemPoolIter	miner.h	/^struct CompareCTxMemPoolIter {$/;"	s
CompareDepthAndScore	txmempool.cpp	/^bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)$/;"	f	class:CTxMemPool
CompareInvMempoolOrder	net_processing.cpp	/^    CompareInvMempoolOrder(CTxMemPool *_mempool)$/;"	f	class:CompareInvMempoolOrder
CompareInvMempoolOrder	net_processing.cpp	/^class CompareInvMempoolOrder$/;"	c	file:
CompareIteratorByHash	txmempool.h	/^    struct CompareIteratorByHash {$/;"	s	class:CTxMemPool
CompareModifiedEntry	miner.h	/^struct CompareModifiedEntry {$/;"	s
CompareNetGroupKeyed	net.cpp	/^static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {$/;"	f	file:
CompareNodeBlockTime	net.cpp	/^static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareNodeTXTime	net.cpp	/^static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareTo	arith_uint256.cpp	/^int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const$/;"	f	class:base_uint
CompareTo	base58.cpp	/^int CBase58Data::CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareTxIterByAncestorCount	miner.h	/^struct CompareTxIterByAncestorCount {$/;"	s
CompareTxMemPoolEntryByAncestorFee	txmempool.h	/^class CompareTxMemPoolEntryByAncestorFee$/;"	c
CompareTxMemPoolEntryByDescendantScore	txmempool.h	/^class CompareTxMemPoolEntryByDescendantScore$/;"	c
CompareTxMemPoolEntryByEntryTime	txmempool.h	/^class CompareTxMemPoolEntryByEntryTime$/;"	c
CompareTxMemPoolEntryByScore	txmempool.h	/^class CompareTxMemPoolEntryByScore$/;"	c
Compress	compressor.cpp	/^bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const$/;"	f	class:CScriptCompressor
CompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::CompressAmount(uint64_t n)$/;"	f	class:CTxOutCompressor
ComputeBlockVersion	validation.cpp	/^int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
ComputeResponse	torcontrol.cpp	/^static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::vector<uint8_t> &cookie,  const std::vector<uint8_t> &clientNonce, const std::vector<uint8_t> &serverNonce)$/;"	f	file:
Condition	validation.cpp	/^    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const$/;"	f	class:WarningBitsConditionChecker
Condition	versionbits.cpp	/^    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const$/;"	f	class:__anon19::VersionBitsConditionChecker
Connect	torcontrol.cpp	/^bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& _connected, const ConnectionCB&  _disconnected)$/;"	f	class:TorControlConnection
ConnectBlock	validation.cpp	/^bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,$/;"	f
ConnectNode	net.cpp	/^CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)$/;"	f	class:CConnman
ConnectSocket	netbase.cpp	/^bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketByName	netbase.cpp	/^bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketDirectly	netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f	file:
ConnectThroughProxy	netbase.cpp	/^static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f	file:
ConnectTip	validation.cpp	/^bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace)$/;"	f	file:
ConnectTrace	validation.cpp	/^struct ConnectTrace {$/;"	s	file:
Connected	addrman.h	/^    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	addrman.cpp	/^void CAddrMan::Connected_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
ConnectionCB	torcontrol.cpp	/^    typedef boost::function<void(TorControlConnection&)> ConnectionCB;$/;"	t	class:TorControlConnection	file:
Consensus	miner.h	/^namespace Consensus { struct Params; };$/;"	n
Consensus	validation.cpp	/^namespace Consensus {$/;"	n	file:
Consensus	validation.h	/^namespace Consensus {$/;"	n
Contains	chain.h	/^    bool Contains(const CBlockIndex *pindex) const {$/;"	f	class:CChain
ContextualCheckBlock	validation.cpp	/^bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
ContextualCheckBlockHeader	validation.cpp	/^bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)$/;"	f
CopyrightHolders	util.cpp	/^std::string CopyrightHolders(const std::string& strPrefix)$/;"	f
Create	addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)$/;"	f	class:CAddrMan
CreateGenesisBlock	chainparams.cpp	/^static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateGenesisBlock	chainparams.cpp	/^static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateNewBlock	miner.cpp	/^std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)$/;"	f	class:BlockAssembler
CreateObfuscateKey	dbwrapper.cpp	/^std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const$/;"	f	class:CDBWrapper
CreatePidFile	util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CryptedKeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
CuckooCache	cuckoocache.h	/^namespace CuckooCache$/;"	n
Cursor	coins.cpp	/^CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }$/;"	f	class:CCoinsView
Cursor	coins.cpp	/^CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }$/;"	f	class:CCoinsViewBacked
Cursor	txdb.cpp	/^CCoinsViewCursor *CCoinsViewDB::Cursor() const$/;"	f	class:CCoinsViewDB
DATABASE_FLUSH_INTERVAL	validation.h	/^static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;$/;"	v
DATABASE_WRITE_INTERVAL	validation.h	/^static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;$/;"	v
DBWRAPPER_PREALLOC_KEY_SIZE	dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;$/;"	v
DBWRAPPER_PREALLOC_VALUE_SIZE	dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;$/;"	v
DB_BEST_BLOCK	txdb.cpp	/^static const char DB_BEST_BLOCK = 'B';$/;"	v	file:
DB_BLOCK_FILES	txdb.cpp	/^static const char DB_BLOCK_FILES = 'f';$/;"	v	file:
DB_BLOCK_INDEX	txdb.cpp	/^static const char DB_BLOCK_INDEX = 'b';$/;"	v	file:
DB_COINS	txdb.cpp	/^static const char DB_COINS = 'c';$/;"	v	file:
DB_FLAG	txdb.cpp	/^static const char DB_FLAG = 'F';$/;"	v	file:
DB_LAST_BLOCK	txdb.cpp	/^static const char DB_LAST_BLOCK = 'l';$/;"	v	file:
DB_PEAK_USAGE_FACTOR	txdb.h	/^static constexpr int DB_PEAK_USAGE_FACTOR = 2;$/;"	v
DB_REINDEX_FLAG	txdb.cpp	/^static const char DB_REINDEX_FLAG = 'R';$/;"	v	file:
DB_TXINDEX	txdb.cpp	/^static const char DB_TXINDEX = 't';$/;"	v	file:
DEFAULT_ANCESTOR_LIMIT	validation.h	/^static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;$/;"	v
DEFAULT_ANCESTOR_SIZE_LIMIT	validation.h	/^static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;$/;"	v
DEFAULT_BANSCORE_THRESHOLD	validation.h	/^static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;$/;"	v
DEFAULT_BLOCKSONLY	net.h	/^static const bool DEFAULT_BLOCKSONLY = false;$/;"	v
DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN	net_processing.h	/^static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;$/;"	v
DEFAULT_CHECKBLOCKS	validation.h	/^static const signed int DEFAULT_CHECKBLOCKS = 6;$/;"	v
DEFAULT_CHECKLEVEL	validation.h	/^static const unsigned int DEFAULT_CHECKLEVEL = 3;$/;"	v
DEFAULT_CHECKPOINTS_ENABLED	validation.h	/^static const bool DEFAULT_CHECKPOINTS_ENABLED = true;$/;"	v
DEFAULT_CONNECT_TIMEOUT	netbase.h	/^static const int DEFAULT_CONNECT_TIMEOUT = 5000;$/;"	v
DEFAULT_DESCENDANT_LIMIT	validation.h	/^static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;$/;"	v
DEFAULT_DESCENDANT_SIZE_LIMIT	validation.h	/^static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;$/;"	v
DEFAULT_DISABLE_SAFEMODE	init.cpp	/^static const bool DEFAULT_DISABLE_SAFEMODE = false;$/;"	v	file:
DEFAULT_ENABLE_REPLACEMENT	validation.h	/^static const bool DEFAULT_ENABLE_REPLACEMENT = true;$/;"	v
DEFAULT_FEEFILTER	validation.h	/^static const bool DEFAULT_FEEFILTER = true;$/;"	v
DEFAULT_FORCEDNSSEED	net.h	/^static const bool DEFAULT_FORCEDNSSEED = false;$/;"	v
DEFAULT_HTTP_CLIENT_TIMEOUT	bitcoin-cli.cpp	/^static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;$/;"	v	file:
DEFAULT_HTTP_SERVER_TIMEOUT	httpserver.h	/^static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;$/;"	v
DEFAULT_HTTP_THREADS	httpserver.h	/^static const int DEFAULT_HTTP_THREADS=4;$/;"	v
DEFAULT_HTTP_WORKQUEUE	httpserver.h	/^static const int DEFAULT_HTTP_WORKQUEUE=16;$/;"	v
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src\/config$/;"	m
DEFAULT_LIMITFREERELAY	validation.h	/^static const unsigned int DEFAULT_LIMITFREERELAY = 0;$/;"	v
DEFAULT_LISTEN	net.h	/^static const bool DEFAULT_LISTEN = true;$/;"	v
DEFAULT_LISTEN_ONION	torcontrol.h	/^static const bool DEFAULT_LISTEN_ONION = true;$/;"	v
DEFAULT_LOGIPS	util.h	/^static const bool DEFAULT_LOGIPS        = false;$/;"	v
DEFAULT_LOGTIMEMICROS	util.h	/^static const bool DEFAULT_LOGTIMEMICROS = false;$/;"	v
DEFAULT_LOGTIMESTAMPS	util.h	/^static const bool DEFAULT_LOGTIMESTAMPS = true;$/;"	v
DEFAULT_MAXRECEIVEBUFFER	net.h	/^static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;$/;"	v
DEFAULT_MAXSENDBUFFER	net.h	/^static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;$/;"	v
DEFAULT_MAX_ORPHAN_TRANSACTIONS	net_processing.h	/^static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;$/;"	v
DEFAULT_MAX_PEER_CONNECTIONS	net.h	/^static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;$/;"	v
DEFAULT_MAX_TIME_ADJUSTMENT	timedata.h	/^static const int64_t DEFAULT_MAX_TIME_ADJUSTMENT = 70 * 60;$/;"	v
DEFAULT_MAX_TIP_AGE	validation.h	/^static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;$/;"	v
DEFAULT_MAX_UPLOAD_TARGET	net.h	/^static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;$/;"	v
DEFAULT_MEMPOOL_EXPIRY	validation.h	/^static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;$/;"	v
DEFAULT_MIN_RELAY_TX_FEE	validation.h	/^static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;$/;"	v
DEFAULT_MISBEHAVING_BANTIME	net.h	/^static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  \/\/ Default 24-hour ban$/;"	v
DEFAULT_NAMED	bitcoin-cli.cpp	/^static const bool DEFAULT_NAMED=false;$/;"	v	file:
DEFAULT_NAME_LOOKUP	netbase.h	/^static const int DEFAULT_NAME_LOOKUP = true;$/;"	v
DEFAULT_PEERBLOOMFILTERS	validation.h	/^static const bool DEFAULT_PEERBLOOMFILTERS = true;$/;"	v
DEFAULT_PERMIT_BAREMULTISIG	validation.h	/^static const bool DEFAULT_PERMIT_BAREMULTISIG = true;$/;"	v
DEFAULT_PRINTPRIORITY	miner.h	/^static const bool DEFAULT_PRINTPRIORITY = false;$/;"	v
DEFAULT_PROXYRANDOMIZE	init.cpp	/^static const bool DEFAULT_PROXYRANDOMIZE = true;$/;"	v	file:
DEFAULT_RELAYPRIORITY	validation.h	/^static const bool DEFAULT_RELAYPRIORITY = true;$/;"	v
DEFAULT_REST_ENABLE	init.cpp	/^static const bool DEFAULT_REST_ENABLE = false;$/;"	v	file:
DEFAULT_RPCCONNECT	bitcoin-cli.cpp	/^static const char DEFAULT_RPCCONNECT[] = "127.0.0.1";$/;"	v	file:
DEFAULT_SCRIPTCHECK_THREADS	validation.h	/^static const int DEFAULT_SCRIPTCHECK_THREADS = 0;$/;"	v
DEFAULT_STOPAFTERBLOCKIMPORT	init.cpp	/^static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;$/;"	v	file:
DEFAULT_TESTSAFEMODE	warnings.h	/^static const bool DEFAULT_TESTSAFEMODE = false;$/;"	v
DEFAULT_TOR_CONTROL	torcontrol.cpp	/^const std::string DEFAULT_TOR_CONTROL = "127.0.0.1:9051";$/;"	v
DEFAULT_TRANSACTION_MAXFEE	validation.h	/^static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;$/;"	v
DEFAULT_TXINDEX	validation.h	/^static const bool DEFAULT_TXINDEX = false;$/;"	v
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = USE_UPNP;$/;"	v
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = false;$/;"	v
DEFAULT_WHITELISTFORCERELAY	validation.h	/^static const bool DEFAULT_WHITELISTFORCERELAY = true;$/;"	v
DEFAULT_WHITELISTRELAY	validation.h	/^static const bool DEFAULT_WHITELISTRELAY = true;$/;"	v
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DIRTY	coins.h	/^        DIRTY = (1 << 0), \/\/ This cache entry is potentially different from the version in the parent view.$/;"	e	enum:CCoinsCacheEntry::Flags
DISTCLEANFILES	Makefile	/^DISTCLEANFILES = obj\/build.h $(am__append_24)$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__include_HEADERS_DIST) \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \\$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = secp256k1 univalue$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DNSSeeds	chainparams.h	/^    const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }$/;"	f	class:CChainParams
DO_STRINGIZE	clientversion.h	38;"	d
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMP_ADDRESSES_INTERVAL	net.cpp	44;"	d	file:
DataDir	chainparamsbase.h	/^    const std::string& DataDir() const { return strDataDir; }$/;"	f	class:CBaseChainParams
DateTimeStrFormat	utiltime.cpp	/^std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)$/;"	f
DebugPrintInit	util.cpp	/^static void DebugPrintInit()$/;"	f	file:
Decode	key.cpp	/^void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtKey
Decode	pubkey.cpp	/^void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtPubKey
DecodeBase32	utilstrencodings.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	utilstrencodings.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeHexBlk	core_read.cpp	/^bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)$/;"	f
DecodeHexTx	core_read.cpp	/^bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)$/;"	f
Decompress	compressor.cpp	/^bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)$/;"	f	class:CScriptCompressor
Decompress	pubkey.cpp	/^bool CPubKey::Decompress() {$/;"	f	class:CPubKey
DecompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)$/;"	f	class:CTxOutCompressor
DefaultConsistencyChecks	chainparams.h	/^    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }$/;"	f	class:CChainParams
Delete	addrman.cpp	/^void CAddrMan::Delete(int nId)$/;"	f	class:CAddrMan
DeleteLock	sync.cpp	/^void DeleteLock(void* cs)$/;"	f
DeleteLock	sync.h	/^void static inline DeleteLock(void* cs) {}$/;"	f
DeleteNode	net.cpp	/^void CConnman::DeleteNode(CNode* pnode)$/;"	f	class:CConnman
Depth	httpserver.cpp	/^    size_t Depth()$/;"	f	class:WorkQueue
DepthAndScoreComparator	txmempool.cpp	/^class DepthAndScoreComparator$/;"	c	namespace:__anon15	file:
DereferencingComparator	indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	s
Derive	key.cpp	/^bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {$/;"	f	class:CExtKey
Derive	key.cpp	/^bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CKey
Derive	pubkey.cpp	/^bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {$/;"	f	class:CExtPubKey
Derive	pubkey.cpp	/^bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CPubKey
Disconnect	torcontrol.cpp	/^bool TorControlConnection::Disconnect()$/;"	f	class:TorControlConnection
DisconnectBlock	validation.cpp	/^bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)$/;"	f
DisconnectNode	net.cpp	/^bool CConnman::DisconnectNode(NodeId id)$/;"	f	class:CConnman
DisconnectNode	net.cpp	/^bool CConnman::DisconnectNode(const std::string& strNode)$/;"	f	class:CConnman
DisconnectTip	validation.cpp	/^bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, bool fBare = false)$/;"	f	file:
Discover	net.cpp	/^void Discover(boost::thread_group& threadGroup)$/;"	f
DumpAddresses	net.cpp	/^void CConnman::DumpAddresses()$/;"	f	class:CConnman
DumpBanlist	net.cpp	/^void CConnman::DumpBanlist()$/;"	f	class:CConnman
DumpData	net.cpp	/^void CConnman::DumpData()$/;"	f	class:CConnman
DumpMempool	validation.cpp	/^void DumpMempool(void)$/;"	f
DynamicMemoryUsage	coins.cpp	/^size_t CCoinsViewCache::DynamicMemoryUsage() const {$/;"	f	class:CCoinsViewCache
DynamicMemoryUsage	coins.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	class:CCoins
DynamicMemoryUsage	txmempool.cpp	/^size_t CTxMemPool::DynamicMemoryUsage() const {$/;"	f	class:CTxMemPool
DynamicMemoryUsage	txmempool.h	/^    size_t DynamicMemoryUsage() const { return nUsageSize; }$/;"	f	class:CTxMemPoolEntry
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const boost::unordered_set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const double& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const float& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::shared_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::unique_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::vector<X>& v)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }$/;"	f	namespace:memusage
ECCVerifyHandle	pubkey.cpp	/^ECCVerifyHandle::ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
ECCVerifyHandle	pubkey.h	/^class ECCVerifyHandle$/;"	c
ECC_InitSanityCheck	key.cpp	/^bool ECC_InitSanityCheck() {$/;"	f
ECC_Start	key.cpp	/^void ECC_Start() {$/;"	f
ECC_Stop	key.cpp	/^void ECC_Stop() {$/;"	f
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
END	utilstrencodings.h	17;"	d
ENTER_CRITICAL_SECTION	sync.h	190;"	d
ERROR_CXXFLAGS	Makefile	/^ERROR_CXXFLAGS = $/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EVENT_CFLAGS	Makefile	/^EVENT_CFLAGS = $/;"	m
EVENT_LIBS	Makefile	/^EVENT_LIBS = -levent$/;"	m
EVENT_LOG_WARN	httpserver.cpp	369;"	d	file:
EVENT_PTHREADS_CFLAGS	Makefile	/^EVENT_PTHREADS_CFLAGS = -pthread$/;"	m
EVENT_PTHREADS_LIBS	Makefile	/^EVENT_PTHREADS_LIBS = -levent_pthreads -levent$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	31;"	d
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	50;"	d
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)$/;"	f	class:CMutexLock
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    void lock() EXCLUSIVE_LOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	24;"	d
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	43;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	sync.h	/^    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)$/;"	f	class:AnnotatedMixin
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	26;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	45;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXPIRY	txmempool.h	/^    EXPIRY,      \/\/! Expired from mempool$/;"	m	class:MemPoolRemovalReason
EXTENDED_RPC_TESTS	Makefile	/^EXTENDED_RPC_TESTS = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = $(CTAES_DIST) $(am__append_19)$/;"	m
EXTRA_LIBRARIES	Makefile	/^EXTRA_LIBRARIES = $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) \\$/;"	m
EXT_PUBLIC_KEY	chainparams.h	/^        EXT_PUBLIC_KEY,$/;"	e	enum:CChainParams::Base58Type
EXT_SECRET_KEY	chainparams.h	/^        EXT_SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
Encode	key.cpp	/^void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtKey
Encode	pubkey.cpp	/^void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtPubKey
EncodeBase32	utilstrencodings.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	utilstrencodings.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	base58.cpp	/^std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeHexTx	core_write.cpp	/^std::string EncodeHexTx(const CTransaction& tx, const int serialFlags)$/;"	f
EndTime	validation.cpp	/^    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }$/;"	f	class:WarningBitsConditionChecker
EndTime	versionbits.cpp	/^    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }$/;"	f	class:__anon19::VersionBitsConditionChecker
Enqueue	httpserver.cpp	/^    bool Enqueue(WorkItem* item)$/;"	f	class:WorkQueue
Enter	sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EqualTo	arith_uint256.cpp	/^bool base_uint<BITS>::EqualTo(uint64_t b) const$/;"	f	class:base_uint
Erase	dbwrapper.h	/^    bool Erase(const K& key, bool fSync = false)$/;"	f	class:CDBWrapper
Erase	dbwrapper.h	/^    void Erase(const K& key)$/;"	f	class:CDBBatch
EraseOrphansFor	net_processing.cpp	/^void EraseOrphansFor(NodeId peer)$/;"	f
EvaluateSequenceLocks	validation.cpp	/^static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f	file:
EventBase	httpserver.cpp	/^struct event_base* EventBase()$/;"	f
Exists	dbwrapper.h	/^    bool Exists(const K& key) const$/;"	f	class:CDBWrapper
Expire	txmempool.cpp	/^int CTxMemPool::Expire(int64_t time) {$/;"	f	class:CTxMemPool
ExtractAndValidateValue	bitcoin-tx.cpp	/^static CAmount ExtractAndValidateValue(const std::string& strValue)$/;"	f	file:
ExtractMatches	merkleblock.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
ExtractPubKey	keystore.cpp	/^static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)$/;"	f	file:
FD_SETSIZE	compat.h	25;"	d
FD_SETSIZE	compat.h	27;"	d
FEEFILTER	protocol.cpp	/^const char *FEEFILTER="feefilter";$/;"	m	namespace:NetMsgType	file:
FEEFILTER_VERSION	version.h	/^static const int FEEFILTER_VERSION = 70013;$/;"	v
FEELER_INTERVAL	net.h	/^static const int FEELER_INTERVAL = 120;$/;"	v
FEELER_SLEEP_WINDOW	net.cpp	47;"	d	file:
FEE_ESTIMATES_FILENAME	init.cpp	/^static const char* FEE_ESTIMATES_FILENAME="fee_estimates.dat";$/;"	v	file:
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FILTERADD	protocol.cpp	/^const char *FILTERADD="filteradd";$/;"	m	namespace:NetMsgType	file:
FILTERCLEAR	protocol.cpp	/^const char *FILTERCLEAR="filterclear";$/;"	m	namespace:NetMsgType	file:
FILTERLOAD	protocol.cpp	/^const char *FILTERLOAD="filterload";$/;"	m	namespace:NetMsgType	file:
FLATDATA	serialize.h	347;"	d
FLUSH_STATE_ALWAYS	validation.cpp	/^    FLUSH_STATE_ALWAYS$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_IF_NEEDED	validation.cpp	/^    FLUSH_STATE_IF_NEEDED,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_NONE	validation.cpp	/^    FLUSH_STATE_NONE,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_PERIODIC	validation.cpp	/^    FLUSH_STATE_PERIODIC,$/;"	e	enum:FlushStateMode	file:
FRESH	coins.h	/^        FRESH = (1 << 1), \/\/ The parent view does not have this entry (or it is pruned).$/;"	e	enum:CCoinsCacheEntry::Flags
FastRandomContext	random.cpp	/^FastRandomContext::FastRandomContext(bool fDeterministic)$/;"	f	class:FastRandomContext
FastRandomContext	random.h	/^class FastRandomContext {$/;"	c
FetchCoins	coins.cpp	/^CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
FileCommit	util.cpp	/^void FileCommit(FILE *file)$/;"	f
FileWriteStr	util.cpp	/^static int FileWriteStr(const std::string &str, FILE *fp)$/;"	f	file:
Fill	streams.h	/^    bool Fill() {$/;"	f	class:CBufferedFile
FillBlock	blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillShortTxIDSelector	blockencodings.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
Finalize	hash.cpp	/^uint64_t CSipHasher::Finalize() const$/;"	f	class:CSipHasher
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash160
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash256
FinalizeNode	net.h	/^    boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;$/;"	m	struct:CNodeSignals
FinalizeNode	net_processing.cpp	/^void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {$/;"	f	namespace:__anon8
Find	addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)$/;"	f	class:CAddrMan
FindBlockPos	validation.cpp	/^bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)$/;"	f
FindByte	streams.h	/^    void FindByte(char ch) {$/;"	f	class:CBufferedFile
FindEarliestAtLeast	chain.cpp	/^CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const$/;"	f	class:CChain
FindFilesToPrune	validation.cpp	/^void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)$/;"	f
FindFilesToPruneManual	validation.cpp	/^void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)$/;"	f
FindFork	chain.cpp	/^const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {$/;"	f	class:CChain
FindForkInGlobalIndex	validation.cpp	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)$/;"	f
FindMostWorkChain	validation.cpp	/^static CBlockIndex* FindMostWorkChain() {$/;"	f	file:
FindNextBlocksToDownload	net_processing.cpp	/^void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {$/;"	f	namespace:__anon8
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CNetAddr& ip)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CService& addr)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CSubNet& subNet)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const std::string& addrName)$/;"	f	class:CConnman
FindUndoPos	validation.cpp	/^bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)$/;"	f
FixedSeeds	chainparams.h	/^    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }$/;"	f	class:CChainParams
Flags	coins.h	/^    enum Flags {$/;"	g	struct:CCoinsCacheEntry
Flush	coins.cpp	/^bool CCoinsViewCache::Flush() {$/;"	f	class:CCoinsViewCache
Flush	dbwrapper.h	/^    bool Flush()$/;"	f	class:CDBWrapper
FlushBlockFile	validation.cpp	/^void static FlushBlockFile(bool fFinalize = false)$/;"	f	file:
FlushStateMode	validation.cpp	/^enum FlushStateMode {$/;"	g	file:
FlushStateToDisk	validation.cpp	/^bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {$/;"	f	file:
FlushStateToDisk	validation.cpp	/^void FlushStateToDisk() {$/;"	f
ForEachNode	net.h	/^    void ForEachNode(Callable&& func) const$/;"	f	class:CConnman
ForEachNode	net.h	/^    void ForEachNode(Callable&& func)$/;"	f	class:CConnman
ForEachNodeThen	net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const$/;"	f	class:CConnman
ForEachNodeThen	net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)$/;"	f	class:CConnman
ForNode	net.cpp	/^bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)$/;"	f	class:CConnman
ForRead	serialize.h	/^    constexpr bool ForRead() const { return false; }$/;"	f	struct:CSerActionSerialize
ForRead	serialize.h	/^    constexpr bool ForRead() const { return true; }$/;"	f	struct:CSerActionUnserialize
ForceSetArg	util.cpp	/^void ForceSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
FormatArg	tinyformat.h	/^        FormatArg() {}$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	tinyformat.h	/^        FormatArg(const T& value)$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	tinyformat.h	/^class FormatArg$/;"	c	namespace:tinyformat::detail
FormatException	util.cpp	/^static std::string FormatException(const std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	clientversion.cpp	/^std::string FormatFullVersion()$/;"	f
FormatList	tinyformat.h	/^        FormatList(detail::FormatArg* formatters, int N)$/;"	f	class:tinyformat::FormatList
FormatList	tinyformat.h	/^class FormatList$/;"	c	namespace:tinyformat
FormatListN	tinyformat.h	/^        FormatListN(const Args&... args)$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	tinyformat.h	/^    public: FormatListN() : FormatList(0, 0) {}$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	tinyformat.h	/^class FormatListN : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListN	tinyformat.h	/^template<> class FormatListN<0> : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListRef	tinyformat.h	/^typedef const FormatList& FormatListRef;$/;"	t	namespace:tinyformat
FormatMoney	utilmoneystr.cpp	/^std::string FormatMoney(const CAmount& n)$/;"	f
FormatParagraph	utilstrencodings.cpp	/^std::string FormatParagraph(const std::string& in, size_t width, size_t indent)$/;"	f
FormatScript	core_write.cpp	/^std::string FormatScript(const CScript& script)$/;"	f
FormatStateMessage	validation.cpp	/^std::string FormatStateMessage(const CValidationState &state)$/;"	f
FormatSubVersion	clientversion.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatVersion	clientversion.cpp	/^static std::string FormatVersion(int nVersion)$/;"	f	file:
FromTx	coins.h	/^    void FromTx(const CTransaction &tx, int nHeightIn) {$/;"	f	class:CCoins
Function	scheduler.h	/^    typedef boost::function<void(void)> Function;$/;"	t	class:CScheduler
GCOV	Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GENERATED_TEST_FILES	Makefile	/^GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENERATED_TEST_FILES	Makefile	/^GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENHTML	Makefile	/^GENHTML = $/;"	m
GENISOIMAGE	Makefile	/^GENISOIMAGE = $/;"	m
GET	httpserver.h	/^        GET,$/;"	e	enum:HTTPRequest::RequestMethod
GETADDR	protocol.cpp	/^const char *GETADDR="getaddr";$/;"	m	namespace:NetMsgType	file:
GETBLOCKS	protocol.cpp	/^const char *GETBLOCKS="getblocks";$/;"	m	namespace:NetMsgType	file:
GETBLOCKTXN	protocol.cpp	/^const char *GETBLOCKTXN="getblocktxn";$/;"	m	namespace:NetMsgType	file:
GETDATA	protocol.cpp	/^const char *GETDATA="getdata";$/;"	m	namespace:NetMsgType	file:
GETHEADERS	protocol.cpp	/^const char *GETHEADERS="getheaders";$/;"	m	namespace:NetMsgType	file:
GETHEADERS_VERSION	version.h	/^static const int GETHEADERS_VERSION = 31800;$/;"	v
GIT	Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT_ARCHIVE	clientversion.cpp	46;"	d	file:
GIT_COMMIT_DATE	clientversion.cpp	49;"	d	file:
GIT_COMMIT_ID	clientversion.cpp	48;"	d	file:
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GUARDED_BY	threadsafety.h	18;"	d
GUARDED_BY	threadsafety.h	37;"	d
GUARDED_VAR	threadsafety.h	19;"	d
GUARDED_VAR	threadsafety.h	38;"	d
GenerateCoinbaseCommitment	validation.cpp	/^std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
Genesis	chain.h	/^    CBlockIndex *Genesis() const {$/;"	f	class:CChain
GenesisBlock	chainparams.h	/^    const CBlock& GenesisBlock() const { return genesis; }$/;"	f	class:CChainParams
Get	base58.cpp	/^CTxDestination CBitcoinAddress::Get() const$/;"	f	class:CBitcoinAddress
Get	streams.h	/^    FILE* Get() const           { return file; }$/;"	f	class:CAutoFile
GetAddedNodeInfo	net.cpp	/^std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()$/;"	f	class:CConnman
GetAddr	addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddrLocal	net.cpp	/^CService CNode::GetAddrLocal() const {$/;"	f	class:CNode
GetAddrName	net.cpp	/^std::string CNode::GetAddrName() const {$/;"	f	class:CNode
GetAddr_	addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)$/;"	f	class:CAddrMan
GetAddressCount	net.cpp	/^size_t CConnman::GetAddressCount() const$/;"	f	class:CConnman
GetAddresses	net.cpp	/^std::vector<CAddress> CConnman::GetAddresses()$/;"	f	class:CConnman
GetAdjustedTime	timedata.cpp	/^int64_t GetAdjustedTime()$/;"	f
GetAncestor	chain.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	chain.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetAndClear	streams.h	/^    void GetAndClear(CSerializeData &data) {$/;"	f	class:CDataStream
GetArg	util.cpp	/^int64_t GetArg(const std::string& strArg, int64_t nDefault)$/;"	f
GetArg	util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetBanned	net.cpp	/^void CConnman::GetBanned(banmap_t &banMap)$/;"	f	class:CConnman
GetBestBlock	coins.cpp	/^uint256 CCoinsView::GetBestBlock() const { return uint256(); }$/;"	f	class:CCoinsView
GetBestBlock	coins.cpp	/^uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }$/;"	f	class:CCoinsViewBacked
GetBestBlock	coins.cpp	/^uint256 CCoinsViewCache::GetBestBlock() const {$/;"	f	class:CCoinsViewCache
GetBestBlock	coins.h	/^    const uint256 &GetBestBlock() const { return hashBlock; }$/;"	f	class:CCoinsViewCursor
GetBestBlock	txdb.cpp	/^uint256 CCoinsViewDB::GetBestBlock() const {$/;"	f	class:CCoinsViewDB
GetBestHeight	net.cpp	/^int CConnman::GetBestHeight() const$/;"	f	class:CConnman
GetBlockFileInfo	validation.cpp	/^CBlockFileInfo* GetBlockFileInfo(size_t n)$/;"	f
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	chain.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockPos	chain.h	/^    CDiskBlockPos GetBlockPos() const {$/;"	f	class:CBlockIndex
GetBlockPosFilename	validation.cpp	/^boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)$/;"	f
GetBlockProof	chain.cpp	/^arith_uint256 GetBlockProof(const CBlockIndex& block)$/;"	f
GetBlockProofEquivalentTime	chain.cpp	/^int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)$/;"	f
GetBlockSubsidy	validation.cpp	/^CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)$/;"	f
GetBlockTime	chain.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTimeMax	chain.h	/^    int64_t GetBlockTimeMax() const$/;"	f	class:CBlockIndex
GetBoolArg	util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetBucketPosition	addrman.cpp	/^int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const$/;"	f	class:CAddrInfo
GetByte	netaddress.cpp	/^unsigned int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCScript	keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCacheSize	coins.cpp	/^unsigned int CCoinsViewCache::GetCacheSize() const {$/;"	f	class:CCoinsViewCache
GetChance	addrman.cpp	/^double CAddrInfo::GetChance(int64_t nNow) const$/;"	f	class:CAddrInfo
GetCheapHash	uint256.h	/^    uint64_t GetCheapHash() const$/;"	f	class:uint256
GetCoins	coins.cpp	/^bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }$/;"	f	class:CCoinsView
GetCoins	coins.cpp	/^bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }$/;"	f	class:CCoinsViewBacked
GetCoins	coins.cpp	/^bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewCache
GetCoins	init.cpp	/^    bool GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewErrorCatcher
GetCoins	txdb.cpp	/^bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewDB
GetCoins	txmempool.cpp	/^bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewMemPool
GetCommand	protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCompact	arith_uint256.cpp	/^uint32_t arith_uint256::GetCompact(bool fNegative) const$/;"	f	class:arith_uint256
GetConfigFile	util.cpp	/^boost::filesystem::path GetConfigFile(const std::string& confPath)$/;"	f
GetConsensus	chainparams.h	/^    const Consensus::Params& GetConsensus() const { return consensus; }$/;"	f	class:CChainParams
GetCountWithAncestors	txmempool.h	/^    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetCountWithDescendants	txmempool.h	/^    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetDNSHost	net.cpp	/^static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredServiceBits)$/;"	f	file:
GetDataDir	util.cpp	/^const boost::filesystem::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDataMsg	protocol.h	/^enum GetDataMsg$/;"	g
GetDefaultDataDir	util.cpp	/^boost::filesystem::path GetDefaultDataDir()$/;"	f
GetDefaultPort	chainparams.h	/^    int GetDefaultPort() const { return nDefaultPort; }$/;"	f	class:CChainParams
GetDeterministicRandomizer	net.cpp	/^CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const$/;"	f	class:CConnman
GetExtNetwork	netaddress.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetFee	amount.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	txmempool.h	/^    const CAmount& GetFee() const { return nFee; }$/;"	f	class:CTxMemPoolEntry
GetFeePerK	amount.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFetchFlags	net_processing.cpp	/^uint32_t GetFetchFlags(CNode* pfrom, const CBlockIndex* pprev, const Consensus::Params& chainparams) {$/;"	f
GetGroup	netaddress.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHash	hash.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	netaddress.cpp	/^uint64_t CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	pubkey.h	/^    uint256 GetHash() const$/;"	f	class:CPubKey
GetHeader	httpserver.cpp	/^std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr)$/;"	f	class:HTTPRequest
GetHeight	txmempool.h	/^    unsigned int GetHeight() const { return entryHeight; }$/;"	f	class:CTxMemPoolEntry
GetHex	arith_uint256.cpp	/^std::string base_uint<BITS>::GetHex() const$/;"	f	class:base_uint
GetHex	uint256.cpp	/^std::string base_blob<BITS>::GetHex() const$/;"	f	class:base_blob
GetID	pubkey.h	/^    CKeyID GetID() const$/;"	f	class:CPubKey
GetId	net.h	/^    NodeId GetId() const {$/;"	f	class:CNode
GetIn6Addr	netaddress.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	netaddress.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetInfo	txmempool.cpp	/^static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {$/;"	f	file:
GetKey	base58.cpp	/^CKey CBitcoinSecret::GetKey()$/;"	f	class:CBitcoinSecret
GetKey	base58.h	/^    K GetKey() {$/;"	f	class:CBitcoinExtKeyBase
GetKey	dbwrapper.h	/^    template<typename K> bool GetKey(K& key) {$/;"	f	class:CDBIterator
GetKey	keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	netaddress.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	txdb.cpp	/^bool CCoinsViewDBCursor::GetKey(uint256 &key) const$/;"	f	class:CCoinsViewDBCursor
GetKeyID	base58.cpp	/^bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const$/;"	f	class:CBitcoinAddress
GetKeySize	dbwrapper.h	/^    unsigned int GetKeySize() {$/;"	f	class:CDBIterator
GetKeys	keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetLastCheckpoint	checkpoints.cpp	/^    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)$/;"	f	namespace:Checkpoints
GetLegacySigOpCount	validation.cpp	/^unsigned int GetLegacySigOpCount(const CTransaction& tx)$/;"	f
GetLen	pubkey.h	/^    unsigned int static GetLen(unsigned char chHeader)$/;"	f	class:CPubKey
GetListenPort	net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)$/;"	f
GetLocalNonce	net.h	/^    uint64_t GetLocalNonce() const {$/;"	f	class:CNode
GetLocalServices	net.cpp	/^ServiceFlags CConnman::GetLocalServices() const$/;"	f	class:CConnman
GetLocalServices	net.h	/^    ServiceFlags GetLocalServices() const$/;"	f	class:CNode
GetLocator	chain.cpp	/^CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {$/;"	f	class:CChain
GetLockPoints	txmempool.h	/^    const LockPoints& GetLockPoints() const { return lockPoints; }$/;"	f	class:CTxMemPoolEntry
GetLogTimeMicros	utiltime.cpp	/^int64_t GetLogTimeMicros()$/;"	f
GetLow64	arith_uint256.h	/^    uint64_t GetLow64() const$/;"	f	class:base_uint
GetMainSignals	validationinterface.cpp	/^CMainSignals& GetMainSignals()$/;"	f
GetMaxOutboundTarget	net.cpp	/^uint64_t CConnman::GetMaxOutboundTarget()$/;"	f	class:CConnman
GetMaxOutboundTimeLeftInCycle	net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeLeftInCycle()$/;"	f	class:CConnman
GetMaxOutboundTimeframe	net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeframe()$/;"	f	class:CConnman
GetMedianTimePast	chain.h	/^    int64_t GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMemPoolChildren	txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const$/;"	f	class:CTxMemPool
GetMemPoolParents	txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const$/;"	f	class:CTxMemPool
GetMessageHash	net.cpp	/^const uint256& CNetMessage::GetMessageHash() const$/;"	f	class:CNetMessage
GetMinFee	txmempool.cpp	/^CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {$/;"	f	class:CTxMemPool
GetModFeesWithAncestors	txmempool.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetModFeesWithDescendants	txmempool.h	/^    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetModifiedFee	txmempool.h	/^    int64_t GetModifiedFee() const { return nFee + feeDelta; }$/;"	f	class:CTxMemPoolEntry
GetMyStartingHeight	net.h	/^    int GetMyStartingHeight() const {$/;"	f	class:CNode
GetNameProxy	netbase.cpp	/^bool GetNameProxy(proxyType &nameProxyOut) {$/;"	f
GetNetwork	netaddress.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkActive	net.h	/^    bool GetNetworkActive() const { return fNetworkActive; };$/;"	f	class:CConnman
GetNetworkName	netbase.cpp	/^std::string GetNetworkName(enum Network net) {$/;"	f
GetNewBucket	addrman.cpp	/^int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	addrman.h	/^    int GetNewBucket(const uint256 &nKey) const$/;"	f	class:CAddrInfo
GetNewNodeId	net.cpp	/^NodeId CConnman::GetNewNodeId()$/;"	f	class:CConnman
GetNextWorkRequired	pow.cpp	/^unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)$/;"	f
GetNodeCount	net.cpp	/^size_t CConnman::GetNodeCount(NumConnections flags)$/;"	f	class:CConnman
GetNodeSignals	net.cpp	/^CNodeSignals& GetNodeSignals() { return g_signals; }$/;"	f
GetNodeStateStats	net_processing.cpp	/^bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {$/;"	f
GetNodeStats	net.cpp	/^void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	class:CConnman
GetNumCores	util.cpp	/^int GetNumCores()$/;"	f
GetOSRand	random.cpp	/^static void GetOSRand(unsigned char *ent32)$/;"	f	file:
GetObfuscateKey	dbwrapper.cpp	/^const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)$/;"	f	namespace:dbwrapper_private
GetOptions	dbwrapper.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize)$/;"	f	file:
GetOutboundTargetBytesLeft	net.cpp	/^uint64_t CConnman::GetOutboundTargetBytesLeft()$/;"	f	class:CConnman
GetOutputFor	coins.cpp	/^const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const$/;"	f	class:CCoinsViewCache
GetP2SHSigOpCount	validation.cpp	/^unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)$/;"	f
GetPeer	httpserver.cpp	/^CService HTTPRequest::GetPeer()$/;"	f	class:HTTPRequest
GetPerformanceCounter	random.cpp	/^static inline int64_t GetPerformanceCounter()$/;"	f	file:
GetPidFile	util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPort	netaddress.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPos	streams.h	/^    uint64_t GetPos() {$/;"	f	class:CBufferedFile
GetPriority	coins.cpp	/^double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const$/;"	f	class:CCoinsViewCache
GetPriority	txmempool.cpp	/^CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const$/;"	f	class:CTxMemPoolEntry
GetPrivKey	key.cpp	/^CPrivKey CKey::GetPrivKey() const {$/;"	f	class:CKey
GetPrivateKeyFile	torcontrol.cpp	/^std::string TorController::GetPrivateKeyFile()$/;"	f	class:TorController
GetProxy	netbase.cpp	/^bool GetProxy(enum Network net, proxyType &proxyInfoOut) {$/;"	f
GetPubKey	key.cpp	/^CPubKey CKey::GetPubKey() const {$/;"	f	class:CKey
GetPubKey	keystore.cpp	/^bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CBasicKeyStore
GetRand	random.cpp	/^uint64_t GetRand(uint64_t nMax)$/;"	f
GetRandBytes	random.cpp	/^void GetRandBytes(unsigned char* buf, int num)$/;"	f
GetRandHash	random.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	random.cpp	/^int GetRandInt(int nMax)$/;"	f
GetReachabilityFrom	netaddress.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetReceiveFloodSize	net.cpp	/^unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }$/;"	f	class:CConnman
GetRecvVersion	net.h	/^    int GetRecvVersion()$/;"	f	class:CNode
GetRefCount	net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetRequestMethod	httpserver.cpp	/^HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()$/;"	f	class:HTTPRequest
GetScriptError	validation.h	/^    ScriptError GetScriptError() const { return error; }$/;"	f	class:CScriptCheck
GetScriptForMining	validationinterface.h	/^    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};$/;"	f	class:CValidationInterface
GetSendBufferSize	net.cpp	/^unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }$/;"	f	class:CConnman
GetSendVersion	net.cpp	/^int CNode::GetSendVersion() const$/;"	f	class:CNode
GetSerializeSize	serialize.h	/^size_t GetSerializeSize(const S& s, const T& t)$/;"	f
GetSerializeSize	serialize.h	/^size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)$/;"	f
GetSharedTx	txmempool.h	/^    CTransactionRef GetSharedTx() const { return this->tx; }$/;"	f	class:CTxMemPoolEntry
GetShortID	blockencodings.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetSigOpCost	txmempool.h	/^    int64_t GetSigOpCost() const { return sigOpCost; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCostWithAncestors	txmempool.h	/^    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64_t nSize)$/;"	f
GetSizeOfVarInt	serialize.h	/^inline unsigned int GetSizeOfVarInt(I n)$/;"	f
GetSizeWithAncestors	txmempool.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSizeWithDescendants	txmempool.h	/^    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetSkipHeight	chain.cpp	/^int static inline GetSkipHeight(int height) {$/;"	f	file:
GetSockAddr	netaddress.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSortedDepthAndScore	txmempool.cpp	/^std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const$/;"	f	class:CTxMemPool
GetSpecialFolderPath	util.cpp	/^boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetSpecialSize	compressor.cpp	/^unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const$/;"	f	class:CScriptCompressor
GetSpendHeight	validation.cpp	/^int GetSpendHeight(const CCoinsViewCache& inputs)$/;"	f
GetSpendsCoinbase	txmempool.h	/^    bool GetSpendsCoinbase() const { return spendsCoinbase; }$/;"	f	class:CTxMemPoolEntry
GetStateFor	versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateSinceHeightFor	versionbits.cpp	/^int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStrongRandBytes	random.cpp	/^void GetStrongRandBytes(unsigned char* out, int num)$/;"	f
GetSystemTimeInSeconds	utiltime.cpp	/^int64_t GetSystemTimeInSeconds()$/;"	f
GetTime	txmempool.h	/^    int64_t GetTime() const { return nTime; }$/;"	f	class:CTxMemPoolEntry
GetTime	utiltime.cpp	/^int64_t GetTime()$/;"	f
GetTimeMicros	utiltime.cpp	/^int64_t GetTimeMicros()$/;"	f
GetTimeMillis	utiltime.cpp	/^int64_t GetTimeMillis()$/;"	f
GetTimeOffset	timedata.cpp	/^int64_t GetTimeOffset()$/;"	f
GetTotalBytesRecv	net.cpp	/^uint64_t CConnman::GetTotalBytesRecv()$/;"	f	class:CConnman
GetTotalBytesSent	net.cpp	/^uint64_t CConnman::GetTotalBytesSent()$/;"	f	class:CConnman
GetTotalTxSize	txmempool.h	/^    uint64_t GetTotalTxSize()$/;"	f	class:CTxMemPool
GetTransaction	validation.cpp	/^bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)$/;"	f
GetTransactionSigOpCost	validation.cpp	/^int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)$/;"	f
GetTransactionsUpdated	txmempool.cpp	/^unsigned int CTxMemPool::GetTransactionsUpdated() const$/;"	f	class:CTxMemPool
GetTriedBucket	addrman.cpp	/^int CAddrInfo::GetTriedBucket(const uint256& nKey) const$/;"	f	class:CAddrInfo
GetTx	txmempool.h	/^    const CTransaction& GetTx() const { return *this->tx; }$/;"	f	class:CTxMemPoolEntry
GetTxSize	txmempool.cpp	/^size_t CTxMemPoolEntry::GetTxSize() const$/;"	f	class:CTxMemPoolEntry
GetTxWeight	txmempool.h	/^    size_t GetTxWeight() const { return nTxWeight; }$/;"	f	class:CTxMemPoolEntry
GetType	hash.h	/^    int GetType() const { return nType; }$/;"	f	class:CHashWriter
GetType	serialize.h	/^    int GetType() const { return nType; }$/;"	f	class:CSizeComputer
GetType	streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CAutoFile
GetType	streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CDataStream
GetType	streams.h	/^    int GetType() const { return nType; }$/;"	f	class:CBufferedFile
GetType	streams.h	/^    int GetType() const { return nType; }$/;"	f	class:OverrideStream
GetType	streams.h	/^    int GetType() const$/;"	f	class:CVectorWriter
GetURI	httpserver.cpp	/^std::string HTTPRequest::GetURI()$/;"	f	class:HTTPRequest
GetUint64	uint256.h	/^    uint64_t GetUint64(int pos) const$/;"	f	class:base_blob
GetUndoPos	chain.h	/^    CDiskBlockPos GetUndoPos() const {$/;"	f	class:CBlockIndex
GetValue	dbwrapper.h	/^    template<typename V> bool GetValue(V& value) {$/;"	f	class:CDBIterator
GetValue	txdb.cpp	/^bool CCoinsViewDBCursor::GetValue(CCoins &coins) const$/;"	f	class:CCoinsViewDBCursor
GetValueIn	coins.cpp	/^CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
GetValueSize	dbwrapper.h	/^    unsigned int GetValueSize() {$/;"	f	class:CDBIterator
GetValueSize	txdb.cpp	/^unsigned int CCoinsViewDBCursor::GetValueSize() const$/;"	f	class:CCoinsViewDBCursor
GetVersion	hash.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CHashWriter
GetVersion	serialize.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CSizeComputer
GetVersion	streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CDataStream
GetVersion	streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CBufferedFile
GetVersion	streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:OverrideStream
GetVersion	streams.h	/^    int GetVersion() const$/;"	f	class:CVectorWriter
GetWarnings	warnings.cpp	/^std::string GetWarnings(const std::string& strFor)$/;"	f
GetWitnessCommitmentIndex	validation.cpp	/^static int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f	file:
GetfLargeWorkForkFound	warnings.cpp	/^bool GetfLargeWorkForkFound()$/;"	f
GetfLargeWorkInvalidChainFound	warnings.cpp	/^bool GetfLargeWorkInvalidChainFound()$/;"	f
GetnScore	net.cpp	/^int GetnScore(const CService& addr)$/;"	f
Good	addrman.h	/^    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	addrman.cpp	/^void CAddrMan::Good_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
GuessVerificationProgress	validation.cpp	/^double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {$/;"	f
HARDENED_CPPFLAGS	Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CXXFLAGS	Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_LDFLAGS	Makefile	/^HARDENED_LDFLAGS =  -Wl,-z,relro -Wl,-z,now -pie$/;"	m
HAVE_CXX11	Makefile	/^HAVE_CXX11 = 1$/;"	m
HEAD	httpserver.h	/^        HEAD,$/;"	e	enum:HTTPRequest::RequestMethod
HEADERS	Makefile	/^HEADERS = $(include_HEADERS)$/;"	m
HEADERS	protocol.cpp	/^const char *HEADERS="headers";$/;"	m	namespace:NetMsgType	file:
HEADER_SIZE	protocol.h	/^        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE$/;"	e	enum:CMessageHeader::__anon10
HEXDUMP	Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HIGH_MAX_TX_FEE	validation.h	/^static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;$/;"	v
HIGH_TX_FEE_PER_KB	validation.h	/^static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;$/;"	v
HMM_BITCOIND	init.h	/^    HMM_BITCOIND,$/;"	e	enum:HelpMessageMode
HMM_BITCOIN_QT	init.h	/^    HMM_BITCOIN_QT$/;"	e	enum:HelpMessageMode
HTTPBindAddresses	httpserver.cpp	/^static bool HTTPBindAddresses(struct evhttp* http)$/;"	f	file:
HTTPClosure	httpserver.h	/^class HTTPClosure$/;"	c
HTTPEvent	httpserver.cpp	/^HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):$/;"	f	class:HTTPEvent
HTTPEvent	httpserver.h	/^class HTTPEvent$/;"	c
HTTPPathHandler	httpserver.cpp	/^    HTTPPathHandler() {}$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	httpserver.cpp	/^    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	httpserver.cpp	/^struct HTTPPathHandler$/;"	s	file:
HTTPRPCTimer	httprpc.cpp	/^    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) :$/;"	f	class:HTTPRPCTimer
HTTPRPCTimer	httprpc.cpp	/^class HTTPRPCTimer : public RPCTimerBase$/;"	c	file:
HTTPRPCTimerInterface	httprpc.cpp	/^    HTTPRPCTimerInterface(struct event_base* _base) : base(_base)$/;"	f	class:HTTPRPCTimerInterface
HTTPRPCTimerInterface	httprpc.cpp	/^class HTTPRPCTimerInterface : public RPCTimerInterface$/;"	c	file:
HTTPReply	bitcoin-cli.cpp	/^    HTTPReply(): status(0), error(-1) {}$/;"	f	struct:HTTPReply
HTTPReply	bitcoin-cli.cpp	/^struct HTTPReply$/;"	s	file:
HTTPReq_JSONRPC	httprpc.cpp	/^static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)$/;"	f	file:
HTTPRequest	httpserver.cpp	/^HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),$/;"	f	class:HTTPRequest
HTTPRequest	httpserver.h	/^class HTTPRequest$/;"	c
HTTPRequestHandler	httpserver.h	/^typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;$/;"	t
HTTPWorkItem	httpserver.cpp	/^    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):$/;"	f	class:HTTPWorkItem
HTTPWorkItem	httpserver.cpp	/^class HTTPWorkItem : public HTTPClosure$/;"	c	file:
HTTPWorkQueueRun	httpserver.cpp	/^static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)$/;"	f	file:
HandleError	dbwrapper.cpp	/^void HandleError(const leveldb::Status& status)$/;"	f	namespace:dbwrapper_private
HandleSIGHUP	init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	init.cpp	/^void HandleSIGTERM(int)$/;"	f
HasNoInputsOf	txmempool.cpp	/^bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const$/;"	f	class:CTxMemPool
Hash	bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
Hash	hash.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	hash.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const T1 pbegin, const T1 pend)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const prevector<N, unsigned char>& vch)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HaveCScript	keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveCoins	coins.cpp	/^bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }$/;"	f	class:CCoinsView
HaveCoins	coins.cpp	/^bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }$/;"	f	class:CCoinsViewBacked
HaveCoins	coins.cpp	/^bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
HaveCoins	txdb.cpp	/^bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewDB
HaveCoins	txmempool.cpp	/^bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewMemPool
HaveCoinsInCache	coins.cpp	/^bool CCoinsViewCache::HaveCoinsInCache(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
HaveInputs	coins.cpp	/^bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
HaveKey	keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveNameProxy	netbase.cpp	/^bool HaveNameProxy() {$/;"	f
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly() const$/;"	f	class:CBasicKeyStore
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const$/;"	f	class:CBasicKeyStore
Height	chain.h	/^    int Height() const {$/;"	f	class:CChain
HelpMessage	init.cpp	/^std::string HelpMessage(HelpMessageMode mode)$/;"	f
HelpMessageCli	bitcoin-cli.cpp	/^std::string HelpMessageCli()$/;"	f
HelpMessageGroup	util.cpp	/^std::string HelpMessageGroup(const std::string &message) {$/;"	f
HelpMessageMode	init.h	/^enum HelpMessageMode {$/;"	g
HelpMessageOpt	util.cpp	/^std::string HelpMessageOpt(const std::string &option, const std::string &message) {$/;"	f
HexDigit	utilstrencodings.cpp	/^signed char HexDigit(char c)$/;"	f
HexStr	utilstrencodings.h	/^inline std::string HexStr(const T& vch, bool fSpaces=false)$/;"	f
HexStr	utilstrencodings.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
ICON_ERROR	ui_interface.h	/^        ICON_ERROR          = (1U << 1),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	ui_interface.h	/^        ICON_INFORMATION    = 0,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MASK	ui_interface.h	/^        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	ui_interface.h	/^        ICON_WARNING        = (1U << 0),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
IMAGEMAGICK_CONVERT	Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
INIT_PROTO_VERSION	version.h	/^static const int INIT_PROTO_VERSION = 209;$/;"	v
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLNAMETOOL	Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INV	protocol.cpp	/^const char *INV="inv";$/;"	m	namespace:NetMsgType	file:
INVALID_CB_NO_BAN_VERSION	version.h	/^static const int INVALID_CB_NO_BAN_VERSION = 70015;$/;"	v
INVALID_SOCKET	compat.h	64;"	d
INVENTORY_BROADCAST_INTERVAL	validation.h	/^static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;$/;"	v
INVENTORY_BROADCAST_MAX	validation.h	/^static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;$/;"	v
IPV6_PROTECTION_LEVEL	net.cpp	60;"	d	file:
IncrementExtraNonce	miner.cpp	/^void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
Init	addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	netaddress.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	netaddress.cpp	/^void CService::Init()$/;"	f	class:CService
Init	protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	streams.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
InitBlockIndex	validation.cpp	/^bool InitBlockIndex(const CChainParams& chainparams)$/;"	f
InitData	blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitError	ui_interface.cpp	/^bool InitError(const std::string& str)$/;"	f
InitHTTPAllowList	httpserver.cpp	/^static bool InitHTTPAllowList()$/;"	f	file:
InitHTTPServer	httpserver.cpp	/^bool InitHTTPServer()$/;"	f
InitLogging	init.cpp	/^void InitLogging()$/;"	f
InitMessage	ui_interface.h	/^    boost::signals2::signal<void (const std::string &message)> InitMessage;$/;"	m	class:CClientUIInterface
InitParameterInteraction	init.cpp	/^void InitParameterInteraction()$/;"	f
InitRPCAuthentication	httprpc.cpp	/^static bool InitRPCAuthentication()$/;"	f	file:
InitSanityCheck	init.cpp	/^bool InitSanityCheck(void)$/;"	f
InitWarning	ui_interface.cpp	/^void InitWarning(const std::string& str)$/;"	f
InitializeNode	net.h	/^    boost::signals2::signal<void (CNode*, CConnman&)> InitializeNode;$/;"	m	struct:CNodeSignals
InitializeNode	net_processing.cpp	/^void InitializeNode(CNode *pnode, CConnman& connman) {$/;"	f	namespace:__anon8
InsertBlockIndex	validation.cpp	/^CBlockIndex * InsertBlockIndex(uint256 hash)$/;"	f
InterpretBool	util.cpp	/^static bool InterpretBool(const std::string& strValue)$/;"	f	file:
InterpretNegativeSetting	util.cpp	/^static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)$/;"	f	file:
Interrupt	httpserver.cpp	/^    void Interrupt()$/;"	f	class:WorkQueue
Interrupt	init.cpp	/^void Interrupt(boost::thread_group& threadGroup)$/;"	f
Interrupt	net.cpp	/^void CConnman::Interrupt()$/;"	f	class:CConnman
InterruptHTTPRPC	httprpc.cpp	/^void InterruptHTTPRPC()$/;"	f
InterruptHTTPServer	httpserver.cpp	/^void InterruptHTTPServer()$/;"	f
InterruptREST	rest.cpp	/^void InterruptREST()$/;"	f
InterruptSocks5	netbase.cpp	/^void InterruptSocks5(bool interrupt)$/;"	f
InterruptTorControl	torcontrol.cpp	/^void InterruptTorControl()$/;"	f
InterruptibleRecv	netbase.cpp	/^bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)$/;"	f	file:
InvLockOrders	sync.cpp	/^typedef std::set<std::pair<void*, void*> > InvLockOrders;$/;"	t	file:
InvalidBlockFound	validation.cpp	/^void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {$/;"	f	file:
InvalidChainFound	validation.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
Invalidate	pubkey.h	/^    void Invalidate()$/;"	f	class:CPubKey
InvalidateBlock	validation.cpp	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)$/;"	f
Inventory	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> Inventory;$/;"	m	struct:CMainSignals
Inventory	validationinterface.h	/^    virtual void Inventory(const uint256 &hash) {}$/;"	f	class:CValidationInterface
InvertLowestOne	chain.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
IsArgSet	util.cpp	/^bool IsArgSet(const std::string& strArg)$/;"	f
IsAvailable	coins.h	/^    bool IsAvailable(unsigned int nPos) const {$/;"	f	class:CCoins
IsBanned	net.cpp	/^bool CConnman::IsBanned(CNetAddr ip)$/;"	f	class:CConnman
IsBanned	net.cpp	/^bool CConnman::IsBanned(CSubNet subnet)$/;"	f	class:CConnman
IsCoinBase	coins.h	/^    bool IsCoinBase() const {$/;"	f	class:CCoins
IsCompressed	key.h	/^    bool IsCompressed() const { return fCompressed; }$/;"	f	class:CKey
IsCompressed	pubkey.h	/^    bool IsCompressed() const$/;"	f	class:CPubKey
IsCurrentForFeeEstimation	validation.cpp	/^static bool IsCurrentForFeeEstimation()$/;"	f	file:
IsEmpty	dbwrapper.cpp	/^bool CDBWrapper::IsEmpty()$/;"	f	class:CDBWrapper
IsFinalTx	validation.cpp	/^bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)$/;"	f
IsFullyValid	pubkey.cpp	/^bool CPubKey::IsFullyValid() const {$/;"	f	class:CPubKey
IsHex	utilstrencodings.cpp	/^bool IsHex(const string& str)$/;"	f
IsIPv4	netaddress.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	netaddress.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsIdle	checkqueue.h	/^    bool IsIdle()$/;"	f	class:CCheckQueue
IsInitialBlockDownload	validation.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsLimited	net.cpp	/^bool IsLimited(const CNetAddr &addr)$/;"	f
IsLimited	net.cpp	/^bool IsLimited(enum Network net)$/;"	f
IsLocal	net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	netaddress.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsMulticast	netaddress.cpp	/^bool CNetAddr::IsMulticast() const$/;"	f	class:CNetAddr
IsNull	chain.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	struct:CDiskBlockPos
IsNull	streams.h	/^    bool IsNull() const         { return (file == NULL); }$/;"	f	class:CAutoFile
IsNull	uint256.h	/^    bool IsNull() const$/;"	f	class:base_blob
IsPeerAddrLocalGood	net.cpp	/^bool IsPeerAddrLocalGood(CNode *pnode)$/;"	f
IsProxy	netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPruned	coins.h	/^    bool IsPruned() const {$/;"	f	class:CCoins
IsRFC1918	netaddress.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC2544	netaddress.cpp	/^bool CNetAddr::IsRFC2544() const$/;"	f	class:CNetAddr
IsRFC3849	netaddress.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	netaddress.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	netaddress.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	netaddress.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	netaddress.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	netaddress.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	netaddress.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC5737	netaddress.cpp	/^bool CNetAddr::IsRFC5737() const$/;"	f	class:CNetAddr
IsRFC6052	netaddress.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	netaddress.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRFC6598	netaddress.cpp	/^bool CNetAddr::IsRFC6598() const$/;"	f	class:CNetAddr
IsReachable	net.cpp	/^bool IsReachable(const CNetAddr& addr)$/;"	f
IsReachable	net.cpp	/^bool IsReachable(enum Network net)$/;"	f
IsRelevantAndUpdate	bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)$/;"	f	class:CBloomFilter
IsRoutable	netaddress.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsScript	base58.cpp	/^bool CBitcoinAddress::IsScript() const$/;"	f	class:CBitcoinAddress
IsSelectableSocket	compat.h	/^bool static inline IsSelectableSocket(SOCKET s) {$/;"	f
IsSwitchChar	util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	addrman.cpp	/^bool CAddrInfo::IsTerrible(int64_t nNow) const$/;"	f	class:CAddrInfo
IsToKeyID	compressor.cpp	/^bool CScriptCompressor::IsToKeyID(CKeyID &hash) const$/;"	f	class:CScriptCompressor
IsToPubKey	compressor.cpp	/^bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const$/;"	f	class:CScriptCompressor
IsToScriptID	compressor.cpp	/^bool CScriptCompressor::IsToScriptID(CScriptID &hash) const$/;"	f	class:CScriptCompressor
IsTor	netaddress.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsTxAvailable	blockencodings.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsValid	base58.cpp	/^bool CBitcoinAddress::IsValid() const$/;"	f	class:CBitcoinAddress
IsValid	base58.cpp	/^bool CBitcoinAddress::IsValid(const CChainParams& params) const$/;"	f	class:CBitcoinAddress
IsValid	base58.cpp	/^bool CBitcoinSecret::IsValid() const$/;"	f	class:CBitcoinSecret
IsValid	chain.h	/^    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	key.h	/^    bool IsValid() const { return fValid; }$/;"	f	class:CKey
IsValid	netaddress.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	netaddress.cpp	/^bool CSubNet::IsValid() const$/;"	f	class:CSubNet
IsValid	netbase.h	/^    bool IsValid() const { return proxy.IsValid(); }$/;"	f	class:proxyType
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const$/;"	f	class:CMessageHeader
IsValid	pubkey.h	/^    bool IsValid() const$/;"	f	class:CPubKey
IsWhitelistedRange	net.cpp	/^bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {$/;"	f	class:CConnman
IsWithinSizeConstraints	bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	validation.cpp	/^bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IteratorComparator	net_processing.cpp	/^struct IteratorComparator$/;"	s	file:
JSONErrorReply	httprpc.cpp	/^static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)$/;"	f	file:
JSON_TEST_FILES	Makefile	/^JSON_TEST_FILES = \\$/;"	m
KeyMap	keystore.h	/^typedef std::map<CKeyID, CKey> KeyMap;$/;"	t
LCOV	Makefile	/^LCOV = $/;"	m
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LEAVE_CRITICAL_SECTION	sync.h	196;"	d
LEVELDB_CPPFLAGS	Makefile	/^LEVELDB_CPPFLAGS =  $(am__append_11)$/;"	m
LEVELDB_CPPFLAGS_INT	Makefile	/^LEVELDB_CPPFLAGS_INT = -I$(srcdir)\/leveldb \\$/;"	m
LEVELDB_TARGET_FLAGS	Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_LINUX$/;"	m
LIBBITCOINCONSENSUS	Makefile	/^LIBBITCOINCONSENSUS = libbitcoinconsensus.la$/;"	m
LIBBITCOINQT	Makefile	/^LIBBITCOINQT = qt\/libbitcoinqt.a$/;"	m
LIBBITCOIN_CLI	Makefile	/^LIBBITCOIN_CLI = libbitcoin_cli.a$/;"	m
LIBBITCOIN_COMMON	Makefile	/^LIBBITCOIN_COMMON = libbitcoin_common.a$/;"	m
LIBBITCOIN_CONSENSUS	Makefile	/^LIBBITCOIN_CONSENSUS = libbitcoin_consensus.a$/;"	m
LIBBITCOIN_CRYPTO	Makefile	/^LIBBITCOIN_CRYPTO = crypto\/libbitcoin_crypto.a$/;"	m
LIBBITCOIN_SERVER	Makefile	/^LIBBITCOIN_SERVER = libbitcoin_server.a$/;"	m
LIBBITCOIN_UTIL	Makefile	/^LIBBITCOIN_UTIL = libbitcoin_util.a$/;"	m
LIBBITCOIN_WALLET	Makefile	/^LIBBITCOIN_WALLET = libbitcoin_wallet.a$/;"	m
LIBLEVELDB	Makefile	/^LIBLEVELDB =  $(am__append_9)$/;"	m
LIBLEVELDB_INT	Makefile	/^LIBLEVELDB_INT = leveldb\/libleveldb.a$/;"	m
LIBMEMENV	Makefile	/^LIBMEMENV =  $(am__append_10)$/;"	m
LIBMEMENV_INT	Makefile	/^LIBMEMENV_INT = leveldb\/libmemenv.a$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBSECP256K1	Makefile	/^LIBSECP256K1 = secp256k1\/libsecp256k1.la$/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL_APP_LDFLAGS	Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBUNIVALUE	Makefile	/^LIBUNIVALUE = univalue\/libunivalue.la$/;"	m
LIMITED_STRING	serialize.h	350;"	d
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN2	bloom.cpp	20;"	d	file:
LN2SQUARED	bloom.cpp	19;"	d	file:
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOCAL_BIND	net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon6
LOCAL_IF	net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon6
LOCAL_MANUAL	net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon6
LOCAL_MAX	net.h	/^    LOCAL_MAX$/;"	e	enum:__anon6
LOCAL_NONE	net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon6
LOCAL_UPNP	net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon6
LOCK	sync.h	186;"	d
LOCK2	sync.h	187;"	d
LOCKABLE	threadsafety.h	16;"	d
LOCKABLE	threadsafety.h	35;"	d
LOCKS_EXCLUDED	threadsafety.h	30;"	d
LOCKS_EXCLUDED	threadsafety.h	49;"	d
LOCK_RETURNED	threadsafety.h	29;"	d
LOCK_RETURNED	threadsafety.h	48;"	d
LOG_COMPILE	Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LRELEASE	Makefile	/^LRELEASE = \/usr\/lib\/x86_64-linux-gnu\/qt5\/bin\/lrelease$/;"	m
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTOBJCXXCOMPILE	Makefile	/^LTOBJCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LT_SYS_LIBRARY_PATH	Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LUPDATE	Makefile	/^LUPDATE = \/usr\/lib\/x86_64-linux-gnu\/qt5\/bin\/lupdate$/;"	m
LastCommonAncestor	net_processing.cpp	/^const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {$/;"	f	namespace:__anon8
LeaveCritical	sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	sync.h	/^void static inline LeaveCritical() {}$/;"	f
LicenseInfo	init.cpp	/^std::string LicenseInfo()$/;"	f
LimitMempoolSize	validation.cpp	/^void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {$/;"	f
LimitedString	serialize.h	/^    LimitedString(std::string& _string) : string(_string) {}$/;"	f	class:LimitedString
LimitedString	serialize.h	/^class LimitedString$/;"	c
ListenSocket	net.h	/^        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}$/;"	f	struct:CConnman::ListenSocket
ListenSocket	net.h	/^    struct ListenSocket {$/;"	s	class:CConnman
Load	key.cpp	/^bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {$/;"	f	class:CKey
LoadBlockIndex	validation.cpp	/^bool LoadBlockIndex(const CChainParams& chainparams)$/;"	f
LoadBlockIndexDB	validation.cpp	/^bool static LoadBlockIndexDB(const CChainParams& chainparams)$/;"	f	file:
LoadBlockIndexGuts	txdb.cpp	/^bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)$/;"	f	class:CBlockTreeDB
LoadExternalBlockFile	validation.cpp	/^bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)$/;"	f
LoadMempool	validation.cpp	/^bool LoadMempool(void)$/;"	f
LoadWallet	ui_interface.h	/^    boost::signals2::signal<void (CWallet* wallet)> LoadWallet;$/;"	m	class:CClientUIInterface
LocalServiceInfo	net.h	/^struct LocalServiceInfo {$/;"	s
LockData	sync.cpp	/^    LockData() : available(true) {}$/;"	f	struct:LockData
LockData	sync.cpp	/^struct LockData {$/;"	s	file:
LockDataDirectory	init.cpp	/^static bool LockDataDirectory(bool probeOnly)$/;"	f	file:
LockOrders	sync.cpp	/^typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;$/;"	t	file:
LockPoints	txmempool.h	/^    LockPoints() : height(0), time(0), maxInputBlock(NULL) { }$/;"	f	struct:LockPoints
LockPoints	txmempool.h	/^struct LockPoints$/;"	s
LockStack	sync.cpp	/^typedef std::vector<std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
LocksHeld	sync.cpp	/^std::string LocksHeld()$/;"	f
LogAcceptCategory	util.cpp	/^bool LogAcceptCategory(const char* category)$/;"	f
LogPrint	util.h	76;"	d
LogPrintStr	util.cpp	/^int LogPrintStr(const std::string &str)$/;"	f
LogPrintf	util.h	82;"	d
LogTimestampStr	util.cpp	/^static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fStartedNewLine)$/;"	f	file:
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupIntern	netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupNumeric	netbase.cpp	/^CService LookupNumeric(const char *pszName, int portDefault)$/;"	f
LookupSubNet	netbase.cpp	/^bool LookupSubNet(const char* pszName, CSubNet& ret)$/;"	f
Loop	checkqueue.h	/^    bool Loop(bool fMaster = false)$/;"	f	class:CCheckQueue
MAIN	chainparamsbase.cpp	/^const std::string CBaseChainParams::MAIN = "main";$/;"	m	class:CBaseChainParams	file:
MAIN	chainparamsbase.h	/^    static const std::string MAIN;$/;"	m	class:CBaseChainParams
MAINT	Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/missing makeinfo$/;"	m
MAKENSIS	Makefile	/^MAKENSIS = $/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MAPASKFOR_MAX_SZ	net.h	/^static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;$/;"	v
MAX_ADDNODE_CONNECTIONS	net.h	/^static const int MAX_ADDNODE_CONNECTIONS = 8;$/;"	v
MAX_ADDR_TO_SEND	net.h	/^static const unsigned int MAX_ADDR_TO_SEND = 1000;$/;"	v
MAX_BASE58_TYPES	chainparams.h	/^        MAX_BASE58_TYPES$/;"	e	enum:CChainParams::Base58Type
MAX_BLOCKFILE_SIZE	validation.h	/^static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; \/\/ 128 MiB$/;"	v
MAX_BLOCKS_IN_TRANSIT_PER_PEER	validation.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCKS_TO_ANNOUNCE	validation.h	/^static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;$/;"	v
MAX_BLOCKTXN_DEPTH	validation.h	/^static const int MAX_BLOCKTXN_DEPTH = 10;$/;"	v
MAX_BLOCK_COINSDB_USAGE	txdb.h	/^static constexpr int MAX_BLOCK_COINSDB_USAGE = 200 * DB_PEAK_USAGE_FACTOR;$/;"	v
MAX_BLOOM_FILTER_SIZE	bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_CMPCTBLOCK_DEPTH	validation.h	/^static const int MAX_CMPCTBLOCK_DEPTH = 5;$/;"	v
MAX_FEEFILTER_CHANGE_DELAY	validation.h	/^static const unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;$/;"	v
MAX_FEE_ESTIMATION_TIP_AGE	validation.h	/^static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;$/;"	v
MAX_GETUTXOS_OUTPOINTS	rest.cpp	/^static const size_t MAX_GETUTXOS_OUTPOINTS = 15; \/\/allow a max of 15 outpoints to be queried at once$/;"	v	file:
MAX_HASH_FUNCS	bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HEADERS_RESULTS	validation.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_HEADERS_SIZE	httpserver.cpp	/^static const size_t MAX_HEADERS_SIZE = 8192;$/;"	v	file:
MAX_INV_SZ	net.h	/^static const unsigned int MAX_INV_SZ = 50000;$/;"	v
MAX_LINE_LENGTH	torcontrol.cpp	/^static const int MAX_LINE_LENGTH = 100000;$/;"	v	file:
MAX_MONEY	amount.h	/^static const CAmount MAX_MONEY = 21000000 * COIN;$/;"	v
MAX_OUTBOUND_CONNECTIONS	net.h	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v
MAX_PATH	compat.h	74;"	d
MAX_PROTOCOL_MESSAGE_LENGTH	net.h	/^static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;$/;"	v
MAX_REJECT_MESSAGE_LENGTH	validation.h	/^static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;$/;"	v
MAX_SCRIPTCHECK_THREADS	validation.h	/^static const int MAX_SCRIPTCHECK_THREADS = 16;$/;"	v
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_SUBVERSION_LENGTH	net.h	/^static const unsigned int MAX_SUBVERSION_LENGTH = 256;$/;"	v
MAX_UNCONNECTING_HEADERS	validation.h	/^static const int MAX_UNCONNECTING_HEADERS = 10;$/;"	v
MAX_UPLOAD_TIMEFRAME	net.h	/^static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;$/;"	v
MEMPOOL	protocol.cpp	/^const char *MEMPOOL="mempool";$/;"	m	namespace:NetMsgType	file:
MEMPOOL_DUMP_VERSION	validation.cpp	/^static const uint64_t MEMPOOL_DUMP_VERSION = 1;$/;"	v	file:
MEMPOOL_GD_VERSION	version.h	/^static const int MEMPOOL_GD_VERSION = 60002;$/;"	v
MEMPOOL_HEIGHT	txmempool.h	/^static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;$/;"	v
MERKLEBLOCK	protocol.cpp	/^const char *MERKLEBLOCK="merkleblock";$/;"	m	namespace:NetMsgType	file:
MESSAGE_SIZE_OFFSET	protocol.h	/^        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon10
MESSAGE_SIZE_SIZE	protocol.h	/^        MESSAGE_SIZE_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon10
MESSAGE_START_SIZE	protocol.h	/^        MESSAGE_START_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon10
MINIUPNPC_CPPFLAGS	Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_LIBS	Makefile	/^MINIUPNPC_LIBS = $/;"	m
MIN_BLOCKS_TO_KEEP	validation.h	/^static const unsigned int MIN_BLOCKS_TO_KEEP = 288;$/;"	v
MIN_BLOCK_COINSDB_USAGE	txdb.h	/^static constexpr int MIN_BLOCK_COINSDB_USAGE = 50 * DB_PEAK_USAGE_FACTOR;$/;"	v
MIN_CORE_FILEDESCRIPTORS	init.cpp	85;"	d	file:
MIN_CORE_FILEDESCRIPTORS	init.cpp	87;"	d	file:
MIN_DISK_SPACE_FOR_BLOCK_FILES	validation.h	/^static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;$/;"	v
MIN_PEER_PROTO_VERSION	version.h	/^static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;$/;"	v
MIN_TRANSACTION_BASE_SIZE	blockencodings.cpp	18;"	d	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MOC	Makefile	/^MOC = \/usr\/lib\/x86_64-linux-gnu\/qt5\/bin\/moc$/;"	m
MOC_DEFS	Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MODAL	ui_interface.h	/^        MODAL               = 0x10000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_BLOCK	protocol.h	/^    MSG_BLOCK = 2,$/;"	e	enum:GetDataMsg
MSG_CMPCT_BLOCK	protocol.h	/^    MSG_CMPCT_BLOCK = 4,     \/\/!< Defined in BIP152$/;"	e	enum:GetDataMsg
MSG_DONTWAIT	compat.h	51;"	d
MSG_ERROR	ui_interface.h	/^        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_FILTERED_BLOCK	protocol.h	/^    MSG_FILTERED_BLOCK = 3,  \/\/!< Defined in BIP37$/;"	e	enum:GetDataMsg
MSG_FILTERED_WITNESS_BLOCK	protocol.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:GetDataMsg
MSG_INFORMATION	ui_interface.h	/^        MSG_INFORMATION = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_NOSIGNAL	compat.h	79;"	d
MSG_NOSIGNAL	net.cpp	50;"	d	file:
MSG_NOSIGNAL	netbase.cpp	29;"	d	file:
MSG_TX	protocol.h	/^    MSG_TX = 1,$/;"	e	enum:GetDataMsg
MSG_TYPE_MASK	protocol.h	/^const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;$/;"	v
MSG_WARNING	ui_interface.h	/^        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_WITNESS_BLOCK	protocol.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSG_WITNESS_FLAG	protocol.h	/^const uint32_t MSG_WITNESS_FLAG = 1 << 30;$/;"	v
MSG_WITNESS_TX	protocol.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
Make	netmessagemaker.h	/^    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
Make	netmessagemaker.h	/^    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
MakeNewKey	key.cpp	/^void CKey::MakeNewKey(bool fCompressedIn) {$/;"	f	class:CKey
MakeTried	addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId)$/;"	f	class:CAddrMan
MallocUsage	memusage.h	/^static inline size_t MallocUsage(size_t alloc)$/;"	f	namespace:memusage
MapCheckpoints	chainparams.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapPort	net.cpp	/^void MapPort(bool fUseUPnP)$/;"	f
MapPort	net.cpp	/^void MapPort(bool)$/;"	f
MapRelay	net_processing.cpp	/^    typedef std::map<uint256, CTransactionRef> MapRelay;$/;"	t	namespace:__anon7	file:
MarkAddressGood	net.cpp	/^void CConnman::MarkAddressGood(const CAddress& addr)$/;"	f	class:CConnman
MarkBlockAsInFlight	net_processing.cpp	/^bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex* pindex = NULL, std::list<QueuedBlock>::iterator** pit = NULL) {$/;"	f	namespace:__anon8
MarkBlockAsReceived	net_processing.cpp	/^bool MarkBlockAsReceived(const uint256& hash) {$/;"	f	namespace:__anon8
Mask	versionbits.cpp	/^    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }$/;"	f	class:__anon19::VersionBitsConditionChecker
Match	netaddress.cpp	/^bool CSubNet::Match(const CNetAddr &addr) const$/;"	f	class:CSubNet
MaybeSetAddrName	net.cpp	/^void CNode::MaybeSetAddrName(const std::string& addrNameIn) {$/;"	f	class:CNode
MaybeSetPeerAsAnnouncingHeaderAndIDs	net_processing.cpp	/^void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {$/;"	f	namespace:__anon8
MemPoolConflictRemovalTracker	validation.cpp	/^    MemPoolConflictRemovalTracker(CTxMemPool &_pool) : pool(_pool) {$/;"	f	class:MemPoolConflictRemovalTracker
MemPoolConflictRemovalTracker	validation.cpp	/^class MemPoolConflictRemovalTracker$/;"	c	file:
MemPoolRemovalReason	txmempool.h	/^enum class MemPoolRemovalReason {$/;"	c
MessageBoxFlags	ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
MessageStart	chainparams.h	/^    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }$/;"	f	class:CChainParams
MessageStartChars	protocol.h	/^    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];$/;"	t	class:CMessageHeader
MilliSleep	utiltime.cpp	/^void MilliSleep(int64_t n)$/;"	f
MillisToTimeval	netbase.cpp	/^struct timeval MillisToTimeval(int64_t nTimeout)$/;"	f
MineBlocksOnDemand	chainparams.h	/^    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }$/;"	f	class:CChainParams
MiningRequiresPeers	chainparams.h	/^    bool MiningRequiresPeers() const { return fMiningRequiresPeers; }$/;"	f	class:CChainParams
Misbehaving	net_processing.cpp	/^void Misbehaving(NodeId pnode, int howmuch)$/;"	f
ModifyCoins	coins.cpp	/^CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {$/;"	f	class:CCoinsViewCache
ModifyNewCoins	coins.cpp	/^CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {$/;"	f	class:CCoinsViewCache
MoneyRange	amount.h	/^inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	sync.h	/^    void MoveTo(CSemaphoreGrant& grant)$/;"	f	class:CSemaphoreGrant
MurmurHash3	hash.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
MutateTx	bitcoin-tx.cpp	/^static void MutateTx(CMutableTransaction& tx, const std::string& command,$/;"	f	file:
MutateTxAddInput	bitcoin-tx.cpp	/^static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutAddr	bitcoin-tx.cpp	/^static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutData	bitcoin-tx.cpp	/^static void MutateTxAddOutData(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutMultiSig	bitcoin-tx.cpp	/^static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutPubKey	bitcoin-tx.cpp	/^static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutScript	bitcoin-tx.cpp	/^static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxDelInput	bitcoin-tx.cpp	/^static void MutateTxDelInput(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxDelOutput	bitcoin-tx.cpp	/^static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOutIdx)$/;"	f	file:
MutateTxLocktime	bitcoin-tx.cpp	/^static void MutateTxLocktime(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
MutateTxSign	bitcoin-tx.cpp	/^static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)$/;"	f	file:
MutateTxVersion	bitcoin-tx.cpp	/^static void MutateTxVersion(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
MutexName	sync.cpp	/^    std::string MutexName() const { return mutexName; }$/;"	f	struct:CLockLocation
NCONST_PTR	serialize.h	/^inline T* NCONST_PTR(const T* val)$/;"	f
NET_IPV4	netaddress.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	netaddress.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	netaddress.h	/^    NET_MAX,$/;"	e	enum:Network
NET_MESSAGE_COMMAND_OTHER	net.cpp	/^const static std::string NET_MESSAGE_COMMAND_OTHER = "*other*";$/;"	v	file:
NET_TEREDO	netaddress.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	netaddress.h	/^    NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	netaddress.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	netaddress.h	/^    NET_UNROUTABLE = 0,$/;"	e	enum:Network
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NODE_BLOOM	protocol.h	/^    NODE_BLOOM = (1 << 2),$/;"	e	enum:uint64_t
NODE_GETUTXO	protocol.h	/^    NODE_GETUTXO = (1 << 1),$/;"	e	enum:uint64_t
NODE_NETWORK	protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:uint64_t
NODE_NONE	protocol.h	/^    NODE_NONE = 0,$/;"	e	enum:uint64_t
NODE_WITNESS	protocol.h	/^    NODE_WITNESS = (1 << 3),$/;"	e	enum:uint64_t
NODE_XTHIN	protocol.h	/^    NODE_XTHIN = (1 << 4),$/;"	e	enum:uint64_t
NOMINMAX	compat.h	22;"	d
NOMINMAX	util.cpp	64;"	d	file:
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTFOUND	protocol.cpp	/^const char *NOTFOUND="notfound";$/;"	m	namespace:NetMsgType	file:
NO_BLOOM_VERSION	version.h	/^static const int NO_BLOOM_VERSION = 70011;$/;"	v
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	33;"	d
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	52;"	d
NTU_SHARDING_VERSION	version.h	/^static const int NTU_SHARDING_VERSION = 0x40000000;$/;"	v
N_SIGHASH_OPTS	bitcoin-tx.cpp	/^static const unsigned int N_SIGHASH_OPTS = 6;$/;"	v	file:
Name	httprpc.cpp	/^    const char* Name()$/;"	f	class:HTTPRPCTimerInterface
NetMsgType	protocol.cpp	/^namespace NetMsgType {$/;"	n	file:
NetMsgType	protocol.h	/^namespace NetMsgType {$/;"	n
NetmaskBits	netaddress.cpp	/^static inline int NetmaskBits(uint8_t x)$/;"	f	file:
Network	netaddress.h	/^enum Network$/;"	g
NetworkErrorString	netbase.cpp	/^std::string NetworkErrorString(int err)$/;"	f
NetworkIDString	chainparams.h	/^    std::string NetworkIDString() const { return strNetworkID; }$/;"	f	class:CChainParams
Neuter	key.cpp	/^CExtPubKey CExtKey::Neuter() const {$/;"	f	class:CExtKey
NewIterator	dbwrapper.h	/^    CDBIterator *NewIterator()$/;"	f	class:CDBWrapper
NewPoWValidBlock	net_processing.cpp	/^void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {$/;"	f	class:PeerLogicValidation
NewPoWValidBlock	validationinterface.h	/^    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;$/;"	m	struct:CMainSignals
NewPoWValidBlock	validationinterface.h	/^    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};$/;"	f	class:CValidationInterface
NewTimer	httprpc.cpp	/^    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)$/;"	f	class:HTTPRPCTimerInterface
Next	chain.h	/^    CBlockIndex *Next(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Next	dbwrapper.cpp	/^void CDBIterator::Next() { piter->Next(); }$/;"	f	class:CDBIterator
Next	txdb.cpp	/^void CCoinsViewDBCursor::Next()$/;"	f	class:CCoinsViewDBCursor
NodeEvictionCandidate	net.cpp	/^struct NodeEvictionCandidate$/;"	s	file:
NodeFullyConnected	net.cpp	/^bool CConnman::NodeFullyConnected(const CNode* pnode)$/;"	f	class:CConnman
NodeId	net.h	/^typedef int64_t NodeId;$/;"	t
NotifyAlertChanged	ui_interface.h	/^    boost::signals2::signal<void ()> NotifyAlertChanged;$/;"	m	class:CClientUIInterface
NotifyBlockTip	ui_interface.h	/^    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;$/;"	m	class:CClientUIInterface
NotifyEntryAdded	txmempool.h	/^    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	txmempool.h	/^    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	validation.cpp	/^    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {$/;"	f	class:MemPoolConflictRemovalTracker
NotifyHeaderTip	ui_interface.h	/^    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyHeaderTip;$/;"	m	class:CClientUIInterface
NotifyHeaderTip	validation.cpp	/^static void NotifyHeaderTip() {$/;"	f	file:
NotifyNetworkActiveChanged	ui_interface.h	/^    boost::signals2::signal<void (bool networkActive)> NotifyNetworkActiveChanged;$/;"	m	class:CClientUIInterface
NotifyNumConnectionsChanged	ui_interface.h	/^    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;$/;"	m	class:CClientUIInterface
NumConnections	net.h	/^    enum NumConnections {$/;"	g	class:CConnman
OBFUSCATE_KEY_KEY	dbwrapper.h	/^    static const std::string OBFUSCATE_KEY_KEY;$/;"	m	class:CDBWrapper
OBFUSCATE_KEY_NUM_BYTES	dbwrapper.cpp	/^const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;$/;"	m	class:CDBWrapper	file:
OBFUSCATE_KEY_NUM_BYTES	dbwrapper.h	/^    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;$/;"	m	class:CDBWrapper
OBJCOPY	Makefile	/^OBJCOPY = \/usr\/bin\/objcopy$/;"	m
OBJCXX	Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXXCOMPILE	Makefile	/^OBJCXXCOMPILE = $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
OBJCXXDEPMODE	Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXFLAGS	Makefile	/^OBJCXXFLAGS = $/;"	m
OBJCXXLD	Makefile	/^OBJCXXLD = $(OBJCXX)$/;"	m
OBJCXXLINK	Makefile	/^OBJCXXLINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
ORPHAN_TX_EXPIRE_INTERVAL	net_processing.h	/^static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;$/;"	v
ORPHAN_TX_EXPIRE_TIME	net_processing.h	/^static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;$/;"	v
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;$/;"	m	class:CHash160
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;$/;"	m	class:CHash256
OnRPCPreCommand	init.cpp	/^void OnRPCPreCommand(const CRPCCommand& cmd)$/;"	f
OnRPCStarted	init.cpp	/^void OnRPCStarted()$/;"	f
OnRPCStopped	init.cpp	/^void OnRPCStopped()$/;"	f
OpenBlockFile	validation.cpp	/^FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {$/;"	f
OpenDebugLog	util.cpp	/^void OpenDebugLog()$/;"	f
OpenDiskFile	validation.cpp	/^FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)$/;"	f
OpenNetworkConnection	net.cpp	/^bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)$/;"	f	class:CConnman
OpenUndoFile	validation.cpp	/^FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {$/;"	f
Options	net.h	/^    struct Options$/;"	s	class:CConnman
OutboundTargetReached	net.cpp	/^bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)$/;"	f	class:CConnman
OutputTx	bitcoin-tx.cpp	/^static void OutputTx(const CTransaction& tx)$/;"	f	file:
OutputTxHash	bitcoin-tx.cpp	/^static void OutputTxHash(const CTransaction& tx)$/;"	f	file:
OutputTxHex	bitcoin-tx.cpp	/^static void OutputTxHex(const CTransaction& tx)$/;"	f	file:
OutputTxJSON	bitcoin-tx.cpp	/^static void OutputTxJSON(const CTransaction& tx)$/;"	f	file:
OverrideStream	streams.h	/^    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}$/;"	f	class:OverrideStream
OverrideStream	streams.h	/^class OverrideStream$/;"	c
PACKAGE	Makefile	/^PACKAGE = bitcoin$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/bitcoin\/bitcoin\/issues$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = Bitcoin Core$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = Bitcoin Core 0.14.1$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = bitcoin$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = https:\/\/bitcoincore.org\/$/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.14.1$/;"	m
PAIRTYPE	utilstrencodings.h	23;"	d
PASTE	sync.h	183;"	d
PASTE2	sync.h	184;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PIC_FLAGS	Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIE_FLAGS	Makefile	/^PIE_FLAGS = -fPIE$/;"	m
PING	protocol.cpp	/^const char *PING="ping";$/;"	m	namespace:NetMsgType	file:
PING_INTERVAL	net.h	/^static const int PING_INTERVAL = 2 * 60;$/;"	v
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PONG	protocol.cpp	/^const char *PONG="pong";$/;"	m	namespace:NetMsgType	file:
PORT	Makefile	/^PORT = $/;"	m
POST	httpserver.h	/^        POST,$/;"	e	enum:HTTPRequest::RequestMethod
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROCESS_DEP_ENABLE	init.cpp	836;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROTECTION_LEVEL_UNRESTRICTED	net.cpp	57;"	d	file:
PROTOBUF_CC	Makefile	/^PROTOBUF_CC = qt\/paymentrequest.pb.cc$/;"	m
PROTOBUF_CFLAGS	Makefile	/^PROTOBUF_CFLAGS = -pthread$/;"	m
PROTOBUF_H	Makefile	/^PROTOBUF_H = qt\/paymentrequest.pb.h$/;"	m
PROTOBUF_LIBS	Makefile	/^PROTOBUF_LIBS = -lprotobuf -pthread -lpthread$/;"	m
PROTOBUF_PROTO	Makefile	/^PROTOBUF_PROTO = qt\/paymentrequest.proto$/;"	m
PROTOC	Makefile	/^PROTOC = \/usr\/bin\/protoc$/;"	m
PROTOCOL_VERSION	version.h	/^static const int PROTOCOL_VERSION = 70015;$/;"	v
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = $/;"	m
PT_GUARDED_BY	threadsafety.h	20;"	d
PT_GUARDED_BY	threadsafety.h	39;"	d
PT_GUARDED_VAR	threadsafety.h	21;"	d
PT_GUARDED_VAR	threadsafety.h	40;"	d
PUBKEY_ADDRESS	chainparams.h	/^        PUBKEY_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
PUT	httpserver.h	/^        PUT$/;"	e	enum:HTTPRequest::RequestMethod
PYTHON	Makefile	/^PYTHON = \/usr\/bin\/python3.5$/;"	m
PYTHONPATH	Makefile	/^PYTHONPATH = $/;"	m
Params	chainparams.cpp	/^CChainParams& Params(const std::string& chain)$/;"	f
Params	chainparams.cpp	/^const CChainParams &Params() {$/;"	f
ParseDataFormat	rest.cpp	/^static enum RetFormat ParseDataFormat(std::string& param, const std::string& strReq)$/;"	f	file:
ParseDouble	utilstrencodings.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f
ParseFixedPoint	utilstrencodings.cpp	/^bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)$/;"	f
ParseHashStr	core_read.cpp	/^uint256 ParseHashStr(const std::string& strHex, const std::string& strName)$/;"	f
ParseHashStr	rest.cpp	/^static bool ParseHashStr(const std::string& strReq, uint256& v)$/;"	f	file:
ParseHashUO	bitcoin-tx.cpp	/^uint256 ParseHashUO(std::map<std::string,UniValue>& o, std::string strKey)$/;"	f
ParseHashUV	core_read.cpp	/^uint256 ParseHashUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHex	utilstrencodings.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	utilstrencodings.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseHexUO	bitcoin-tx.cpp	/^std::vector<unsigned char> ParseHexUO(std::map<std::string,UniValue>& o, std::string strKey)$/;"	f
ParseHexUV	core_read.cpp	/^std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)$/;"	f
ParseInt32	utilstrencodings.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f
ParseInt64	utilstrencodings.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const string& str, CAmount& nRet)$/;"	f
ParseNetwork	netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseParameters	util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParsePrechecks	utilstrencodings.cpp	/^static bool ParsePrechecks(const std::string& str)$/;"	f	file:
ParseScript	core_read.cpp	/^CScript ParseScript(const std::string& s)$/;"	f
ParseTorReplyMapping	torcontrol.cpp	/^static std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)$/;"	f	file:
ParseUInt32	utilstrencodings.cpp	/^bool ParseUInt32(const std::string& str, uint32_t *out)$/;"	f
ParseUInt64	utilstrencodings.cpp	/^bool ParseUInt64(const std::string& str, uint64_t *out)$/;"	f
PartiallyDownloadedBlock	blockencodings.h	/^    PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	blockencodings.h	/^class PartiallyDownloadedBlock {$/;"	c
PeerHasHeader	net_processing.cpp	/^bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)$/;"	f	namespace:__anon8
PeerLogicValidation	net_processing.cpp	/^PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {$/;"	f	class:PeerLogicValidation
PeerLogicValidation	net_processing.h	/^class PeerLogicValidation : public CValidationInterface {$/;"	c
Period	validation.cpp	/^    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }$/;"	f	class:WarningBitsConditionChecker
Period	versionbits.cpp	/^    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }$/;"	f	class:__anon19::VersionBitsConditionChecker
PoissonNextSend	net.cpp	/^int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {$/;"	f
PreciousBlock	validation.cpp	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)$/;"	f
PrefilledTransaction	blockencodings.h	/^struct PrefilledTransaction {$/;"	s
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(const std::exception* pex, const char* pszThread)$/;"	f
PrintLockContention	sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrioritiseTransaction	txmempool.cpp	/^void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)$/;"	f	class:CTxMemPool
ProcessBlockAvailability	net_processing.cpp	/^void ProcessBlockAvailability(NodeId nodeid) {$/;"	f	namespace:__anon8
ProcessGetData	net_processing.cpp	/^void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)$/;"	f	file:
ProcessMantissaDigit	utilstrencodings.cpp	/^static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)$/;"	f	file:
ProcessMessage	net_processing.cpp	/^bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)$/;"	f	file:
ProcessMessages	net.h	/^    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> ProcessMessages;$/;"	m	struct:CNodeSignals
ProcessMessages	net_processing.cpp	/^bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)$/;"	f
ProcessNewBlock	validation.cpp	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)$/;"	f
ProcessNewBlockHeaders	validation.cpp	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)$/;"	f
ProcessOneShot	net.cpp	/^void CConnman::ProcessOneShot()$/;"	f	class:CConnman
ProxyCredentials	netbase.cpp	/^struct ProxyCredentials$/;"	s	file:
PruneAfterHeight	chainparams.h	/^    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }$/;"	f	class:CChainParams
PruneAndFlush	validation.cpp	/^void PruneAndFlush() {$/;"	f
PruneBlockFilesManual	validation.cpp	/^void PruneBlockFilesManual(int nManualPruneHeight)$/;"	f
PruneBlockIndexCandidates	validation.cpp	/^static void PruneBlockIndexCandidates() {$/;"	f	file:
PruneOneBlockFile	validation.cpp	/^void PruneOneBlockFile(const int fileNumber)$/;"	f
PushAddress	net.h	/^    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)$/;"	f	class:CNode
PushBlockHash	net.h	/^    void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.cpp	/^void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)$/;"	f	class:CConnman
PushNodeVersion	net_processing.cpp	/^void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)$/;"	f	namespace:__anon8
QR_CFLAGS	Makefile	/^QR_CFLAGS = $/;"	m
QR_LIBS	Makefile	/^QR_LIBS = $/;"	m
QTPLATFORM_CFLAGS	Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_LIBS	Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTPRINT_CFLAGS	Makefile	/^QTPRINT_CFLAGS = $/;"	m
QTPRINT_LIBS	Makefile	/^QTPRINT_LIBS = $/;"	m
QTXCBQPA_CFLAGS	Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_LIBS	Makefile	/^QTXCBQPA_LIBS = $/;"	m
QT_CFLAGS	Makefile	/^QT_CFLAGS = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtNetwork -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtWidgets -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtGui -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_DBUS_CFLAGS	Makefile	/^QT_DBUS_CFLAGS = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtDBus -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_DBUS_INCLUDES	Makefile	/^QT_DBUS_INCLUDES = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtDBus -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_DBUS_LIBS	Makefile	/^QT_DBUS_LIBS = -lQt5DBus -lQt5Core$/;"	m
QT_FORMS_H	Makefile	/^QT_FORMS_H = $(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:.ui=.h))))$/;"	m
QT_FORMS_UI	Makefile	/^QT_FORMS_UI = \\$/;"	m
QT_INCLUDES	Makefile	/^QT_INCLUDES = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtNetwork -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtWidgets -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtGui -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_LDFLAGS	Makefile	/^QT_LDFLAGS = $/;"	m
QT_LIBS	Makefile	/^QT_LIBS = -lQt5Network -lQt5Widgets -lQt5Gui -lQt5Core$/;"	m
QT_MOC	Makefile	/^QT_MOC = \\$/;"	m
QT_MOC_CPP	Makefile	/^QT_MOC_CPP = \\$/;"	m
QT_PIE_FLAGS	Makefile	/^QT_PIE_FLAGS = -fPIC$/;"	m
QT_QM	Makefile	/^QT_QM = $(QT_TS:.ts=.qm)$/;"	m
QT_QRC	Makefile	/^QT_QRC = qt\/bitcoin.qrc$/;"	m
QT_QRC_CPP	Makefile	/^QT_QRC_CPP = qt\/qrc_bitcoin.cpp$/;"	m
QT_QRC_LOCALE	Makefile	/^QT_QRC_LOCALE = qt\/bitcoin_locale.qrc$/;"	m
QT_QRC_LOCALE_CPP	Makefile	/^QT_QRC_LOCALE_CPP = qt\/qrc_bitcoin_locale.cpp$/;"	m
QT_SELECT	Makefile	/^QT_SELECT = qt5$/;"	m
QT_TEST_CFLAGS	Makefile	/^QT_TEST_CFLAGS = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtTest -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_TEST_INCLUDES	Makefile	/^QT_TEST_INCLUDES = -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtTest -I\/usr\/include\/x86_64-linux-gnu\/qt5 -I\/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I\/usr\/include\/x86_64-linux-gnu\/qt5$/;"	m
QT_TEST_LIBS	Makefile	/^QT_TEST_LIBS = -lQt5Test -lQt5Core$/;"	m
QT_TRANSLATION_DIR	Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QT_TS	Makefile	/^QT_TS = \\$/;"	m
QueuedBlock	net_processing.cpp	/^    struct QueuedBlock {$/;"	s	namespace:__anon7	file:
RANDOMIZER_ID_ADDRESS_RELAY	net_processing.cpp	/^static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; \/\/ SHA256("main address relay")[0:8]$/;"	v	file:
RANDOMIZER_ID_LOCALHOSTNONCE	net.cpp	/^static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; \/\/ SHA256("localhostnonce")[0:8]$/;"	v	file:
RANDOMIZER_ID_NETGROUP	net.cpp	/^static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; \/\/ SHA256("netgroup")[0:8]$/;"	v	file:
RANLIB	Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RAW_TEST_FILES	Makefile	/^RAW_TEST_FILES = $/;"	m
RAW_TEST_FILES	Makefile	/^RAW_TEST_FILES = \\$/;"	m
RCC	Makefile	/^RCC = \/usr\/lib\/x86_64-linux-gnu\/qt5\/bin\/rcc$/;"	m
READELF	Makefile	/^READELF = \/usr\/bin\/readelf$/;"	m
READWRITE	serialize.h	151;"	d
READWRITEMANY	serialize.h	152;"	d
READ_STATUS_CHECKBLOCK_FAILED	blockencodings.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	blockencodings.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	blockencodings.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus crap$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	blockencodings.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
RECHECK_LOGS	Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECONNECT_TIMEOUT_EXP	torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_EXP = 1.5;$/;"	v	file:
RECONNECT_TIMEOUT_START	torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_START = 1.0;$/;"	v	file:
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
REGTEST	chainparamsbase.cpp	/^const std::string CBaseChainParams::REGTEST = "regtest";$/;"	m	class:CBaseChainParams	file:
REGTEST	chainparamsbase.h	/^    static const std::string REGTEST;$/;"	m	class:CBaseChainParams
REJECT	protocol.cpp	/^const char *REJECT="reject";$/;"	m	namespace:NetMsgType	file:
REJECT_ALREADY_KNOWN	validation.h	/^static const unsigned int REJECT_ALREADY_KNOWN = 0x101;$/;"	v
REJECT_CONFLICT	validation.h	/^static const unsigned int REJECT_CONFLICT = 0x102;$/;"	v
REJECT_HIGHFEE	validation.h	/^static const unsigned int REJECT_HIGHFEE = 0x100;$/;"	v
REJECT_INTERNAL	validation.h	/^static const unsigned int REJECT_INTERNAL = 0x100;$/;"	v
RELDFLAGS	Makefile	/^RELDFLAGS = $/;"	m
REORG	txmempool.h	/^    REORG,       \/\/! Removed for reorganization$/;"	m	class:MemPoolRemovalReason
REQUIRED_SERVICES	net.h	/^static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;$/;"	v
RESTERR	rest.cpp	/^static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)$/;"	f	file:
RES_ICONS	Makefile	/^RES_ICONS = \\$/;"	m
RES_IMAGES	Makefile	/^RES_IMAGES = $/;"	m
RES_MOVIES	Makefile	/^RES_MOVIES = $(wildcard $(srcdir)\/qt\/res\/movies\/spinner-*.png)$/;"	m
RF_BINARY	rest.cpp	/^    RF_BINARY,$/;"	e	enum:RetFormat	file:
RF_HEX	rest.cpp	/^    RF_HEX,$/;"	e	enum:RetFormat	file:
RF_JSON	rest.cpp	/^    RF_JSON,$/;"	e	enum:RetFormat	file:
RF_UNDEF	rest.cpp	/^    RF_UNDEF,$/;"	e	enum:RetFormat	file:
ROLLING_FEE_HALFLIFE	txmempool.h	/^    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; \/\/ public only for testing$/;"	m	class:CTxMemPool
ROTL	hash.cpp	85;"	d	file:
ROTL32	hash.cpp	/^inline uint32_t ROTL32(uint32_t x, int8_t r)$/;"	f
RPCAuthorized	httprpc.cpp	/^static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)$/;"	f	file:
RPCPort	chainparamsbase.h	/^    int RPCPort() const { return nRPCPort; }$/;"	f	class:CBaseChainParams
RSVG_CONVERT	Makefile	/^RSVG_CONVERT = $/;"	m
RaiseFileDescriptorLimit	util.cpp	/^int RaiseFileDescriptorLimit(int nMinFD) {$/;"	f
RaiseValidity	chain.h	/^    bool RaiseValidity(enum BlockStatus nUpTo)$/;"	f	class:CBlockIndex
RandAddSeed	random.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	random.cpp	/^static void RandAddSeedPerfmon()$/;"	f	file:
RandFailure	random.cpp	/^static void RandFailure()$/;"	f	file:
RandomInt	addrman.cpp	/^int CAddrMan::RandomInt(int nMax){$/;"	f	class:CAddrMan
Read	addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)$/;"	f	class:CAddrDB
Read	addrdb.cpp	/^bool CBanDB::Read(banmap_t& banSet)$/;"	f	class:CBanDB
Read	dbwrapper.h	/^    bool Read(const K& key, V& value) const$/;"	f	class:CDBWrapper
ReadBinaryFile	torcontrol.cpp	/^static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, size_t maxsize=std::numeric_limits<size_t>::max())$/;"	f	file:
ReadBlockFileInfo	txdb.cpp	/^bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {$/;"	f	class:CBlockTreeDB
ReadBlockFromDisk	validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f
ReadBlockFromDisk	validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)$/;"	f
ReadBody	httpserver.cpp	/^std::string HTTPRequest::ReadBody()$/;"	f	class:HTTPRequest
ReadCompactSize	serialize.h	/^uint64_t ReadCompactSize(Stream& is)$/;"	f
ReadConfigFile	util.cpp	/^void ReadConfigFile(const std::string& confPath)$/;"	f
ReadFeeEstimates	txmempool.cpp	/^CTxMemPool::ReadFeeEstimates(CAutoFile& filein)$/;"	f	class:CTxMemPool
ReadFlag	txdb.cpp	/^bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {$/;"	f	class:CBlockTreeDB
ReadLastBlockFile	txdb.cpp	/^bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {$/;"	f	class:CBlockTreeDB
ReadReindexing	txdb.cpp	/^bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {$/;"	f	class:CBlockTreeDB
ReadStatus	blockencodings.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	blockencodings.h	/^typedef enum ReadStatus_t$/;"	g
ReadTxIndex	txdb.cpp	/^bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {$/;"	f	class:CBlockTreeDB
ReadVarInt	serialize.h	/^I ReadVarInt(Stream& is)$/;"	f
ReceiveMsgBytes	net.cpp	/^bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)$/;"	f	class:CNode
ReceivedBlockTransactions	validation.cpp	/^bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)$/;"	f
Reconnect	torcontrol.cpp	/^void TorController::Reconnect()$/;"	f	class:TorController
RecordBytesRecv	net.cpp	/^void CConnman::RecordBytesRecv(uint64_t bytes)$/;"	f	class:CConnman
RecordBytesSent	net.cpp	/^void CConnman::RecordBytesSent(uint64_t bytes)$/;"	f	class:CConnman
RecoverCompact	pubkey.cpp	/^bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlock& block) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const COutPoint& out) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CScript& script) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxIn& in) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxOut& out) {$/;"	f
RegisterHTTPHandler	httpserver.cpp	/^void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)$/;"	f
RegisterLoad	bitcoin-tx.cpp	/^static void RegisterLoad(const std::string& strInput)$/;"	f	file:
RegisterNodeSignals	net_processing.cpp	/^void RegisterNodeSignals(CNodeSignals& nodeSignals)$/;"	f
RegisterSet	bitcoin-tx.cpp	/^static void RegisterSet(const std::string& strInput)$/;"	f	file:
RegisterSetJson	bitcoin-tx.cpp	/^static void RegisterSetJson(const std::string& key, const std::string& rawJson)$/;"	f	file:
RegisterValidationInterface	validationinterface.cpp	/^void RegisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
RelayAddress	net_processing.cpp	/^static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connman)$/;"	f	file:
RelayTransaction	net_processing.cpp	/^static void RelayTransaction(const CTransaction& tx, CConnman& connman)$/;"	f	file:
Release	net.h	/^    void Release()$/;"	f	class:CNode
Release	sync.h	/^    void Release()$/;"	f	class:CSemaphoreGrant
RemoveAddedNode	net.cpp	/^bool CConnman::RemoveAddedNode(const std::string& strNode)$/;"	f	class:CConnman
RemoveLocal	net.cpp	/^bool RemoveLocal(const CService& addr)$/;"	f
RemoveStaged	txmempool.cpp	/^void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {$/;"	f	class:CTxMemPool
RemoveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
RenameOver	util.cpp	/^bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)$/;"	f
RenameThread	util.cpp	/^void RenameThread(const char* name)$/;"	f
Repeat	scheduler.cpp	/^static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaSeconds)$/;"	f	file:
ReplyHandlerCB	torcontrol.cpp	/^    typedef boost::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;$/;"	t	class:TorControlConnection	file:
RequestMethod	httpserver.h	/^    enum RequestMethod {$/;"	g	class:HTTPRequest
RequestMethodString	httpserver.cpp	/^static std::string RequestMethodString(HTTPRequest::RequestMethod m)$/;"	f	file:
RequireStandard	chainparams.h	/^    bool RequireStandard() const { return fRequireStandard; }$/;"	f	class:CChainParams
ResendWalletTransactions	validationinterface.h	/^    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}$/;"	f	class:CValidationInterface
Reset	hash.h	/^    CHash160& Reset() {$/;"	f	class:CHash160
Reset	hash.h	/^    CHash256& Reset() {$/;"	f	class:CHash256
ResetBlockFailureFlags	validation.cpp	/^bool ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f
ResetRequestCount	validationinterface.h	/^    virtual void ResetRequestCount(const uint256 &hash) {};$/;"	f	class:CValidationInterface
ResolveErrMsg	init.cpp	/^static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)$/;"	f	file:
RetFormat	rest.cpp	/^enum RetFormat {$/;"	g	file:
ReverseCompareNodeMinPingTime	net.cpp	/^static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseCompareNodeTimeConnected	net.cpp	/^static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
Rewind	streams.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
RewindBlockIndex	validation.cpp	/^bool RewindBlockIndex(const CChainParams& params)$/;"	f
RollingBloomHash	bloom.cpp	/^static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {$/;"	f	file:
Run	httpserver.cpp	/^    void Run()$/;"	f	class:WorkQueue
Rw	random.h	/^    uint32_t Rw;$/;"	m	class:FastRandomContext
Rz	random.h	/^    uint32_t Rz;$/;"	m	class:FastRandomContext
SAFE_CHARS	utilstrencodings.cpp	/^static const string SAFE_CHARS[] =$/;"	v	file:
SAFE_CHARS_DEFAULT	utilstrencodings.h	/^    SAFE_CHARS_DEFAULT, \/\/!< The full set of allowed chars$/;"	e	enum:SafeChars
SAFE_CHARS_UA_COMMENT	utilstrencodings.h	/^    SAFE_CHARS_UA_COMMENT \/\/!< BIP-0014 subset$/;"	e	enum:SafeChars
SCOPED_LOCKABLE	threadsafety.h	17;"	d
SCOPED_LOCKABLE	threadsafety.h	36;"	d
SCRIPT_ADDRESS	chainparams.h	/^        SCRIPT_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
SECRET_KEY	chainparams.h	/^        SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
SECURE	ui_interface.h	/^        SECURE              = 0x40000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SENDCMPCT	protocol.cpp	/^const char *SENDCMPCT="sendcmpct";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS	protocol.cpp	/^const char *SENDHEADERS="sendheaders";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS_VERSION	version.h	/^static const int SENDHEADERS_VERSION = 70012;$/;"	v
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon14
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon14
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon14
SETASKFOR_MAX_SZ	net.h	/^static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;$/;"	v
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHARED_LOCKS_REQUIRED	threadsafety.h	32;"	d
SHARED_LOCKS_REQUIRED	threadsafety.h	51;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	25;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	44;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	27;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	46;"	d
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SHORTTXIDS_LENGTH	blockencodings.h	/^    static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHORT_IDS_BLOCKS_VERSION	version.h	/^static const int SHORT_IDS_BLOCKS_VERSION = 70014;$/;"	v
SIPROUND	hash.cpp	87;"	d	file:
SIZELIMIT	txmempool.h	/^    SIZELIMIT,   \/\/! Removed in size limiting$/;"	m	class:MemPoolRemovalReason
SOCKET	compat.h	/^typedef u_int SOCKET;$/;"	t
SOCKET_ERROR	compat.h	65;"	d
SOCKS5_RECV_TIMEOUT	netbase.cpp	/^static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;$/;"	v	file:
SOURCES	Makefile	/^SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \\$/;"	m
SSL_CFLAGS	Makefile	/^SSL_CFLAGS = $/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = -lssl$/;"	m
STRINGIZE	clientversion.h	37;"	d
STRIP	Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
SUBDIRS	Makefile	/^SUBDIRS =$/;"	m
SYNC_TRANSACTION_NOT_IN_BLOCK	validationinterface.h	/^    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;$/;"	m	struct:CMainSignals
S_IRUSR	compat.h	70;"	d
S_IWUSR	compat.h	71;"	d
SafeChars	utilstrencodings.h	/^enum SafeChars$/;"	g
SaltedTxidHasher	coins.cpp	/^SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedTxidHasher
SaltedTxidHasher	coins.h	/^class SaltedTxidHasher$/;"	c
SanitizeString	utilstrencodings.cpp	/^string SanitizeString(const string& str, int rule)$/;"	f
ScoreCompare	miner.cpp	/^    ScoreCompare() {}$/;"	f	class:ScoreCompare
ScoreCompare	miner.cpp	/^class ScoreCompare$/;"	c	file:
ScriptForMining	validationinterface.h	/^    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;$/;"	m	struct:CMainSignals
ScriptMap	keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptPubKeyToUniv	core_write.cpp	/^void ScriptPubKeyToUniv(const CScript& scriptPubKey,$/;"	f
ScriptToAsmStr	core_write.cpp	/^std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)$/;"	f
Secp256k1Init	bitcoin-tx.cpp	/^    Secp256k1Init() {$/;"	f	class:Secp256k1Init
Secp256k1Init	bitcoin-tx.cpp	/^class Secp256k1Init$/;"	c	file:
SeedSpec6	chainparams.h	/^struct SeedSpec6 {$/;"	s
Seek	dbwrapper.h	/^    template<typename K> void Seek(const K& key) {$/;"	f	class:CDBIterator
Seek	streams.h	/^    bool Seek(uint64_t nPos) {$/;"	f	class:CBufferedFile
SeekToFirst	dbwrapper.cpp	/^void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }$/;"	f	class:CDBIterator
SeenLocal	net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
Select	addrman.h	/^    CAddrInfo Select(bool newOnly = false)$/;"	f	class:CAddrMan
SelectBaseParams	chainparamsbase.cpp	/^void SelectBaseParams(const std::string& chain)$/;"	f
SelectParams	chainparams.cpp	/^void SelectParams(const std::string& network)$/;"	f
Select_	addrman.cpp	/^CAddrInfo CAddrMan::Select_(bool newOnly)$/;"	f	class:CAddrMan
SendBlockTransactions	net_processing.cpp	/^inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman& connman) {$/;"	f	file:
SendMessages	net.h	/^    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> SendMessages;$/;"	m	struct:CNodeSignals
SendMessages	net_processing.cpp	/^bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)$/;"	f
SendRejectsAndCheckIfBanned	net_processing.cpp	/^static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)$/;"	f	file:
SequenceLocks	validation.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, const T& obj, CSerActionSerialize ser_action)$/;"	f
SerReadWriteMany	serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, Args&&... args)$/;"	f
SerReadWriteMany	serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&... args)$/;"	f
SerializationOp	addrdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBanEntry
SerializationOp	addrman.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAddrInfo
SerializationOp	amount.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CFeeRate
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	bloom.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBloomFilter
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockFileInfo
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CDiskBlockIndex
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskBlockPos
SerializationOp	compressor.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOutCompressor
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleBlock
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CPartialMerkleTree
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CNetAddr
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CService
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSubNet
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CAddress
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CInv
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CMessageHeader
SerializationOp	rest.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:CCoin
SerializationOp	txdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskTxPos
SerializationOp	undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockUndo
SerializationOp	undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxUndo
Serialize	addrman.h	/^    void Serialize(Stream &s) const$/;"	f	class:CAddrMan
Serialize	coins.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CCoins
Serialize	compressor.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CScriptCompressor
Serialize	key.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtKey
Serialize	pubkey.h	/^    void Serialize(CSizeComputer& s) const$/;"	f	struct:CExtPubKey
Serialize	pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	class:CPubKey
Serialize	pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtPubKey
Serialize	serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CCompactSize
Serialize	serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CVarInt
Serialize	serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:LimitedString
Serialize	serialize.h	/^Serialize(Stream& os, const std::shared_ptr<const T>& p)$/;"	f
Serialize	serialize.h	/^Serialize(Stream& os, const std::unique_ptr<const T>& p)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const prevector<N, T>& v)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } \/\/ TODO Get rid of bare char$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m)$/;"	f
Serialize	streams.h	/^    void Serialize(Stream& s) const$/;"	f	class:CDataStream
Serialize	uint256.h	/^    void Serialize(Stream& s) const$/;"	f	class:base_blob
Serialize	undo.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CTxInUndo
SerializeAddr	ntunodeid.h	/^    void SerializeAddr(Stream& s) const$/;"	f	class:AddrPow
SerializeHash	hash.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
SerializeMany	serialize.h	/^void SerializeMany(Stream& s)$/;"	f
SerializeMany	serialize.h	/^void SerializeMany(Stream& s, Arg&& arg)$/;"	f
SerializeMany	serialize.h	/^void SerializeMany(Stream& s, Arg&& arg, Args&&... args)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)$/;"	f
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CKeyID& id)$/;"	f	class:CBitcoinAddress
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CScriptID& id)$/;"	f	class:CBitcoinAddress
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CTxDestination& dest)$/;"	f	class:CBitcoinAddress
Set	key.h	/^    void Set(const T pbegin, const T pend, bool fCompressedIn)$/;"	f	class:CKey
Set	pubkey.h	/^    void Set(const T pbegin, const T pend)$/;"	f	class:CPubKey
SetAddrLocal	net.cpp	/^void CNode::SetAddrLocal(const CService& addrLocalIn) {$/;"	f	class:CNode
SetBackend	coins.cpp	/^void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }$/;"	f	class:CCoinsViewBacked
SetBanned	net.cpp	/^void CConnman::SetBanned(const banmap_t &banMap)$/;"	f	class:CConnman
SetBannedSetDirty	net.cpp	/^void CConnman::SetBannedSetDirty(bool dirty)$/;"	f	class:CConnman
SetBestBlock	coins.cpp	/^void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
SetBestChain	validationinterface.h	/^    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;$/;"	m	struct:CMainSignals
SetBestChain	validationinterface.h	/^    virtual void SetBestChain(const CBlockLocator &locator) {}$/;"	f	class:CValidationInterface
SetBestHeight	net.cpp	/^void CConnman::SetBestHeight(int height)$/;"	f	class:CConnman
SetCompact	arith_uint256.cpp	/^arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)$/;"	f	class:arith_uint256
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)$/;"	f	class:CBase58Data
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const std::string& str)$/;"	f	class:base_uint
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const char* psz)$/;"	f	class:base_blob
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const std::string& str)$/;"	f	class:base_blob
SetIP	netaddress.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetKey	base58.cpp	/^void CBitcoinSecret::SetKey(const CKey& vchSecret)$/;"	f	class:CBitcoinSecret
SetKey	base58.h	/^    void SetKey(const K &key) {$/;"	f	class:CBitcoinExtKeyBase
SetLimit	streams.h	/^    bool SetLimit(uint64_t nPos = (uint64_t)(-1)) {$/;"	f	class:CBufferedFile
SetLimited	net.cpp	/^void SetLimited(enum Network net, bool fLimited)$/;"	f
SetMaster	key.cpp	/^void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {$/;"	f	class:CExtKey
SetMaxOutboundTarget	net.cpp	/^void CConnman::SetMaxOutboundTarget(uint64_t limit)$/;"	f	class:CConnman
SetMaxOutboundTimeframe	net.cpp	/^void CConnman::SetMaxOutboundTimeframe(uint64_t timeframe)$/;"	f	class:CConnman
SetMiscWarning	warnings.cpp	/^void SetMiscWarning(const std::string& strWarning)$/;"	f
SetMockTime	utiltime.cpp	/^void SetMockTime(int64_t nMockTimeIn)$/;"	f
SetNameProxy	netbase.cpp	/^bool SetNameProxy(const proxyType &addrProxy) {$/;"	f
SetNetworkActive	net.cpp	/^void CConnman::SetNetworkActive(bool active)$/;"	f	class:CConnman
SetNull	addrdb.h	/^    void SetNull()$/;"	f	class:CBanEntry
SetNull	chain.h	/^     void SetNull() {$/;"	f	class:CBlockFileInfo
SetNull	chain.h	/^    void SetNull() { nFile = -1; nPos = 0; }$/;"	f	struct:CDiskBlockPos
SetNull	chain.h	/^    void SetNull()$/;"	f	class:CBlockIndex
SetNull	txdb.h	/^    void SetNull() {$/;"	f	struct:CDiskTxPos
SetNull	uint256.h	/^    void SetNull()$/;"	f	class:base_blob
SetPort	netaddress.cpp	/^void CService::SetPort(unsigned short portIn)$/;"	f	class:CService
SetPos	streams.h	/^    bool SetPos(uint64_t nPos) {$/;"	f	class:CBufferedFile
SetPrivKey	key.cpp	/^bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {$/;"	f	class:CKey
SetProxy	netbase.cpp	/^bool SetProxy(enum Network net, const proxyType &addrProxy) {$/;"	f
SetRaw	netaddress.cpp	/^void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)$/;"	f	class:CNetAddr
SetRecvVersion	net.h	/^    void SetRecvVersion(int nVersionIn)$/;"	f	class:CNode
SetSendVersion	net.cpp	/^void CNode::SetSendVersion(int nVersionIn)$/;"	f	class:CNode
SetServices	addrman.h	/^    void SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetServices	net.cpp	/^void CConnman::SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CConnman
SetServices_	addrman.cpp	/^void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetSockAddr	netaddress.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSocketNonBlocking	netbase.cpp	/^bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking)$/;"	f
SetSpecial	netaddress.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetString	base58.cpp	/^bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CBase58Data::SetString(const std::string& str)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CBitcoinSecret::SetString(const char* pszSecret)$/;"	f	class:CBitcoinSecret
SetString	base58.cpp	/^bool CBitcoinSecret::SetString(const std::string& strSecret)$/;"	f	class:CBitcoinSecret
SetTip	chain.cpp	/^void CChain::SetTip(CBlockIndex *pindex) {$/;"	f	class:CChain
SetType	streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	net.h	/^    void SetVersion(int nVersionIn)$/;"	f	class:CNetMessage
SetVersion	streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetfLargeWorkForkFound	warnings.cpp	/^void SetfLargeWorkForkFound(bool flag)$/;"	f
SetfLargeWorkInvalidChainFound	warnings.cpp	/^void SetfLargeWorkInvalidChainFound(bool flag)$/;"	f
SetupEnvironment	util.cpp	/^void SetupEnvironment()$/;"	f
SetupNetworking	util.cpp	/^bool SetupNetworking()$/;"	f
ShowProgress	ui_interface.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:CClientUIInterface
ShrinkDebugFile	util.cpp	/^void ShrinkDebugFile()$/;"	f
Shutdown	init.cpp	/^void Shutdown()$/;"	f
ShutdownRequested	init.cpp	/^bool ShutdownRequested()$/;"	f
Sign	key.cpp	/^bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {$/;"	f	class:CKey
SignCompact	key.cpp	/^bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {$/;"	f	class:CKey
SipHashUint256	hash.cpp	/^uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)$/;"	f
SkipMapTxEntry	miner.cpp	/^bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)$/;"	f	class:BlockAssembler
SocketSendData	net.cpp	/^size_t CConnman::SocketSendData(CNode *pnode) const$/;"	f	class:CConnman
Socks5	netbase.cpp	/^static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)$/;"	f	file:
Socks5ErrorString	netbase.cpp	/^std::string Socks5ErrorString(int err)$/;"	f
SoftSetArg	util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
SortForBlock	miner.cpp	/^void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)$/;"	f	class:BlockAssembler
Spend	coins.cpp	/^bool CCoins::Spend(uint32_t nPos) $/;"	f	class:CCoins
SplitHostPort	netbase.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
SplitTorReplyLine	torcontrol.cpp	/^static std::pair<std::string,std::string> SplitTorReplyLine(const std::string &s)$/;"	f	file:
Start	net.cpp	/^bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options connOptions)$/;"	f	class:CConnman
StartHTTPRPC	httprpc.cpp	/^bool StartHTTPRPC()$/;"	f
StartHTTPServer	httpserver.cpp	/^bool StartHTTPServer()$/;"	f
StartREST	rest.cpp	/^bool StartREST()$/;"	f
StartShutdown	init.cpp	/^void StartShutdown()$/;"	f
StartTorControl	torcontrol.cpp	/^void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
State	net_processing.cpp	/^CNodeState *State(NodeId pnode) {$/;"	f	namespace:__anon8
Stop	net.cpp	/^void CConnman::Stop()$/;"	f	class:CConnman
StopHTTPRPC	httprpc.cpp	/^void StopHTTPRPC()$/;"	f
StopHTTPServer	httpserver.cpp	/^void StopHTTPServer()$/;"	f
StopREST	rest.cpp	/^void StopREST()$/;"	f
StopTorControl	torcontrol.cpp	/^void StopTorControl()$/;"	f
SwapRandom	addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
SweepBanned	net.cpp	/^void CConnman::SweepBanned()$/;"	f	class:CConnman
Sync	dbwrapper.h	/^    bool Sync()$/;"	f	class:CDBWrapper
SyncTransaction	net_processing.cpp	/^void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock) {$/;"	f	class:PeerLogicValidation
SyncTransaction	validationinterface.h	/^    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;$/;"	m	struct:CMainSignals
SyncTransaction	validationinterface.h	/^    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}$/;"	f	class:CValidationInterface
TESTDEFS	Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTNET	chainparamsbase.cpp	/^const std::string CBaseChainParams::TESTNET = "test";$/;"	m	class:CBaseChainParams	file:
TESTNET	chainparamsbase.h	/^    static const std::string TESTNET;$/;"	m	class:CBaseChainParams
TESTS	Makefile	/^TESTS = $(am__EXEEXT_3) $(am__EXEEXT_6)$/;"	m
TEST_BINARY	Makefile	/^TEST_BINARY = test\/test_bitcoin$(EXEEXT)$/;"	m
TEST_EXTENSIONS	Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_LOGS	Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_QT_H	Makefile	/^TEST_QT_H = \\$/;"	m
TEST_QT_MOC_CPP	Makefile	/^TEST_QT_MOC_CPP = qt\/test\/moc_compattests.cpp \\$/;"	m
TEST_SRCDIR	Makefile	/^TEST_SRCDIR = test$/;"	m
TEST_SUITE_LOG	Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
THRESHOLD_ACTIVE	versionbits.h	/^    THRESHOLD_ACTIVE,$/;"	e	enum:ThresholdState
THRESHOLD_DEFINED	versionbits.h	/^    THRESHOLD_DEFINED,$/;"	e	enum:ThresholdState
THRESHOLD_FAILED	versionbits.h	/^    THRESHOLD_FAILED,$/;"	e	enum:ThresholdState
THRESHOLD_LOCKED_IN	versionbits.h	/^    THRESHOLD_LOCKED_IN,$/;"	e	enum:ThresholdState
THRESHOLD_STARTED	versionbits.h	/^    THRESHOLD_STARTED,$/;"	e	enum:ThresholdState
TIFFCP	Makefile	/^TIFFCP = $/;"	m
TIMEOUT_INTERVAL	net.h	/^static const int TIMEOUT_INTERVAL = 20 * 60;$/;"	v
TINYFORMAT_ARGTYPES	tinyformat.h	367;"	d
TINYFORMAT_ARGTYPES_1	tinyformat.h	408;"	d
TINYFORMAT_ARGTYPES_10	tinyformat.h	417;"	d
TINYFORMAT_ARGTYPES_11	tinyformat.h	418;"	d
TINYFORMAT_ARGTYPES_12	tinyformat.h	419;"	d
TINYFORMAT_ARGTYPES_13	tinyformat.h	420;"	d
TINYFORMAT_ARGTYPES_14	tinyformat.h	421;"	d
TINYFORMAT_ARGTYPES_15	tinyformat.h	422;"	d
TINYFORMAT_ARGTYPES_16	tinyformat.h	423;"	d
TINYFORMAT_ARGTYPES_2	tinyformat.h	409;"	d
TINYFORMAT_ARGTYPES_3	tinyformat.h	410;"	d
TINYFORMAT_ARGTYPES_4	tinyformat.h	411;"	d
TINYFORMAT_ARGTYPES_5	tinyformat.h	412;"	d
TINYFORMAT_ARGTYPES_6	tinyformat.h	413;"	d
TINYFORMAT_ARGTYPES_7	tinyformat.h	414;"	d
TINYFORMAT_ARGTYPES_8	tinyformat.h	415;"	d
TINYFORMAT_ARGTYPES_9	tinyformat.h	416;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	343;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	359;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	tinyformat.h	274;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	tinyformat.h	286;"	d
TINYFORMAT_ERROR	tinyformat.h	126;"	d
TINYFORMAT_ERROR	tinyformat.h	142;"	d
TINYFORMAT_FOREACH_ARGNUM	tinyformat.h	476;"	d
TINYFORMAT_HIDDEN	tinyformat.h	160;"	d
TINYFORMAT_HIDDEN	tinyformat.h	162;"	d
TINYFORMAT_H_INCLUDED	tinyformat.h	116;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	tinyformat.h	1002;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	tinyformat.h	1032;"	d
TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND	tinyformat.h	154;"	d
TINYFORMAT_PASSARGS	tinyformat.h	369;"	d
TINYFORMAT_PASSARGS_1	tinyformat.h	442;"	d
TINYFORMAT_PASSARGS_10	tinyformat.h	451;"	d
TINYFORMAT_PASSARGS_11	tinyformat.h	452;"	d
TINYFORMAT_PASSARGS_12	tinyformat.h	453;"	d
TINYFORMAT_PASSARGS_13	tinyformat.h	454;"	d
TINYFORMAT_PASSARGS_14	tinyformat.h	455;"	d
TINYFORMAT_PASSARGS_15	tinyformat.h	456;"	d
TINYFORMAT_PASSARGS_16	tinyformat.h	457;"	d
TINYFORMAT_PASSARGS_2	tinyformat.h	443;"	d
TINYFORMAT_PASSARGS_3	tinyformat.h	444;"	d
TINYFORMAT_PASSARGS_4	tinyformat.h	445;"	d
TINYFORMAT_PASSARGS_5	tinyformat.h	446;"	d
TINYFORMAT_PASSARGS_6	tinyformat.h	447;"	d
TINYFORMAT_PASSARGS_7	tinyformat.h	448;"	d
TINYFORMAT_PASSARGS_8	tinyformat.h	449;"	d
TINYFORMAT_PASSARGS_9	tinyformat.h	450;"	d
TINYFORMAT_PASSARGS_TAIL	tinyformat.h	370;"	d
TINYFORMAT_PASSARGS_TAIL_1	tinyformat.h	459;"	d
TINYFORMAT_PASSARGS_TAIL_10	tinyformat.h	468;"	d
TINYFORMAT_PASSARGS_TAIL_11	tinyformat.h	469;"	d
TINYFORMAT_PASSARGS_TAIL_12	tinyformat.h	470;"	d
TINYFORMAT_PASSARGS_TAIL_13	tinyformat.h	471;"	d
TINYFORMAT_PASSARGS_TAIL_14	tinyformat.h	472;"	d
TINYFORMAT_PASSARGS_TAIL_15	tinyformat.h	473;"	d
TINYFORMAT_PASSARGS_TAIL_16	tinyformat.h	474;"	d
TINYFORMAT_PASSARGS_TAIL_2	tinyformat.h	460;"	d
TINYFORMAT_PASSARGS_TAIL_3	tinyformat.h	461;"	d
TINYFORMAT_PASSARGS_TAIL_4	tinyformat.h	462;"	d
TINYFORMAT_PASSARGS_TAIL_5	tinyformat.h	463;"	d
TINYFORMAT_PASSARGS_TAIL_6	tinyformat.h	464;"	d
TINYFORMAT_PASSARGS_TAIL_7	tinyformat.h	465;"	d
TINYFORMAT_PASSARGS_TAIL_8	tinyformat.h	466;"	d
TINYFORMAT_PASSARGS_TAIL_9	tinyformat.h	467;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	tinyformat.h	130;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	tinyformat.h	147;"	d
TINYFORMAT_VARARGS	tinyformat.h	368;"	d
TINYFORMAT_VARARGS_1	tinyformat.h	425;"	d
TINYFORMAT_VARARGS_10	tinyformat.h	434;"	d
TINYFORMAT_VARARGS_11	tinyformat.h	435;"	d
TINYFORMAT_VARARGS_12	tinyformat.h	436;"	d
TINYFORMAT_VARARGS_13	tinyformat.h	437;"	d
TINYFORMAT_VARARGS_14	tinyformat.h	438;"	d
TINYFORMAT_VARARGS_15	tinyformat.h	439;"	d
TINYFORMAT_VARARGS_16	tinyformat.h	440;"	d
TINYFORMAT_VARARGS_2	tinyformat.h	426;"	d
TINYFORMAT_VARARGS_3	tinyformat.h	427;"	d
TINYFORMAT_VARARGS_4	tinyformat.h	428;"	d
TINYFORMAT_VARARGS_5	tinyformat.h	429;"	d
TINYFORMAT_VARARGS_6	tinyformat.h	430;"	d
TINYFORMAT_VARARGS_7	tinyformat.h	431;"	d
TINYFORMAT_VARARGS_8	tinyformat.h	432;"	d
TINYFORMAT_VARARGS_9	tinyformat.h	433;"	d
TOR_COOKIE_SIZE	torcontrol.cpp	/^static const int TOR_COOKIE_SIZE = 32;$/;"	v	file:
TOR_NONCE_SIZE	torcontrol.cpp	/^static const int TOR_NONCE_SIZE = 32;$/;"	v	file:
TOR_SAFE_CLIENTKEY	torcontrol.cpp	/^static const std::string TOR_SAFE_CLIENTKEY = "Tor safe cookie authentication controller-to-server hash";$/;"	v	file:
TOR_SAFE_SERVERKEY	torcontrol.cpp	/^static const std::string TOR_SAFE_SERVERKEY = "Tor safe cookie authentication server-to-controller hash";$/;"	v	file:
TRY_LOCK	sync.h	188;"	d
TX	protocol.cpp	/^const char *TX="tx";$/;"	m	namespace:NetMsgType	file:
TestBlockValidity	validation.cpp	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
TestForBlock	miner.cpp	/^bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
TestLockPointValidity	validation.cpp	/^bool TestLockPointValidity(const LockPoints* lp)$/;"	f
TestPackage	miner.cpp	/^bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)$/;"	f	class:BlockAssembler
TestPackageTransactions	miner.cpp	/^bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)$/;"	f	class:BlockAssembler
Thread	checkqueue.h	/^    void Thread()$/;"	f	class:CCheckQueue
ThreadAddressGeneration	net.cpp	/^void CConnman::ThreadAddressGeneration()$/;"	f	class:CConnman
ThreadCounter	httpserver.cpp	/^        ThreadCounter(WorkQueue &w): wq(w)$/;"	f	class:WorkQueue::ThreadCounter
ThreadCounter	httpserver.cpp	/^    class ThreadCounter$/;"	c	class:WorkQueue	file:
ThreadDNSAddressSeed	net.cpp	/^void CConnman::ThreadDNSAddressSeed()$/;"	f	class:CConnman
ThreadHTTP	httpserver.cpp	/^static bool ThreadHTTP(struct event_base* base, struct evhttp* http)$/;"	f	file:
ThreadImport	init.cpp	/^void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)$/;"	f
ThreadMapPort	net.cpp	/^void ThreadMapPort()$/;"	f
ThreadMessageHandler	net.cpp	/^void CConnman::ThreadMessageHandler()$/;"	f	class:CConnman
ThreadOpenAddedConnections	net.cpp	/^void CConnman::ThreadOpenAddedConnections()$/;"	f	class:CConnman
ThreadOpenConnections	net.cpp	/^void CConnman::ThreadOpenConnections()$/;"	f	class:CConnman
ThreadSafeMessageBox	ui_interface.h	/^    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;$/;"	m	class:CClientUIInterface
ThreadSafeQuestion	ui_interface.h	/^    boost::signals2::signal<bool (const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeQuestion;$/;"	m	class:CClientUIInterface
ThreadScriptCheck	validation.cpp	/^void ThreadScriptCheck() {$/;"	f
ThreadSocketHandler	net.cpp	/^void CConnman::ThreadSocketHandler()$/;"	f	class:CConnman
Threshold	validation.cpp	/^    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }$/;"	f	class:WarningBitsConditionChecker
Threshold	versionbits.cpp	/^    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }$/;"	f	class:__anon19::VersionBitsConditionChecker
ThresholdConditionCache	versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	versionbits.h	/^enum ThresholdState {$/;"	g
TimingResistantEqual	utilstrencodings.h	/^bool TimingResistantEqual(const T& a, const T& b)$/;"	f
Tip	chain.h	/^    CBlockIndex *Tip() const {$/;"	f	class:CChain
ToString	amount.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	arith_uint256.cpp	/^std::string base_uint<BITS>::ToString() const$/;"	f	class:base_uint
ToString	base58.cpp	/^std::string CBase58Data::ToString() const$/;"	f	class:CBase58Data
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	struct:CDiskBlockPos
ToString	netaddress.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	netaddress.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	netaddress.cpp	/^std::string CSubNet::ToString() const$/;"	f	class:CSubNet
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	uint256.cpp	/^std::string base_blob<BITS>::ToString() const$/;"	f	class:base_blob
ToString	validation.cpp	/^std::string CBlockFileInfo::ToString() const$/;"	f	class:CBlockFileInfo
ToStringIP	netaddress.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	netaddress.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	netaddress.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
TorControlConnection	torcontrol.cpp	/^TorControlConnection::TorControlConnection(struct event_base *_base):$/;"	f	class:TorControlConnection
TorControlConnection	torcontrol.cpp	/^class TorControlConnection$/;"	c	file:
TorControlReply	torcontrol.cpp	/^    TorControlReply() { Clear(); }$/;"	f	class:TorControlReply
TorControlReply	torcontrol.cpp	/^class TorControlReply$/;"	c	file:
TorControlThread	torcontrol.cpp	/^static void TorControlThread()$/;"	f	file:
TorController	torcontrol.cpp	/^TorController::TorController(struct event_base* _base, const std::string& _target):$/;"	f	class:TorController
TorController	torcontrol.cpp	/^class TorController$/;"	c	file:
TraceThread	util.h	/^template <typename Callable> void TraceThread(const char* name,  Callable func)$/;"	f
TransactionCompressor	blockencodings.h	/^    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	blockencodings.h	/^struct TransactionCompressor {$/;"	s
TransactionWithinChainLimit	txmempool.cpp	/^bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const {$/;"	f	class:CTxMemPool
Translate	util.h	/^    boost::signals2::signal<std::string (const char* psz)> Translate;$/;"	m	class:CTranslationInterface
TraverseAndBuild	merkleblock.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {$/;"	f	class:CPartialMerkleTree
TraverseAndExtract	merkleblock.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
TrimToSize	txmempool.cpp	/^void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining) {$/;"	f	class:CTxMemPool
TruncateFile	util.cpp	/^bool TruncateFile(FILE *file, unsigned int length) {$/;"	f
TryAcquire	sync.h	/^    bool TryAcquire()$/;"	f	class:CSemaphoreGrant
TryCreateDirectory	util.cpp	/^bool TryCreateDirectory(const boost::filesystem::path& p)$/;"	f
TryEnter	sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
TxCoinAgePriority	txmempool.h	/^typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;$/;"	t
TxCoinAgePriorityCompare	txmempool.h	/^struct TxCoinAgePriorityCompare$/;"	s
TxData	chainparams.h	/^    const ChainTxData& TxData() const { return chainTxData; }$/;"	f	class:CChainParams
TxLinks	txmempool.h	/^    struct TxLinks {$/;"	s	class:CTxMemPool
TxMempoolInfo	txmempool.h	/^struct TxMempoolInfo$/;"	s
TxToUniv	core_write.cpp	/^void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)$/;"	f
UBEGIN	utilstrencodings.h	18;"	d
UEND	utilstrencodings.h	19;"	d
UIC	Makefile	/^UIC = \/usr\/lib\/x86_64-linux-gnu\/qt5\/bin\/uic$/;"	m
UNDEFINED	protocol.h	/^    UNDEFINED = 0,$/;"	e	enum:GetDataMsg
UNDOFILE_CHUNK_SIZE	validation.h	/^static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
UNIVALUE_CFLAGS	Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_LIBS	Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNKNOWN	httpserver.h	/^        UNKNOWN,$/;"	e	enum:HTTPRequest::RequestMethod
UNKNOWN	txmempool.h	/^    UNKNOWN = 0, \/\/! Manually removed or unknown reason$/;"	m	class:MemPoolRemovalReason
UNLOCK_FUNCTION	sync.h	/^    void unlock() UNLOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
UNLOCK_FUNCTION	sync.h	/^    ~CMutexLock() UNLOCK_FUNCTION()$/;"	f	class:CMutexLock
UNLOCK_FUNCTION	threadsafety.h	28;"	d
UNLOCK_FUNCTION	threadsafety.h	47;"	d
UPPER_BOUND	utilstrencodings.cpp	/^static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;$/;"	v	file:
USE_QRCODE	Makefile	/^USE_QRCODE = $/;"	m
USE_UPNP	Makefile	/^USE_UPNP = $/;"	m
UintToArith256	arith_uint256.cpp	/^arith_uint256 UintToArith256(const uint256 &a)$/;"	f
Unban	net.cpp	/^bool CConnman::Unban(const CNetAddr &addr) {$/;"	f	class:CConnman
Unban	net.cpp	/^bool CConnman::Unban(const CSubNet &subNet) {$/;"	f	class:CConnman
Uncache	coins.cpp	/^void CCoinsViewCache::Uncache(const uint256& hash)$/;"	f	class:CCoinsViewCache
UndoReadFromDisk	validation.cpp	/^bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)$/;"	f	namespace:__anon18
UndoWriteToDisk	validation.cpp	/^bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	namespace:__anon18
UnlinkPrunedFiles	validation.cpp	/^void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)$/;"	f
UnloadBlockIndex	validation.cpp	/^void UnloadBlockIndex()$/;"	f
UnregisterAllValidationInterfaces	validationinterface.cpp	/^void UnregisterAllValidationInterfaces() {$/;"	f
UnregisterHTTPHandler	httpserver.cpp	/^void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)$/;"	f
UnregisterNodeSignals	net_processing.cpp	/^void UnregisterNodeSignals(CNodeSignals& nodeSignals)$/;"	f
UnregisterValidationInterface	validationinterface.cpp	/^void UnregisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
Unserialize	addrman.h	/^    void Unserialize(Stream& s)$/;"	f	class:CAddrMan
Unserialize	coins.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CCoins
Unserialize	compressor.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CScriptCompressor
Unserialize	key.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtKey
Unserialize	pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	class:CPubKey
Unserialize	pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtPubKey
Unserialize	serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CCompactSize
Unserialize	serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CVarInt
Unserialize	serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:LimitedString
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, prevector<N, T>& v)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } \/\/ TODO Get rid of bare char$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::shared_ptr<const T>& p)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::unique_ptr<const T>& p)$/;"	f
Unserialize	uint256.h	/^    void Unserialize(Stream& s)$/;"	f	class:base_blob
Unserialize	undo.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CTxInUndo
UnserializeAddr	ntunodeid.h	/^    void UnserializeAddr(Stream& s)$/;"	f	class:AddrPow
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s)$/;"	f
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s, Arg& arg)$/;"	f
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s, Arg& arg, Args&... args)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)$/;"	f
UpdateAncestorState	txmempool.cpp	/^void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps)$/;"	f	class:CTxMemPoolEntry
UpdateAncestorsOf	txmempool.cpp	/^void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateBIP9Parameters	chainparams.cpp	/^    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f	class:CRegTestParams
UpdateBlockAvailability	net_processing.cpp	/^void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {$/;"	f	namespace:__anon8
UpdateChild	txmempool.cpp	/^void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)$/;"	f	class:CTxMemPool
UpdateChildrenForRemoval	txmempool.cpp	/^void CTxMemPool::UpdateChildrenForRemoval(txiter it)$/;"	f	class:CTxMemPool
UpdateCoins	validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)$/;"	f
UpdateCoins	validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)$/;"	f
UpdateDescendantState	txmempool.cpp	/^void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)$/;"	f	class:CTxMemPoolEntry
UpdateEmptyFull	bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateEntryForAncestors	txmempool.cpp	/^void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateFeeDelta	txmempool.cpp	/^void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)$/;"	f	class:CTxMemPoolEntry
UpdateForDescendants	txmempool.cpp	/^void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)$/;"	f	class:CTxMemPool
UpdateForRemoveFromMempool	txmempool.cpp	/^void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)$/;"	f	class:CTxMemPool
UpdateLockPoints	txmempool.cpp	/^void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)$/;"	f	class:CTxMemPoolEntry
UpdatePackagesForAdded	miner.cpp	/^int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,$/;"	f	class:BlockAssembler
UpdateParent	txmempool.cpp	/^void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)$/;"	f	class:CTxMemPool
UpdatePreferredDownload	net_processing.cpp	/^void UpdatePreferredDownload(CNode* node, CNodeState* state)$/;"	f	namespace:__anon8
UpdateRegtestBIP9Parameters	chainparams.cpp	/^void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f
UpdateTime	miner.cpp	/^int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
UpdateTip	validation.cpp	/^void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {$/;"	f	file:
UpdateTransactionsFromBlock	txmempool.cpp	/^void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)$/;"	f	class:CTxMemPool
UpdateUncommittedBlockStructures	validation.cpp	/^void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
UpdatedBlockTip	net_processing.cpp	/^void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:PeerLogicValidation
UpdatedBlockTip	validationinterface.h	/^    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;$/;"	m	struct:CMainSignals
UpdatedBlockTip	validationinterface.h	/^    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}$/;"	f	class:CValidationInterface
UpdatedTransaction	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;$/;"	m	struct:CMainSignals
UpdatedTransaction	validationinterface.h	/^    virtual void UpdatedTransaction(const uint256 &hash) {}$/;"	f	class:CValidationInterface
UseDescendantScore	txmempool.h	/^    bool UseDescendantScore(const CTxMemPoolEntry &a)$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
VARINT	serialize.h	348;"	d
VERACK	protocol.cpp	/^const char *VERACK="verack";$/;"	m	namespace:NetMsgType	file:
VERSION	Makefile	/^VERSION = 0.14.1$/;"	m
VERSION	protocol.cpp	/^const char *VERSION="version";$/;"	m	namespace:NetMsgType	file:
VERSIONBITS_LAST_OLD_BLOCK_VERSION	versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x40000000UL;$/;"	v
VERSIONBITS_TOP_MASK	versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
Valid	dbwrapper.cpp	/^bool CDBIterator::Valid() { return piter->Valid(); }$/;"	f	class:CDBIterator
Valid	txdb.cpp	/^bool CCoinsViewDBCursor::Valid() const$/;"	f	class:CCoinsViewDBCursor
Verify	pubkey.cpp	/^bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {$/;"	f	class:CPubKey
VerifyDB	validation.cpp	/^bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)$/;"	f	class:CVerifyDB
VerifyPubKey	key.cpp	/^bool CKey::VerifyPubKey(const CPubKey& pubkey) const {$/;"	f	class:CKey
VersionBitsCache	versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	versionbits.cpp	/^    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon19::VersionBitsConditionChecker
VersionBitsConditionChecker	versionbits.cpp	/^class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon19	file:
VersionBitsDeploymentInfo	versionbits.cpp	/^const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:BIP9DeploymentInfo
VersionBitsMask	versionbits.cpp	/^uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsState	versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStateSinceHeight	versionbits.cpp	/^int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsTipState	validation.cpp	/^ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStateSinceHeight	validation.cpp	/^int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
WIDTH	arith_uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon1
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/8 };$/;"	e	enum:base_blob::__anon16
WIN32_LEAN_AND_MEAN	compat.h	19;"	d
WIN32_LEAN_AND_MEAN	util.cpp	62;"	d	file:
WINDOWS_BITS	Makefile	/^WINDOWS_BITS = $/;"	m
WINDRES	Makefile	/^WINDRES = $/;"	m
WSAEADDRINUSE	compat.h	62;"	d
WSAEALREADY	compat.h	57;"	d
WSAEINPROGRESS	compat.h	61;"	d
WSAEINTR	compat.h	60;"	d
WSAEINVAL	compat.h	56;"	d
WSAEMSGSIZE	compat.h	59;"	d
WSAENOTSOCK	compat.h	63;"	d
WSAEWOULDBLOCK	compat.h	58;"	d
WSAGetLastError	compat.h	55;"	d
WWW_AUTH_HEADER_DATA	httprpc.cpp	/^static const char* WWW_AUTH_HEADER_DATA = "Basic realm=\\"jsonrpc\\"";$/;"	v	file:
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueue
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueueControl
WaitExit	httpserver.cpp	/^    void WaitExit()$/;"	f	class:WorkQueue
WaitForShutdown	bitcoind.cpp	/^void WaitForShutdown(boost::thread_group* threadGroup)$/;"	f
WakeMessageHandler	net.cpp	/^void CConnman::WakeMessageHandler()$/;"	f	class:CConnman
WarningBitsConditionChecker	validation.cpp	/^    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}$/;"	f	class:WarningBitsConditionChecker
WarningBitsConditionChecker	validation.cpp	/^class WarningBitsConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
WatchKeyMap	keystore.h	/^typedef std::map<CKeyID, CPubKey> WatchKeyMap;$/;"	t
WatchOnlySet	keystore.h	/^typedef std::set<CScript> WatchOnlySet;$/;"	t
WithOrVersion	streams.h	/^OverrideStream<S> WithOrVersion(S* s, int nVersionFlag)$/;"	f
WorkQueue	httpserver.cpp	/^    WorkQueue(size_t _maxDepth) : running(true),$/;"	f	class:WorkQueue
WorkQueue	httpserver.cpp	/^class WorkQueue$/;"	c	file:
WrapVarInt	serialize.h	/^CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }$/;"	f
Write	addrdb.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	addrdb.cpp	/^bool CBanDB::Write(const banmap_t& banSet)$/;"	f	class:CBanDB
Write	dbwrapper.h	/^    bool Write(const K& key, const V& value, bool fSync = false)$/;"	f	class:CDBWrapper
Write	dbwrapper.h	/^    void Write(const K& key, const V& value)$/;"	f	class:CDBBatch
Write	hash.cpp	/^CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)$/;"	f	class:CSipHasher
Write	hash.cpp	/^CSipHasher& CSipHasher::Write(uint64_t data)$/;"	f	class:CSipHasher
Write	hash.h	/^    CHash160& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash160
Write	hash.h	/^    CHash256& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash256
WriteBatch	dbwrapper.cpp	/^bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)$/;"	f	class:CDBWrapper
WriteBatchSync	txdb.cpp	/^bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {$/;"	f	class:CBlockTreeDB
WriteBinaryFile	torcontrol.cpp	/^static bool WriteBinaryFile(const std::string &filename, const std::string &data)$/;"	f	file:
WriteBlockToDisk	validation.cpp	/^bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)$/;"	f
WriteCompactSize	serialize.h	/^inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)$/;"	f
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64_t nSize)$/;"	f
WriteFeeEstimates	txmempool.cpp	/^CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const$/;"	f	class:CTxMemPool
WriteFlag	txdb.cpp	/^bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {$/;"	f	class:CBlockTreeDB
WriteHeader	httpserver.cpp	/^void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)$/;"	f	class:HTTPRequest
WriteReindexing	txdb.cpp	/^bool CBlockTreeDB::WriteReindexing(bool fReindexing) {$/;"	f	class:CBlockTreeDB
WriteReply	httpserver.cpp	/^void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)$/;"	f	class:HTTPRequest
WriteTxIndex	txdb.cpp	/^bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {$/;"	f	class:CBlockTreeDB
WriteVarInt	serialize.h	/^inline void WriteVarInt(CSizeComputer &s, I n)$/;"	f
WriteVarInt	serialize.h	/^void WriteVarInt(Stream& os, I n)$/;"	f
X	net.cpp	626;"	d	file:
X	net.cpp	627;"	d	file:
X	net.cpp	682;"	d	file:
X11XCB_CFLAGS	Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_LIBS	Makefile	/^X11XCB_LIBS = $/;"	m
XGETTEXT	Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
Xor	streams.h	/^    void Xor(const std::vector<unsigned char>& key)$/;"	f	class:CDataStream
ZMQ_CFLAGS	Makefile	/^ZMQ_CFLAGS = $/;"	m
ZMQ_LIBS	Makefile	/^ZMQ_LIBS = $/;"	m
_	util.h	/^inline std::string _(const char* psz)$/;"	f
_BITCOIN_CUCKOOCACHE_H_	cuckoocache.h	6;"	d
_BITCOIN_PREVECTOR_H_	prevector.h	6;"	d
_POSIX_C_SOURCE	util.cpp	31;"	d	file:
_POSIX_C_SOURCE	util.cpp	34;"	d	file:
_WIN32_IE	util.cpp	58;"	d	file:
_WIN32_IE	util.cpp	60;"	d	file:
_WIN32_WINNT	compat.h	15;"	d
_WIN32_WINNT	compat.h	17;"	d
_WIN32_WINNT	util.cpp	53;"	d	file:
_WIN32_WINNT	util.cpp	55;"	d	file:
_clear	txmempool.cpp	/^void CTxMemPool::_clear()$/;"	f	class:CTxMemPool
_mapMultiArgs	util.cpp	/^static map<string, vector<string> > _mapMultiArgs;$/;"	v	file:
_size	prevector.h	/^    size_type _size;$/;"	m	class:prevector
_union	prevector.h	/^    } _union;$/;"	m	class:prevector	typeref:union:prevector::direct_or_indirect
abs64	timedata.cpp	/^static int64_t abs64(int64_t n)$/;"	f	file:
abs_builddir	Makefile	/^abs_builddir = \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/src$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/src$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJCXX	Makefile	/^ac_ct_OBJCXX = $/;"	m
addPackageTxs	miner.cpp	/^void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)$/;"	f	class:BlockAssembler
addPriorityTxs	miner.cpp	/^void BlockAssembler::addPriorityTxs()$/;"	f	class:BlockAssembler
addUnchecked	txmempool.cpp	/^bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addUnchecked	txmempool.cpp	/^bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)$/;"	f	class:CTxMemPool
add_onion_cb	torcontrol.cpp	/^void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
addr	base58.cpp	/^    CBitcoinAddress* addr;$/;"	m	class:__anon2::CBitcoinAddressVisitor	file:
addr	chainparams.h	/^    uint8_t addr[16];$/;"	m	struct:SeedSpec6
addr	net.cpp	/^    CAddress addr;$/;"	m	struct:NodeEvictionCandidate	file:
addr	net.h	/^    CAddress addr;$/;"	m	class:CNodeStats
addr	net.h	/^    const CAddress addr;$/;"	m	class:CNode
addr	ntunodeid.h	/^    uint256 addr;       \/\/address$/;"	m	class:AddrPow
addrKey	ntunodeid.h	/^    CKey addrKey;$/;"	m	class:AddrPow
addrKnown	net.h	/^    CRollingBloomFilter addrKnown;$/;"	m	class:CNode
addrLocal	net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrLocal	net.h	/^    std::string addrLocal;$/;"	m	class:CNodeStats
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
addrPow	net.h	/^    uint256 addrPow;$/;"	m	class:CNode
address	net_processing.cpp	/^    const CService address;$/;"	m	struct:__anon8::CNodeState	file:
addrman	net.h	/^    CAddrMan addrman;$/;"	m	class:CConnman
allNetMessageTypes	protocol.cpp	/^const static std::string allNetMessageTypes[] = {$/;"	v	file:
allocated_memory	prevector.h	/^    size_t allocated_memory() const {$/;"	f	class:prevector
allocator_type	streams.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
allow_erase	cuckoocache.h	/^    inline void allow_erase(uint32_t n) const$/;"	f	class:CuckooCache::cache
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 = $(am__append_9)$/;"	m
am__DEPENDENCIES_2	Makefile	/^am__DEPENDENCIES_2 = $(am__append_10)$/;"	m
am__DEPENDENCIES_3	Makefile	/^am__DEPENDENCIES_3 =$/;"	m
am__DEPENDENCIES_4	Makefile	/^am__DEPENDENCIES_4 = univalue\/libunivalue.la$/;"	m
am__DIST_COMMON	Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.bench.include \\$/;"	m
am__EXEEXT_1	Makefile	/^am__EXEEXT_1 = bitcoind$(EXEEXT)$/;"	m
am__EXEEXT_2	Makefile	/^am__EXEEXT_2 = bitcoin-cli$(EXEEXT) \\$/;"	m
am__EXEEXT_3	Makefile	/^am__EXEEXT_3 = test\/test_bitcoin$(EXEEXT)$/;"	m
am__EXEEXT_4	Makefile	/^am__EXEEXT_4 = bench\/bench_bitcoin$(EXEEXT)$/;"	m
am__EXEEXT_5	Makefile	/^am__EXEEXT_5 = qt\/bitcoin-qt$(EXEEXT)$/;"	m
am__EXEEXT_6	Makefile	/^am__EXEEXT_6 = qt\/test\/test_bitcoin-qt$(EXEEXT)$/;"	m
am__EXEEXT_7	Makefile	/^am__EXEEXT_7 = test\/test_bitcoin_fuzzy$(EXEEXT)$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__append_1	Makefile	/^am__append_1 = bitcoind$/;"	m
am__append_10	Makefile	/^am__append_10 = $(LIBMEMENV_INT)$/;"	m
am__append_11	Makefile	/^am__append_11 = -I$(srcdir)\/leveldb\/include \\$/;"	m
am__append_13	Makefile	/^am__append_13 = -DLEVELDB_PLATFORM_POSIX$/;"	m
am__append_15	Makefile	/^am__append_15 = leveldb\/port\/port_posix.cc$/;"	m
am__append_16	Makefile	/^am__append_16 = test\/test_bitcoin$/;"	m
am__append_17	Makefile	/^am__append_17 = test\/test_bitcoin$/;"	m
am__append_18	Makefile	/^am__append_18 = test\/test_bitcoin_fuzzy$/;"	m
am__append_19	Makefile	/^am__append_19 = \\$/;"	m
am__append_2	Makefile	/^am__append_2 = bitcoin-cli bitcoin-tx$/;"	m
am__append_20	Makefile	/^am__append_20 = \\$/;"	m
am__append_21	Makefile	/^am__append_21 = $(LIBBITCOIN_WALLET)$/;"	m
am__append_23	Makefile	/^am__append_23 = $(CLEAN_BITCOIN_TEST)$/;"	m
am__append_24	Makefile	/^am__append_24 = test\/buildenv.pyc$/;"	m
am__append_25	Makefile	/^am__append_25 = bench\/bench_bitcoin$/;"	m
am__append_27	Makefile	/^am__append_27 = bench\/coin_selection.cpp$/;"	m
am__append_28	Makefile	/^am__append_28 = $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)$/;"	m
am__append_29	Makefile	/^am__append_29 = $(CLEAN_BITCOIN_BENCH)$/;"	m
am__append_30	Makefile	/^am__append_30 = qt\/bitcoin-qt$/;"	m
am__append_31	Makefile	/^am__append_31 = qt\/libbitcoinqt.a$/;"	m
am__append_33	Makefile	/^am__append_33 = $(BITCOIN_QT_WALLET_CPP)$/;"	m
am__append_36	Makefile	/^am__append_36 = $(LIBBITCOIN_WALLET)$/;"	m
am__append_38	Makefile	/^am__append_38 = $(CLEAN_QT)$/;"	m
am__append_39	Makefile	/^am__append_39 = qt\/test\/test_bitcoin-qt$/;"	m
am__append_40	Makefile	/^am__append_40 = qt\/test\/test_bitcoin-qt$/;"	m
am__append_41	Makefile	/^am__append_41 = qt\/test\/moc_paymentservertests.cpp$/;"	m
am__append_42	Makefile	/^am__append_42 = \\$/;"	m
am__append_43	Makefile	/^am__append_43 = $(LIBBITCOIN_WALLET)$/;"	m
am__append_45	Makefile	/^am__append_45 = $(CLEAN_BITCOIN_QT_TEST)$/;"	m
am__append_8	Makefile	/^am__append_8 = $(LIBLEVELDB_INT) \\$/;"	m
am__append_9	Makefile	/^am__append_9 = $(LIBLEVELDB_INT)$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__bench_bench_bitcoin_SOURCES_DIST	Makefile	/^am__bench_bench_bitcoin_SOURCES_DIST = bench\/bench_bitcoin.cpp \\$/;"	m
am__bitcoin_cli_SOURCES_DIST	Makefile	/^am__bitcoin_cli_SOURCES_DIST = bitcoin-cli.cpp bitcoin-cli-res.rc$/;"	m
am__bitcoin_tx_SOURCES_DIST	Makefile	/^am__bitcoin_tx_SOURCES_DIST = bitcoin-tx.cpp bitcoin-tx-res.rc$/;"	m
am__bitcoind_SOURCES_DIST	Makefile	/^am__bitcoind_SOURCES_DIST = bitcoind.cpp bitcoind-res.rc$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__global_test_result_rx	Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include_HEADERS_DIST	Makefile	/^am__include_HEADERS_DIST = script\/bitcoinconsensus.h$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leveldb_libleveldb_a_SOURCES_DIST	Makefile	/^am__leveldb_libleveldb_a_SOURCES_DIST = leveldb\/port\/atomic_pointer.h \\$/;"	m
am__leveldb_libmemenv_a_SOURCES_DIST	Makefile	/^am__leveldb_libmemenv_a_SOURCES_DIST =  \\$/;"	m
am__libbitcoin_util_a_SOURCES_DIST	Makefile	/^am__libbitcoin_util_a_SOURCES_DIST = support\/lockedpool.cpp \\$/;"	m
am__libbitcoin_zmq_a_SOURCES_DIST	Makefile	/^am__libbitcoin_zmq_a_SOURCES_DIST = zmq\/zmqabstractnotifier.cpp \\$/;"	m
am__libbitcoinconsensus_la_SOURCES_DIST	Makefile	/^am__libbitcoinconsensus_la_SOURCES_DIST = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
am__list_recheck_tests	Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_10	Makefile	/^am__objects_10 = $(am__objects_5) $(am__objects_7) \\$/;"	m
am__objects_11	Makefile	/^am__objects_11 = qt\/qt_libbitcoinqt_a-moc_addressbookpage.$(OBJEXT) \\$/;"	m
am__objects_12	Makefile	/^am__objects_12 = qt\/qt_libbitcoinqt_a-paymentrequest.pb.$(OBJEXT)$/;"	m
am__objects_13	Makefile	/^am__objects_13 =  \\$/;"	m
am__objects_14	Makefile	/^am__objects_14 = qt\/qt_libbitcoinqt_a-qrc_bitcoin_locale.$(OBJEXT)$/;"	m
am__objects_15	Makefile	/^am__objects_15 = crypto\/libbitcoinconsensus_la-aes.lo \\$/;"	m
am__objects_16	Makefile	/^am__objects_16 = libbitcoinconsensus_la-arith_uint256.lo \\$/;"	m
am__objects_18	Makefile	/^am__objects_18 = bench\/bench_bench_bitcoin-coin_selection.$(OBJEXT)$/;"	m
am__objects_19	Makefile	/^am__objects_19 = $(am__objects_3)$/;"	m
am__objects_2	Makefile	/^am__objects_2 = leveldb\/port\/leveldb_libleveldb_a-port_posix.$(OBJEXT)$/;"	m
am__objects_23	Makefile	/^am__objects_23 =  \\$/;"	m
am__objects_25	Makefile	/^am__objects_25 = qt\/res\/bitcoin-qt-res.$(OBJEXT)$/;"	m
am__objects_27	Makefile	/^am__objects_27 = qt\/test\/qt_test_test_bitcoin_qt-paymentservertests.$(OBJEXT)$/;"	m
am__objects_28	Makefile	/^am__objects_28 = qt\/test\/qt_test_test_bitcoin_qt-moc_paymentservertests.$(OBJEXT)$/;"	m
am__objects_29	Makefile	/^am__objects_29 = qt\/test\/qt_test_test_bitcoin_qt-moc_compattests.$(OBJEXT) \\$/;"	m
am__objects_3	Makefile	/^am__objects_3 =$/;"	m
am__objects_30	Makefile	/^am__objects_30 = wallet\/test\/test_test_bitcoin-wallet_test_fixture.$(OBJEXT) \\$/;"	m
am__objects_31	Makefile	/^am__objects_31 = test\/test_test_bitcoin-arith_uint256_tests.$(OBJEXT) \\$/;"	m
am__objects_5	Makefile	/^am__objects_5 =  \\$/;"	m
am__objects_6	Makefile	/^am__objects_6 = qt\/qt_libbitcoinqt_a-winshutdownmonitor.$(OBJEXT)$/;"	m
am__objects_8	Makefile	/^am__objects_8 = qt\/qt_libbitcoinqt_a-addressbookpage.$(OBJEXT) \\$/;"	m
am__objects_9	Makefile	/^am__objects_9 = $(am__objects_8)$/;"	m
am__qt_bitcoin_qt_SOURCES_DIST	Makefile	/^am__qt_bitcoin_qt_SOURCES_DIST = qt\/bitcoin.cpp \\$/;"	m
am__qt_libbitcoinqt_a_SOURCES_DIST	Makefile	/^am__qt_libbitcoinqt_a_SOURCES_DIST = qt\/bantablemodel.cpp \\$/;"	m
am__qt_test_test_bitcoin_qt_SOURCES_DIST	Makefile	/^am__qt_test_test_bitcoin_qt_SOURCES_DIST = qt\/test\/compattests.cpp \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__recheck_rx	Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__rst_title	Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__test_logs1	Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_test_bitcoin_SOURCES_DIST	Makefile	/^am__test_test_bitcoin_SOURCES_DIST = test\/arith_uint256_tests.cpp \\$/;"	m
am__test_test_bitcoin_fuzzy_SOURCES_DIST	Makefile	/^am__test_test_bitcoin_fuzzy_SOURCES_DIST =  \\$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_OBJCXXLD_	Makefile	/^am__v_OBJCXXLD_ = $(am__v_OBJCXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXXLD_0	Makefile	/^am__v_OBJCXXLD_0 = @echo "  OBJCXXLD" $@;$/;"	m
am__v_OBJCXXLD_1	Makefile	/^am__v_OBJCXXLD_1 = $/;"	m
am__v_OBJCXX_	Makefile	/^am__v_OBJCXX_ = $(am__v_OBJCXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXX_0	Makefile	/^am__v_OBJCXX_0 = @echo "  OBJCXX  " $@;$/;"	m
am__v_OBJCXX_1	Makefile	/^am__v_OBJCXX_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_bench_bench_bitcoin_OBJECTS	Makefile	/^am_bench_bench_bitcoin_OBJECTS = bench\/bench_bench_bitcoin-bench_bitcoin.$(OBJEXT) \\$/;"	m
am_bitcoin_cli_OBJECTS	Makefile	/^am_bitcoin_cli_OBJECTS = bitcoin_cli-bitcoin-cli.$(OBJEXT) \\$/;"	m
am_bitcoin_tx_OBJECTS	Makefile	/^am_bitcoin_tx_OBJECTS = bitcoin_tx-bitcoin-tx.$(OBJEXT) \\$/;"	m
am_bitcoind_OBJECTS	Makefile	/^am_bitcoind_OBJECTS = bitcoind-bitcoind.$(OBJEXT) $(am__objects_22)$/;"	m
am_crypto_libbitcoin_crypto_a_OBJECTS	Makefile	/^am_crypto_libbitcoin_crypto_a_OBJECTS =  \\$/;"	m
am_leveldb_libleveldb_a_OBJECTS	Makefile	/^am_leveldb_libleveldb_a_OBJECTS = leveldb\/db\/leveldb_libleveldb_a-builder.$(OBJEXT) \\$/;"	m
am_leveldb_libmemenv_a_OBJECTS	Makefile	/^am_leveldb_libmemenv_a_OBJECTS = leveldb\/helpers\/memenv\/leveldb_libmemenv_a-memenv.$(OBJEXT)$/;"	m
am_libbitcoin_cli_a_OBJECTS	Makefile	/^am_libbitcoin_cli_a_OBJECTS = rpc\/libbitcoin_cli_a-client.$(OBJEXT) \\$/;"	m
am_libbitcoin_common_a_OBJECTS	Makefile	/^am_libbitcoin_common_a_OBJECTS = libbitcoin_common_a-amount.$(OBJEXT) \\$/;"	m
am_libbitcoin_consensus_a_OBJECTS	Makefile	/^am_libbitcoin_consensus_a_OBJECTS =  \\$/;"	m
am_libbitcoin_server_a_OBJECTS	Makefile	/^am_libbitcoin_server_a_OBJECTS =  \\$/;"	m
am_libbitcoin_util_a_OBJECTS	Makefile	/^am_libbitcoin_util_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_a_OBJECTS	Makefile	/^am_libbitcoin_wallet_a_OBJECTS =  \\$/;"	m
am_libbitcoinconsensus_la_OBJECTS	Makefile	/^am_libbitcoinconsensus_la_OBJECTS =  \\$/;"	m
am_libbitcoinconsensus_la_rpath	Makefile	/^am_libbitcoinconsensus_la_rpath = -rpath \\$/;"	m
am_qt_bitcoin_qt_OBJECTS	Makefile	/^am_qt_bitcoin_qt_OBJECTS =  \\$/;"	m
am_qt_libbitcoinqt_a_OBJECTS	Makefile	/^am_qt_libbitcoinqt_a_OBJECTS = $(am__objects_10) \\$/;"	m
am_qt_test_test_bitcoin_qt_OBJECTS	Makefile	/^am_qt_test_test_bitcoin_qt_OBJECTS = qt\/test\/qt_test_test_bitcoin_qt-compattests.$(OBJEXT) \\$/;"	m
am_test_test_bitcoin_OBJECTS	Makefile	/^am_test_test_bitcoin_OBJECTS = $(am__objects_31) \\$/;"	m
am_test_test_bitcoin_fuzzy_OBJECTS	Makefile	/^am_test_test_bitcoin_fuzzy_OBJECTS = test\/test_test_bitcoin_fuzzy-test_bitcoin_fuzzy.$(OBJEXT)$/;"	m
amount	validation.h	/^    CAmount amount;$/;"	m	class:CScriptCheck
ancestor_score	txmempool.h	/^struct ancestor_score {};$/;"	s
arith_uint256	arith_uint256.h	/^    arith_uint256() {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(uint64_t b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^class arith_uint256 : public base_uint<256> {$/;"	c
assign	prevector.h	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:prevector
assign	prevector.h	/^    void assign(size_type n, const T& val) {$/;"	f	class:prevector
async_handler	torcontrol.cpp	/^    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;$/;"	m	class:TorControlConnection	file:
atoi	utilstrencodings.cpp	/^int atoi(const std::string& str)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const char* psz)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const std::string& str)$/;"	f
auth_cb	torcontrol.cpp	/^void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authchallenge_cb	torcontrol.cpp	/^void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
available	sync.cpp	/^    bool available;$/;"	m	struct:LockData	file:
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
b_conn	torcontrol.cpp	/^    struct bufferevent *b_conn;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::bufferevent	file:
back	prevector.h	/^    T& back() {$/;"	f	class:prevector
back	prevector.h	/^    const T& back() const {$/;"	f	class:prevector
banReason	addrdb.h	/^    uint8_t banReason;$/;"	m	class:CBanEntry
banReasonToString	addrdb.h	/^    std::string banReasonToString()$/;"	f	class:CBanEntry
banmap_t	addrdb.h	/^typedef std::map<CSubNet, CBanEntry> banmap_t;$/;"	t
base	coins.h	/^    CCoinsView *base;$/;"	m	class:CCoinsViewBacked
base	httprpc.cpp	/^    struct event_base* base;$/;"	m	class:HTTPRPCTimerInterface	typeref:struct:HTTPRPCTimerInterface::event_base	file:
base	indirectmap.h	/^    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;$/;"	t	class:indirectmap
base	torcontrol.cpp	/^    struct event_base *base;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::event_base	file:
base	torcontrol.cpp	/^    struct event_base* base;$/;"	m	class:TorController	typeref:struct:TorController::event_base	file:
base	torcontrol.cpp	/^struct event_base *base;$/;"	v	typeref:struct:event_base
base58Prefixes	chainparams.h	/^    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	m	class:CChainParams
base_blob	uint256.cpp	/^base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)$/;"	f	class:base_blob
base_blob	uint256.h	/^    base_blob()$/;"	f	class:base_blob
base_blob	uint256.h	/^class base_blob$/;"	c
base_uint	arith_uint256.cpp	/^base_uint<BITS>::base_uint(const std::string& str)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint()$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(const base_uint& b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(uint64_t b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^class base_uint$/;"	c
batch	dbwrapper.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CDBBatch
begin	indirectmap.h	/^    const_iterator begin() const    { return m.begin(); }$/;"	f	class:indirectmap
begin	indirectmap.h	/^    iterator begin()                { return m.begin(); }$/;"	f	class:indirectmap
begin	key.h	/^    const unsigned char* begin() const { return keydata.data(); }$/;"	f	class:CKey
begin	limitedmap.h	/^    const_iterator begin() const { return map.begin(); }$/;"	f	class:limitedmap
begin	prevector.h	/^    const_iterator begin() const { return const_iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	prevector.h	/^    iterator begin() { return iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	pubkey.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CPubKey
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	streams.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	streams.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_blob
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_blob
bench_bench_bitcoin_CPPFLAGS	Makefile	/^bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)\/bench\/$/;"	m
bench_bench_bitcoin_CXXFLAGS	Makefile	/^bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bench_bench_bitcoin_DEPENDENCIES	Makefile	/^bench_bench_bitcoin_DEPENDENCIES =  \\$/;"	m
bench_bench_bitcoin_LDADD	Makefile	/^bench_bench_bitcoin_LDADD = $(LIBBITCOIN_SERVER) \\$/;"	m
bench_bench_bitcoin_LDFLAGS	Makefile	/^bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bench_bench_bitcoin_LINK	Makefile	/^bench_bench_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bench_bench_bitcoin_OBJECTS	Makefile	/^bench_bench_bitcoin_OBJECTS = $(am_bench_bench_bitcoin_OBJECTS) \\$/;"	m
bench_bench_bitcoin_SOURCES	Makefile	/^bench_bench_bitcoin_SOURCES =  \\$/;"	m
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	validation.cpp	/^    int bit;$/;"	m	class:WarningBitsConditionChecker	file:
bit_is_set	cuckoocache.h	/^    inline bool bit_is_set(uint32_t s) const$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	cuckoocache.h	/^    bit_packed_atomic_flags(uint32_t size)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	cuckoocache.h	/^class bit_packed_atomic_flags$/;"	c	namespace:CuckooCache
bit_set	cuckoocache.h	/^    inline void bit_set(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_unset	cuckoocache.h	/^    inline void bit_unset(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bitcoin_cli_CPPFLAGS	Makefile	/^bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)$/;"	m
bitcoin_cli_CXXFLAGS	Makefile	/^bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_cli_DEPENDENCIES	Makefile	/^bitcoin_cli_DEPENDENCIES = $(LIBBITCOIN_CLI) $(am__DEPENDENCIES_4) \\$/;"	m
bitcoin_cli_LDADD	Makefile	/^bitcoin_cli_LDADD = $(LIBBITCOIN_CLI) $(LIBUNIVALUE) \\$/;"	m
bitcoin_cli_LDFLAGS	Makefile	/^bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_cli_LINK	Makefile	/^bitcoin_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_cli_OBJECTS	Makefile	/^bitcoin_cli_OBJECTS = $(am_bitcoin_cli_OBJECTS)$/;"	m
bitcoin_cli_SOURCES	Makefile	/^bitcoin_cli_SOURCES = bitcoin-cli.cpp $(am__append_5)$/;"	m
bitcoin_tx_CPPFLAGS	Makefile	/^bitcoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoin_tx_CXXFLAGS	Makefile	/^bitcoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_tx_DEPENDENCIES	Makefile	/^bitcoin_tx_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDADD	Makefile	/^bitcoin_tx_LDADD = $(LIBUNIVALUE) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDFLAGS	Makefile	/^bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_tx_LINK	Makefile	/^bitcoin_tx_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_tx_OBJECTS	Makefile	/^bitcoin_tx_OBJECTS = $(am_bitcoin_tx_OBJECTS)$/;"	m
bitcoin_tx_SOURCES	Makefile	/^bitcoin_tx_SOURCES = bitcoin-tx.cpp $(am__append_6)$/;"	m
bitcoind_CPPFLAGS	Makefile	/^bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoind_CXXFLAGS	Makefile	/^bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoind_DEPENDENCIES	Makefile	/^bitcoind_DEPENDENCIES = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoind_LDADD	Makefile	/^bitcoind_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoind_LDFLAGS	Makefile	/^bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoind_LINK	Makefile	/^bitcoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoind_OBJECTS	Makefile	/^bitcoind_OBJECTS = $(am_bitcoind_OBJECTS)$/;"	m
bitcoind_SOURCES	Makefile	/^bitcoind_SOURCES = bitcoind.cpp $(am__append_4)$/;"	m
bits	arith_uint256.cpp	/^unsigned int base_uint<BITS>::bits() const$/;"	f	class:base_uint
block	miner.h	/^    CBlock block;$/;"	m	struct:CBlockTemplate
blockFinished	miner.h	/^    bool blockFinished;$/;"	m	class:BlockAssembler
blockMinFeeRate	miner.h	/^    CFeeRate blockMinFeeRate;$/;"	m	class:BlockAssembler
blockSinceLastRollingFeeBump	txmempool.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CTxMemPool
blockchainID	chain.h	/^    unsigned int blockchainID;$/;"	m	class:CBlockIndex
blockhash	blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
blocksConnected	validation.cpp	/^    std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;$/;"	m	struct:ConnectTrace	file:
bloomflags	bloom.h	/^enum bloomflags$/;"	g
body	bitcoin-cli.cpp	/^    std::string body;$/;"	m	struct:HTTPReply	file:
boost	init.h	/^namespace boost$/;"	n
boost	net.h	/^namespace boost {$/;"	n
boost	util.cpp	/^namespace boost {$/;"	n	file:
boost_unordered_node	memusage.h	/^struct boost_unordered_node : private X$/;"	s	namespace:memusage
boundSockets	httpserver.cpp	/^std::vector<evhttp_bound_socket *> boundSockets;$/;"	v
build	Makefile	/^build = x86_64-pc-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-pc-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = pc$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
cache	coins.h	/^    CCoinsViewCache& cache;$/;"	m	class:CCoinsModifier
cache	cuckoocache.h	/^    cache() : table(), size(), collection_flags(0), epoch_flags(),$/;"	f	class:CuckooCache::cache
cache	cuckoocache.h	/^class cache$/;"	c	namespace:CuckooCache
cacheCoins	coins.h	/^    mutable CCoinsMap cacheCoins;$/;"	m	class:CCoinsViewCache
cacheMap	txmempool.h	/^    typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;$/;"	t	class:CTxMemPool
cacheStore	validation.h	/^    bool cacheStore;$/;"	m	class:CScriptCheck
cachedCoinUsage	coins.h	/^    size_t cachedCoinUsage; \/\/ Cached memory usage of the CCoins object before modification$/;"	m	class:CCoinsModifier
cachedCoinsUsage	coins.h	/^    mutable size_t cachedCoinsUsage;$/;"	m	class:CCoinsViewCache
cachedInnerUsage	txmempool.h	/^    uint64_t cachedInnerUsage; \/\/!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)$/;"	m	class:CTxMemPool
caches	versionbits.h	/^    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
capacity	prevector.h	/^            size_type capacity;$/;"	m	struct:prevector::direct_or_indirect::__anon9
capacity	prevector.h	/^    size_t capacity() const {$/;"	f	class:prevector
cbegin	indirectmap.h	/^    const_iterator cbegin() const   { return m.cbegin(); }$/;"	f	class:indirectmap
cend	indirectmap.h	/^    const_iterator cend() const     { return m.cend(); }$/;"	f	class:indirectmap
chRejectCode	net_processing.cpp	/^    unsigned char chRejectCode;$/;"	m	struct:__anon8::CBlockReject	file:
chainActive	validation.cpp	/^CChain chainActive;$/;"	v
chainTxData	chainparams.h	/^    ChainTxData chainTxData;$/;"	m	class:CChainParams
chainZero	validation.cpp	/^CChain chainZero;   \/\/Branch of the shard 0 that contain the informations on the number of shards $/;"	v
chaincode	key.h	/^    ChainCode chaincode;$/;"	m	struct:CExtKey
chaincode	pubkey.h	/^    ChainCode chaincode;$/;"	m	struct:CExtPubKey
chainparams	miner.h	/^    const CChainParams& chainparams;$/;"	m	class:BlockAssembler
change_capacity	prevector.h	/^    void change_capacity(size_type new_capacity) {$/;"	f	class:prevector
check	txmempool.cpp	/^void CTxMemPool::check(const CCoinsViewCache *pcoins) const$/;"	f	class:CTxMemPool
checkPow	ntunodeid.h	/^    bool checkPow()$/;"	f	class:AddrPow
checkPow	ntunodeid.h	/^    bool checkPow(int height)   \/\/check PoW for the given height$/;"	f	class:AddrPow
checkpointData	chainparams.h	/^    CCheckpointData checkpointData;$/;"	m	class:CChainParams
children	txmempool.h	/^        setEntries children;$/;"	m	struct:CTxMemPool::TxLinks
class_type	memusage.h	/^    void* class_type;$/;"	m	struct:memusage::stl_shared_counter
cleanSubVer	net.h	/^    std::string cleanSubVer;$/;"	m	class:CNodeStats
cleanSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
clear	bloom.cpp	/^void CBloomFilter::clear()$/;"	f	class:CBloomFilter
clear	indirectmap.h	/^    void clear()                    { m.clear(); }$/;"	f	class:indirectmap
clear	prevector.h	/^    void clear() {$/;"	f	class:prevector
clear	streams.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	txmempool.cpp	/^void CTxMemPool::clear()$/;"	f	class:CTxMemPool
clientInterface	net.h	/^    CClientUIInterface* clientInterface;$/;"	m	class:CConnman
clientNonce	torcontrol.cpp	/^    std::vector<uint8_t> clientNonce;$/;"	m	class:TorController	file:
code	torcontrol.cpp	/^    int code;$/;"	m	class:TorControlReply	file:
coins	coins.h	/^    CCoins coins; \/\/ The actual cached data.$/;"	m	struct:CCoinsCacheEntry
collection_flags	cuckoocache.h	/^    mutable bit_packed_atomic_flags collection_flags;$/;"	m	class:CuckooCache::cache
color	memusage.h	/^    int color;$/;"	m	struct:memusage::stl_tree_node
command	net.h	/^    std::string command;$/;"	m	struct:CSerializedNetMsg
complete	net.h	/^    bool complete() const$/;"	f	class:CNetMessage
compute_hashes	cuckoocache.h	/^    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const$/;"	f	class:CuckooCache::cache
cond	httpserver.cpp	/^    std::condition_variable cond;$/;"	m	class:WorkQueue	file:
cond	threadinterrupt.h	/^    std::condition_variable cond;$/;"	m	class:CThreadInterrupt
condMaster	checkqueue.h	/^    boost::condition_variable condMaster;$/;"	m	class:CCheckQueue
condMsgProc	net.h	/^    std::condition_variable condMsgProc;$/;"	m	class:CConnman
condWorker	checkqueue.h	/^    boost::condition_variable condWorker;$/;"	m	class:CCheckQueue
cond_var	sync.cpp	/^CThreadInterrupt cond_var;$/;"	v
condition	sync.h	/^    boost::condition_variable condition;$/;"	m	class:CSemaphore
condvar_GenesisWait	init.cpp	/^static CConditionVariable condvar_GenesisWait;$/;"	v	file:
conflictedTxs	validation.cpp	/^    std::vector<CTransactionRef> conflictedTxs;$/;"	m	class:MemPoolConflictRemovalTracker	file:
conn	torcontrol.cpp	/^    TorControlConnection conn;$/;"	m	class:TorController	file:
connected	torcontrol.cpp	/^    boost::function<void(TorControlConnection&)> connected;$/;"	m	class:TorControlConnection	file:
connected_cb	torcontrol.cpp	/^void TorController::connected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
connman	net_processing.h	/^    CConnman* connman;$/;"	m	class:PeerLogicValidation
consensus	chainparams.h	/^    Consensus::Params consensus;$/;"	m	class:CChainParams
const_iterator	indirectmap.h	/^    typedef typename base::const_iterator const_iterator;$/;"	t	class:indirectmap
const_iterator	limitedmap.h	/^    typedef typename std::map<K, V>::const_iterator const_iterator;$/;"	t	class:limitedmap
const_iterator	prevector.h	/^        const_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_iterator
const_iterator	prevector.h	/^        const_iterator(iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_iterator
const_iterator	prevector.h	/^    class const_iterator {$/;"	c	class:prevector
const_iterator	streams.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	prevector.h	/^    typedef const value_type* const_pointer;$/;"	t	class:prevector
const_reference	prevector.h	/^    typedef const value_type& const_reference;$/;"	t	class:prevector
const_reference	streams.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
const_reverse_iterator	prevector.h	/^        const_reverse_iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	prevector.h	/^        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	prevector.h	/^    class const_reverse_iterator {$/;"	c	class:prevector
contains	bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CRollingBloomFilter
contains	bloom.cpp	/^bool CRollingBloomFilter::contains(const uint256& hash) const$/;"	f	class:CRollingBloomFilter
contains	cuckoocache.h	/^    inline bool contains(const Element& e, const bool erase) const$/;"	f	class:CuckooCache::cache
convertSeed6	net.cpp	/^static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)$/;"	f	file:
convertToInt	tinyformat.h	/^struct convertToInt$/;"	s	namespace:tinyformat::detail
convertToInt	tinyformat.h	/^struct convertToInt<T,true>$/;"	s	namespace:tinyformat::detail
cookie	torcontrol.cpp	/^    std::vector<uint8_t> cookie;$/;"	m	class:TorController	file:
copyStats	net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
count	hash.h	/^    int count;$/;"	m	class:CSipHasher
count	indirectmap.h	/^    size_type count(const K& key) const             { return m.count(&key); }$/;"	f	class:indirectmap
count	limitedmap.h	/^    size_type count(const key_type& k) const { return map.count(k); }$/;"	f	class:limitedmap
crypto_libbitcoin_crypto_a_AR	Makefile	/^crypto_libbitcoin_crypto_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_a_CPPFLAGS	Makefile	/^crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)$/;"	m
crypto_libbitcoin_crypto_a_CXXFLAGS	Makefile	/^crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
crypto_libbitcoin_crypto_a_LIBADD	Makefile	/^crypto_libbitcoin_crypto_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_a_OBJECTS	Makefile	/^crypto_libbitcoin_crypto_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_a_SOURCES	Makefile	/^crypto_libbitcoin_crypto_a_SOURCES = \\$/;"	m
cs	addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	httpserver.cpp	/^    std::mutex cs;$/;"	m	class:WorkQueue	file:
cs	txmempool.h	/^    mutable CCriticalSection cs;$/;"	m	class:CTxMemPool
csBestBlock	validation.cpp	/^CWaitableCriticalSection csBestBlock;$/;"	v
csPathCached	util.cpp	/^static CCriticalSection csPathCached;$/;"	v	file:
cs_AddrPow	ntunodeid.h	/^    mutable CCriticalSection cs_AddrPow;$/;"	m	class:AddrPow
cs_GenesisWait	init.cpp	/^static boost::mutex cs_GenesisWait;$/;"	v	file:
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_LastBlockFile	validation.cpp	/^    CCriticalSection cs_LastBlockFile;$/;"	m	namespace:__anon17	file:
cs_SubVer	net.h	/^    CCriticalSection cs_SubVer; \/\/ used for both cleanSubVer and strSubVer$/;"	m	class:CNode
cs_addrLocal	net.h	/^    mutable CCriticalSection cs_addrLocal;$/;"	m	class:CNode
cs_addrName	net.h	/^    mutable CCriticalSection cs_addrName;$/;"	m	class:CNode
cs_args	util.cpp	/^CCriticalSection cs_args;$/;"	v
cs_feeFilter	net.h	/^    CCriticalSection cs_feeFilter;$/;"	m	class:CNode
cs_filter	net.h	/^    CCriticalSection cs_filter;$/;"	m	class:CNode
cs_hSocket	net.h	/^    CCriticalSection cs_hSocket;$/;"	m	class:CNode
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	net_processing.cpp	/^void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	validation.cpp	/^CCriticalSection cs_main;$/;"	v
cs_mapLocalHost	net.cpp	/^CCriticalSection cs_mapLocalHost;$/;"	v
cs_most_recent_block	net_processing.cpp	/^static CCriticalSection cs_most_recent_block;$/;"	v	file:
cs_nBlockSequenceId	validation.cpp	/^    CCriticalSection cs_nBlockSequenceId;$/;"	m	namespace:__anon17	file:
cs_nTimeOffset	timedata.cpp	/^static CCriticalSection cs_nTimeOffset;$/;"	v	file:
cs_proxyInfos	netbase.cpp	/^static CCriticalSection cs_proxyInfos;$/;"	v	file:
cs_sendProcessing	net.h	/^    CCriticalSection cs_sendProcessing;$/;"	m	class:CNode
cs_setBanned	net.h	/^    CCriticalSection cs_setBanned;$/;"	m	class:CConnman
cs_totalBytesRecv	net.h	/^    CCriticalSection cs_totalBytesRecv;$/;"	m	class:CConnman
cs_totalBytesSent	net.h	/^    CCriticalSection cs_totalBytesSent;$/;"	m	class:CConnman
cs_vAddedNodes	net.h	/^    CCriticalSection cs_vAddedNodes;$/;"	m	class:CConnman
cs_vNodes	net.h	/^    mutable CCriticalSection cs_vNodes;$/;"	m	class:CConnman
cs_vOneShots	net.h	/^    CCriticalSection cs_vOneShots;$/;"	m	class:CConnman
cs_vProcessMsg	net.h	/^    CCriticalSection cs_vProcessMsg;$/;"	m	class:CNode
cs_vRecv	net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_vWhitelistedRange	net.h	/^    CCriticalSection cs_vWhitelistedRange;$/;"	m	class:CConnman
cs_warnings	warnings.cpp	/^CCriticalSection cs_warnings;$/;"	v
ctx	hash.h	/^    CHash256 ctx;$/;"	m	class:CHashWriter
cvBlockChange	validation.cpp	/^CConditionVariable cvBlockChange;$/;"	v
dMinPing	net.h	/^    double dMinPing;$/;"	m	class:CNodeStats
dPingTime	net.h	/^    double dPingTime;$/;"	m	class:CNodeStats
dPingWait	net.h	/^    double dPingWait;$/;"	m	class:CNodeStats
dTxRate	chainparams.h	/^    double dTxRate;$/;"	m	struct:ChainTxData
data	bloom.h	/^    std::vector<uint64_t> data;$/;"	m	class:CRollingBloomFilter
data	net.h	/^    std::vector<unsigned char> data;$/;"	m	struct:CSerializedNetMsg
data	prevector.h	/^    const value_type* data() const {$/;"	f	class:prevector
data	prevector.h	/^    value_type* data() {$/;"	f	class:prevector
data	streams.h	/^    const value_type* data() const                   { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	streams.h	/^    value_type* data()                               { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	uint256.h	/^    uint8_t data[WIDTH];$/;"	m	class:base_blob
data_hash	net.h	/^    mutable uint256 data_hash;$/;"	m	class:CNetMessage
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
db	txdb.h	/^    CDBWrapper db;$/;"	m	class:CCoinsViewDB
dbwrapper_error	dbwrapper.h	/^    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}$/;"	f	class:dbwrapper_error
dbwrapper_error	dbwrapper.h	/^class dbwrapper_error : public std::runtime_error$/;"	c
dbwrapper_private	dbwrapper.cpp	/^namespace dbwrapper_private {$/;"	n	file:
dbwrapper_private	dbwrapper.h	/^namespace dbwrapper_private {$/;"	n
dd_mutex	sync.cpp	/^    boost::mutex dd_mutex;$/;"	m	struct:LockData	file:
debugPrintInitFlag	util.cpp	/^static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;$/;"	v	file:
deleteWhenTriggered	httpserver.h	/^    bool deleteWhenTriggered;$/;"	m	class:HTTPEvent
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depth_limit	cuckoocache.h	/^    uint8_t depth_limit;$/;"	m	class:CuckooCache::cache
descendant_score	txmempool.h	/^struct descendant_score {};$/;"	s
deserialize_type	serialize.h	/^struct deserialize_type {};$/;"	s
detail	tinyformat.h	/^namespace detail {$/;"	n	namespace:tinyformat
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_reverse_iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::reverse_iterator
difference_type	prevector.h	/^    typedef Diff difference_type;$/;"	t	class:prevector
difference_type	streams.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
direct	prevector.h	/^        char direct[sizeof(T) * N];$/;"	m	union:prevector::direct_or_indirect
direct_or_indirect	prevector.h	/^    union direct_or_indirect {$/;"	u	class:prevector
direct_ptr	prevector.h	/^    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }$/;"	f	class:prevector
direct_ptr	prevector.h	/^    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }$/;"	f	class:prevector
disconnected	torcontrol.cpp	/^    boost::function<void(TorControlConnection&)> disconnected;$/;"	m	class:TorControlConnection	file:
disconnected_cb	torcontrol.cpp	/^void TorController::disconnected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dummy	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	m	struct:tinyformat::detail::is_convertible::fail
dummy	tinyformat.h	/^        struct succeed { char dummy; };$/;"	m	struct:tinyformat::detail::is_convertible::succeed
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
ec_privkey_export_der	key.cpp	/^static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {$/;"	f	file:
ec_privkey_import_der	key.cpp	/^static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f	file:
ecdsa_signature_parse_der_lax	pubkey.cpp	/^static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f	file:
empty	indirectmap.h	/^    bool empty() const              { return m.empty(); }$/;"	f	class:indirectmap
empty	limitedmap.h	/^    bool empty() const { return map.empty(); }$/;"	f	class:limitedmap
empty	prevector.h	/^    bool empty() const {$/;"	f	class:prevector
empty	streams.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
end	indirectmap.h	/^    const_iterator end() const      { return m.end(); }$/;"	f	class:indirectmap
end	indirectmap.h	/^    iterator end()                  { return m.end(); }$/;"	f	class:indirectmap
end	key.h	/^    const unsigned char* end() const { return keydata.data() + size(); }$/;"	f	class:CKey
end	limitedmap.h	/^    const_iterator end() const { return map.end(); }$/;"	f	class:limitedmap
end	prevector.h	/^    const_iterator end() const { return const_iterator(item_ptr(size())); }$/;"	f	class:prevector
end	prevector.h	/^    iterator end() { return iterator(item_ptr(size())); }$/;"	f	class:prevector
end	pubkey.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CPubKey
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	streams.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	streams.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_blob
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_blob
entryHeight	txmempool.h	/^    unsigned int entryHeight;  \/\/!< Chain height when entering the mempool$/;"	m	class:CTxMemPoolEntry
entryPriority	txmempool.h	/^    double entryPriority;      \/\/!< Priority when entering the mempool$/;"	m	class:CTxMemPoolEntry
entry_time	txmempool.h	/^struct entry_time {};$/;"	s
eof	streams.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
eof	streams.h	/^    bool eof() const {$/;"	f	class:CBufferedFile
epoch_check	cuckoocache.h	/^    void epoch_check()$/;"	f	class:CuckooCache::cache
epoch_flags	cuckoocache.h	/^    mutable std::vector<bool> epoch_flags;$/;"	m	class:CuckooCache::cache
epoch_heuristic_counter	cuckoocache.h	/^    uint32_t epoch_heuristic_counter;$/;"	m	class:CuckooCache::cache
epoch_size	cuckoocache.h	/^    uint32_t epoch_size;$/;"	m	class:CuckooCache::cache
erase	indirectmap.h	/^    size_type erase(const K& key)                   { return m.erase(&key); }$/;"	f	class:indirectmap
erase	limitedmap.h	/^    void erase(const key_type& k)$/;"	f	class:limitedmap
erase	prevector.h	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:prevector
erase	prevector.h	/^    iterator erase(iterator pos) {$/;"	f	class:prevector
erase	streams.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	streams.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
error	bitcoin-cli.cpp	/^    int error;$/;"	m	struct:HTTPReply	file:
error	util.h	/^bool error(const char* fmt, const Args&... args)$/;"	f
error	validation.h	/^    ScriptError error;$/;"	m	class:CScriptCheck
estimateFee	txmempool.cpp	/^CFeeRate CTxMemPool::estimateFee(int nBlocks) const$/;"	f	class:CTxMemPool
estimatePriority	txmempool.cpp	/^double CTxMemPool::estimatePriority(int nBlocks) const$/;"	f	class:CTxMemPool
estimateSmartFee	txmempool.cpp	/^CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const$/;"	f	class:CTxMemPool
estimateSmartPriority	txmempool.cpp	/^double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const$/;"	f	class:CTxMemPool
ev	httprpc.cpp	/^    HTTPEvent ev;$/;"	m	class:HTTPRPCTimer	file:
ev	httpserver.h	/^    struct event* ev;$/;"	m	class:HTTPEvent	typeref:struct:HTTPEvent::event
eventBase	httpserver.cpp	/^static struct event_base* eventBase = 0;$/;"	v	typeref:struct:event_base	file:
eventHTTP	httpserver.cpp	/^struct evhttp* eventHTTP = 0;$/;"	v	typeref:struct:evhttp
eventcb	torcontrol.cpp	/^void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)$/;"	f	class:TorControlConnection
exactMatch	httpserver.cpp	/^    bool exactMatch;$/;"	m	struct:HTTPPathHandler	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exists	txmempool.h	/^    bool exists(uint256 hash) const$/;"	f	class:CTxMemPool
extra_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
fAddnode	net.h	/^    bool fAddnode;$/;"	m	class:CNode
fAddnode	net.h	/^    bool fAddnode;$/;"	m	class:CNodeStats
fAddressesInitialized	net.h	/^    bool fAddressesInitialized;$/;"	m	class:CConnman
fAllOk	checkqueue.h	/^    bool fAllOk;$/;"	m	class:CCheckQueue
fBad	merkleblock.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fBloomFilter	net.cpp	/^    bool fBloomFilter;$/;"	m	struct:NodeEvictionCandidate	file:
fCheckBlockIndex	validation.cpp	/^bool fCheckBlockIndex = false;$/;"	v
fCheckForPruning	validation.cpp	/^    bool fCheckForPruning = false;$/;"	m	namespace:__anon17	file:
fCheckpointsEnabled	validation.cpp	/^bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;$/;"	v
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fCoinBase	coins.h	/^    bool fCoinBase;$/;"	m	class:CCoins
fCoinBase	undo.h	/^    bool fCoinBase;       \/\/ if the outpoint was the last unspent: whether it belonged to a coinbase$/;"	m	class:CTxInUndo
fCompressed	key.h	/^    bool fCompressed;$/;"	m	class:CKey
fConnected	net.h	/^    bool fConnected;$/;"	m	struct:AddedNodeInfo
fCreateBlank	bitcoin-tx.cpp	/^static bool fCreateBlank;$/;"	v	file:
fCurrentlyConnected	net_processing.cpp	/^    bool fCurrentlyConnected;$/;"	m	struct:__anon8::CNodeState	file:
fDebug	util.cpp	/^bool fDebug = false;$/;"	v
fDefaultConsistencyChecks	chainparams.h	/^    bool fDefaultConsistencyChecks;$/;"	m	class:CChainParams
fDisconnect	net.h	/^    std::atomic_bool fDisconnect;$/;"	m	class:CNode
fDiscover	net.cpp	/^bool fDiscover = true;$/;"	v
fDone	checkqueue.h	/^    bool fDone;$/;"	m	class:CCheckQueueControl
fEnableReplacement	validation.cpp	/^bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;$/;"	v
fFeeEstimatesInitialized	init.cpp	/^bool fFeeEstimatesInitialized = false;$/;"	v
fFeeler	net.h	/^    bool fFeeler; \/\/ If true this node is being used as a short lived feeler.$/;"	m	class:CNode
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHaveGenesis	init.cpp	/^static bool fHaveGenesis = false;$/;"	v	file:
fHaveGrant	sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHavePruned	validation.cpp	/^bool fHavePruned = false;$/;"	v
fHaveWitness	net_processing.cpp	/^    bool fHaveWitness;$/;"	m	struct:__anon8::CNodeState	file:
fInTried	addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fInbound	net.h	/^    bool fInbound;$/;"	m	struct:AddedNodeInfo
fInbound	net.h	/^    const bool fInbound;$/;"	m	class:CNode
fIncludeWitness	miner.h	/^    bool fIncludeWitness;$/;"	m	class:BlockAssembler
fIsBareMultisigStd	validation.cpp	/^bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;$/;"	v
fLargeWorkForkFound	warnings.cpp	/^bool fLargeWorkForkFound = false;$/;"	v
fLargeWorkInvalidChainFound	warnings.cpp	/^bool fLargeWorkInvalidChainFound = false;$/;"	v
fListen	net.cpp	/^bool fListen = true;$/;"	v
fLogIPs	util.cpp	/^bool fLogIPs = DEFAULT_LOGIPS;$/;"	v
fLogTimeMicros	util.cpp	/^bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;$/;"	v
fLogTimestamps	util.cpp	/^bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;$/;"	v
fMineBlocksOnDemand	chainparams.h	/^    bool fMineBlocksOnDemand;$/;"	m	class:CChainParams
fMiningRequiresPeers	chainparams.h	/^    bool fMiningRequiresPeers;$/;"	m	class:CChainParams
fMsgProcWake	net.h	/^    bool fMsgProcWake;$/;"	m	class:CConnman
fNameLookup	netbase.cpp	/^bool fNameLookup = DEFAULT_NAME_LOOKUP;$/;"	v
fNeedSizeAccounting	miner.h	/^    bool fNeedSizeAccounting;$/;"	m	class:BlockAssembler
fNetworkActive	net.h	/^    std::atomic<bool> fNetworkActive;$/;"	m	class:CConnman
fNew	ntunodeid.h	/^    bool fNew;          \/\/new addr, should refresh the group number$/;"	m	class:AddrPow
fOneShot	net.h	/^    bool fOneShot;$/;"	m	class:CNode
fPauseRecv	net.h	/^    std::atomic_bool fPauseRecv;$/;"	m	class:CNode
fPauseSend	net.h	/^    std::atomic_bool fPauseSend;$/;"	m	class:CNode
fPingQueued	net.h	/^    std::atomic<bool> fPingQueued;$/;"	m	class:CNode
fPreferHeaderAndIDs	net_processing.cpp	/^    bool fPreferHeaderAndIDs;$/;"	m	struct:__anon8::CNodeState	file:
fPreferHeaders	net_processing.cpp	/^    bool fPreferHeaders;$/;"	m	struct:__anon8::CNodeState	file:
fPreferredDownload	net_processing.cpp	/^    bool fPreferredDownload;$/;"	m	struct:__anon8::CNodeState	file:
fPrintToConsole	util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugLog	util.cpp	/^bool fPrintToDebugLog = true;$/;"	v
fProvidesHeaderAndIDs	net_processing.cpp	/^    bool fProvidesHeaderAndIDs;$/;"	m	struct:__anon8::CNodeState	file:
fPruneMode	validation.cpp	/^bool fPruneMode = false;$/;"	v
fQuit	checkqueue.h	/^    bool fQuit;$/;"	m	class:CCheckQueue
fReindex	validation.cpp	/^bool fReindex = false;$/;"	v
fRelayTxes	net.cpp	/^    bool fRelayTxes;$/;"	m	struct:NodeEvictionCandidate	file:
fRelayTxes	net.cpp	/^bool fRelayTxes = true;$/;"	v
fRelayTxes	net.h	/^    bool fRelayTxes; \/\/protected by cs_filter$/;"	m	class:CNode
fRelayTxes	net.h	/^    bool fRelayTxes;$/;"	m	class:CNodeStats
fRelevantServices	net.cpp	/^    bool fRelevantServices;$/;"	m	struct:NodeEvictionCandidate	file:
fRequireStandard	chainparams.h	/^    bool fRequireStandard;$/;"	m	class:CChainParams
fRequireStandard	validation.cpp	/^bool fRequireStandard = true;$/;"	v
fSendMempool	net.h	/^    bool fSendMempool;$/;"	m	class:CNode
fSentAddr	net.h	/^    bool fSentAddr;$/;"	m	class:CNode
fShouldBan	net_processing.cpp	/^    bool fShouldBan;$/;"	m	struct:__anon8::CNodeState	file:
fSuccessfullyConnected	net.h	/^    std::atomic_bool fSuccessfullyConnected;$/;"	m	class:CNode
fSupportsDesiredCmpctVersion	net_processing.cpp	/^    bool fSupportsDesiredCmpctVersion;$/;"	m	struct:__anon8::CNodeState	file:
fSyncStarted	net_processing.cpp	/^    bool fSyncStarted;$/;"	m	struct:__anon8::CNodeState	file:
fTry	sync.cpp	/^    bool fTry;$/;"	m	struct:CLockLocation	file:
fTxIndex	validation.cpp	/^bool fTxIndex = false;$/;"	v
fValid	key.h	/^    bool fValid;$/;"	m	class:CKey
fValidatedHeaders	net_processing.cpp	/^        bool fValidatedHeaders;                                  \/\/!< Whether this block has validated headers at the time of request.$/;"	m	struct:__anon7::QueuedBlock	file:
fWantsCmpctWitness	net_processing.cpp	/^    bool fWantsCmpctWitness;$/;"	m	struct:__anon8::CNodeState	file:
fWhitelisted	net.h	/^    bool fWhitelisted; \/\/ This peer can bypass DoS banning.$/;"	m	class:CNode
fWhitelisted	net.h	/^    bool fWhitelisted;$/;"	m	class:CNodeStats
fail	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	s	struct:tinyformat::detail::is_convertible
fclose	streams.h	/^    void fclose()$/;"	f	class:CAutoFile
fclose	streams.h	/^    void fclose()$/;"	f	class:CBufferedFile
feeDelta	txmempool.h	/^    int64_t feeDelta;          \/\/!< Used for determining the priority of the transaction for mining in a block$/;"	m	class:CTxMemPoolEntry
feeDelta	txmempool.h	/^    int64_t feeDelta;$/;"	m	struct:update_fee_delta
feeRate	txmempool.h	/^    CFeeRate feeRate;$/;"	m	struct:TxMempoolInfo
file	streams.h	/^    FILE* file;	$/;"	m	class:CAutoFile
fileout	util.cpp	/^static FILE* fileout = NULL;$/;"	v	file:
filterInventoryKnown	net.h	/^    CRollingBloomFilter filterInventoryKnown;$/;"	m	class:CNode
find	indirectmap.h	/^    const_iterator find(const K& key) const         { return m.find(&key); }$/;"	f	class:indirectmap
find	indirectmap.h	/^    iterator find(const K& key)                     { return m.find(&key); }$/;"	f	class:indirectmap
find	limitedmap.h	/^    const_iterator find(const key_type& k) const { return map.find(k); }$/;"	f	class:limitedmap
findSighashFlags	bitcoin-tx.cpp	/^static bool findSighashFlags(int& flags, const std::string& flagStr)$/;"	f	file:
flag	threadinterrupt.h	/^    std::atomic<bool> flag;$/;"	m	class:CThreadInterrupt
flagInterruptMsgProc	net.h	/^    std::atomic<bool> flagInterruptMsgProc;$/;"	m	class:CConnman
flagStr	bitcoin-tx.cpp	/^    const char *flagStr;$/;"	m	struct:__anon3	file:
flags	bitcoin-tx.cpp	/^    int flags;$/;"	m	struct:__anon3	file:
flags	coins.h	/^    unsigned char flags;$/;"	m	struct:CCoinsCacheEntry
foreach	txmempool.h	23;"	d
format	tinyformat.h	/^        void format(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
format	tinyformat.h	/^inline std::string format(const char* fmt)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^inline void format(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^std::string format(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^std::string format(const std::string &fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^void format(std::ostream& out, const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
formatImpl	tinyformat.h	/^        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
formatImpl	tinyformat.h	/^inline void formatImpl(std::ostream& out, const char* fmt,$/;"	f	namespace:tinyformat::detail
formatTruncated	tinyformat.h	/^inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)$/;"	f	namespace:tinyformat::detail
formatValue	tinyformat.h	/^inline void formatValue(std::ostream& out, const char* \/*fmtBegin*\/,$/;"	f	namespace:tinyformat
formatValueAsType	tinyformat.h	/^struct formatValueAsType$/;"	s	namespace:tinyformat::detail
formatValueAsType	tinyformat.h	/^struct formatValueAsType<T,fmtT,true>$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround<T,true>$/;"	s	namespace:tinyformat::detail
fromPeer	net_processing.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
fromvch	ntunodeid.h	/^    void fromvch(std::vector<unsigned char> invch)$/;"	f	class:AddrPow
front	prevector.h	/^    T& front() {$/;"	f	class:prevector
front	prevector.h	/^    const T& front() const {$/;"	f	class:prevector
func	httpserver.cpp	/^    HTTPRequestHandler func;$/;"	m	class:HTTPWorkItem	file:
g_connman	init.cpp	/^std::unique_ptr<CConnman> g_connman;$/;"	v
g_signals	net.cpp	/^static CNodeSignals g_signals;$/;"	v	file:
g_signals	validationinterface.cpp	/^static CMainSignals g_signals;$/;"	v	file:
gbt_force	versionbits.h	/^    bool gbt_force;$/;"	m	struct:BIP9DeploymentInfo
genAddrPow	ntunodeid.h	/^    bool genAddrPow()$/;"	f	class:AddrPow
genesis	chainparams.h	/^    CBlock genesis;$/;"	m	class:CChainParams
get	txmempool.cpp	/^CTransactionRef CTxMemPool::get(const uint256& hash) const$/;"	f	class:CTxMemPool
getAllNetMessageTypes	protocol.cpp	/^const std::vector<std::string> &getAllNetMessageTypes()$/;"	f
getGroup	ntunodeid.h	/^    unsigned int getGroup(const unsigned int numberOfGroups)$/;"	f	class:AddrPow
getGroupFromUint256	ntunodeid.cpp	/^unsigned int getGroupFromUint256(uint256 hash, const unsigned int numberOfGroups)$/;"	f
getQueueInfo	scheduler.cpp	/^size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,$/;"	f	class:CScheduler
getdouble	arith_uint256.cpp	/^double base_uint<BITS>::getdouble() const$/;"	f	class:base_uint
getvch	ntunodeid.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:AddrPow
globalVerifyHandle	bitcoin-tx.cpp	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	class:Secp256k1Init	file:
globalVerifyHandle	init.cpp	/^static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;$/;"	v	file:
grantOutbound	net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
group	ntunodeid.h	/^    unsigned int group; \/\/group number$/;"	m	class:AddrPow
hSocket	net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
handler	httpserver.cpp	/^    HTTPRequestHandler handler;$/;"	m	struct:HTTPPathHandler	file:
handler	httpserver.h	/^    std::function<void(void)> handler;$/;"	m	class:HTTPEvent
handler	rest.cpp	/^    bool (*handler)(HTTPRequest* req, const std::string& strReq);$/;"	m	struct:__anon13	file:
hasModifier	coins.h	/^    bool hasModifier;$/;"	m	class:CCoinsViewCache
hash	net_processing.cpp	/^        uint256 hash;$/;"	m	struct:__anon7::QueuedBlock	file:
hash	protocol.h	/^    uint256 hash;$/;"	m	class:CInv
hashAssumeValid	validation.cpp	/^uint256 hashAssumeValid;$/;"	v
hashBlock	coins.h	/^    mutable uint256 hashBlock;$/;"	m	class:CCoinsViewCache
hashBlock	coins.h	/^    uint256 hashBlock;$/;"	m	class:CCoinsViewCursor
hashBlock	net_processing.cpp	/^    uint256 hashBlock;$/;"	m	struct:__anon8::CBlockReject	file:
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastUnknownBlock	net_processing.cpp	/^    uint256 hashLastUnknownBlock;$/;"	m	struct:__anon8::CNodeState	file:
hashMerkleRoot	chain.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashMerkleRoot2	chain.h	/^    uint256 hashMerkleRoot2;        \/\/2nd merkle root hash (future implementation, Steven's EPoW)$/;"	m	class:CBlockIndex
hashPrev	chain.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashRecentRejectsChainTip	net_processing.cpp	/^    uint256 hashRecentRejectsChainTip;$/;"	m	namespace:__anon7	file:
hash_function	cuckoocache.h	/^    const Hash hash_function;$/;"	m	class:CuckooCache::cache
hash_mask	cuckoocache.h	/^    uint32_t hash_mask;$/;"	m	class:CuckooCache::cache
hasher	net.h	/^    mutable CHash256 hasher;$/;"	m	class:CNetMessage
hdr	net.h	/^    CMessageHeader hdr;             \/\/ complete header$/;"	m	class:CNetMessage
hdrbuf	net.h	/^    CDataStream hdrbuf;             \/\/ partially received header$/;"	m	class:CNetMessage
header	blockencodings.h	/^    CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	blockencodings.h	/^    CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	merkleblock.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
height	txmempool.h	/^    int height;$/;"	m	struct:LockPoints
host	Makefile	/^host = x86_64-pc-linux-gnu$/;"	m
host	chainparams.h	/^    std::string name, host;$/;"	m	struct:CDNSSeedData
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-pc-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = pc$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
httpRPCTimerInterface	httprpc.cpp	/^static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;$/;"	v	file:
http_error_cb	bitcoin-cli.cpp	/^static void http_error_cb(enum evhttp_request_error err, void *ctx)$/;"	f	file:
http_errorstring	bitcoin-cli.cpp	/^const char *http_errorstring(int code)$/;"	f
http_reject_request_cb	httpserver.cpp	/^static void http_reject_request_cb(struct evhttp_request* req, void*)$/;"	f	file:
http_request_cb	httpserver.cpp	/^static void http_request_cb(struct evhttp_request* req, void* arg)$/;"	f	file:
http_request_done	bitcoin-cli.cpp	/^static void http_request_done(struct evhttp_request *req, void *ctx)$/;"	f	file:
httpevent_callback_fn	httpserver.cpp	/^static void httpevent_callback_fn(evutil_socket_t, short, void* data)$/;"	f	file:
i64tostr	utilstrencodings.cpp	/^std::string i64tostr(int64_t n)$/;"	f
id	net.cpp	/^    NodeId id;$/;"	m	struct:NodeEvictionCandidate	file:
id	net.h	/^    const NodeId id;$/;"	m	class:CNode
id	versionbits.cpp	/^    const Consensus::DeploymentPos id;$/;"	m	class:__anon19::VersionBitsConditionChecker	file:
ignore	streams.h	/^    void ignore(int nSize)$/;"	f	class:CDataStream
ignore	streams.h	/^    void ignore(size_t nSize)$/;"	f	class:CAutoFile
inBlock	miner.h	/^    CTxMemPool::setEntries inBlock;$/;"	m	class:BlockAssembler
inChainInputValue	txmempool.h	/^    CAmount inChainInputValue; \/\/!< Sum of all txin values that are already in blockchain$/;"	m	class:CTxMemPoolEntry
in_avail	streams.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
in_data	net.h	/^    bool in_data;                   \/\/ parsing header (false) or data (true)$/;"	m	class:CNetMessage
include_HEADERS	Makefile	/^include_HEADERS = script\/bitcoinconsensus.h$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
index	blockencodings.h	/^    uint16_t index;$/;"	m	struct:PrefilledTransaction
indexed_modified_transaction_set	miner.h	/^> indexed_modified_transaction_set;$/;"	t
indexed_transaction_set	txmempool.h	/^    > indexed_transaction_set;$/;"	t	class:CTxMemPool
indexes	blockencodings.h	/^    std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
indirect	prevector.h	/^            char* indirect;$/;"	m	struct:prevector::direct_or_indirect::__anon9
indirect_ptr	prevector.h	/^    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirect_ptr	prevector.h	/^    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirectmap	indirectmap.h	/^class indirectmap {$/;"	c
info	txmempool.cpp	/^TxMempoolInfo CTxMemPool::info(const uint256& hash) const$/;"	f	class:CTxMemPool
infoAll	txmempool.cpp	/^std::vector<TxMempoolInfo> CTxMemPool::infoAll() const$/;"	f	class:CTxMemPool
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
input	timedata.h	/^    void input(T value)$/;"	f	class:CMedianFilter
insecure_rand	addrman.h	/^    FastRandomContext insecure_rand;$/;"	m	class:CAddrMan
insert	bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CRollingBloomFilter
insert	bloom.cpp	/^void CRollingBloomFilter::insert(const uint256& hash)$/;"	f	class:CRollingBloomFilter
insert	cuckoocache.h	/^    inline void insert(Element e)$/;"	f	class:CuckooCache::cache
insert	indirectmap.h	/^    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }$/;"	f	class:indirectmap
insert	limitedmap.h	/^    void insert(const value_type& x)$/;"	f	class:limitedmap
insert	prevector.h	/^    iterator insert(iterator pos, const T& value) {$/;"	f	class:prevector
insert	prevector.h	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:prevector
insert	prevector.h	/^    void insert(iterator pos, size_type count, const T& value) {$/;"	f	class:prevector
insert	streams.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/ciid\/Documents\/bitcoin-0.14-sharding\/bitcoin-0.14\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cmaincleanup	validation.cpp	/^} instance_of_cmaincleanup;$/;"	v	typeref:class:CMainCleanup
instance_of_cnetcleanup	net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
instance_of_cnetprocessingcleanup	net_processing.cpp	/^} instance_of_cnetprocessingcleanup;$/;"	v	typeref:class:CNetProcessingCleanup
interruptNet	net.h	/^    CThreadInterrupt interruptNet;$/;"	m	class:CConnman
invalid	cuckoocache.h	/^    constexpr uint32_t invalid() const$/;"	f	class:CuckooCache::cache
invlockorders	sync.cpp	/^    InvLockOrders invlockorders;$/;"	m	struct:LockData	file:
invoke	tinyformat.h	/^    static bool invoke(std::ostream& \/**\/, const T& \/**\/) { return false; }$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static bool invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static int invoke(const T& \/*value*\/)$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static int invoke(const T& value) { return static_cast<int>(value); }$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static void invoke(std::ostream& \/*out*\/, const T& \/*value*\/) { assert(0); }$/;"	f	struct:tinyformat::detail::formatValueAsType
invoke	tinyformat.h	/^    static void invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatValueAsType
ip	netaddress.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
isEmpty	bloom.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isFull	bloom.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isStillDependent	miner.cpp	/^bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
is_convertible	tinyformat.h	/^struct is_convertible$/;"	s	namespace:tinyformat::detail
is_direct	prevector.h	/^    bool is_direct() const { return _size <= N; }$/;"	f	class:prevector
is_wchar	tinyformat.h	/^template<> struct is_wchar<const wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<> struct is_wchar<wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<const wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	s	namespace:tinyformat::detail
it	coins.h	/^    CCoinsMap::iterator it;$/;"	m	class:CCoinsModifier
item_ptr	prevector.h	/^    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
item_ptr	prevector.h	/^    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
iter	miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:CTxMemPoolModifiedEntry
iter	miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:update_for_parent_inclusion
iterator	indirectmap.h	/^    typedef typename base::iterator iterator;$/;"	t	class:indirectmap
iterator	limitedmap.h	/^    typedef typename std::map<K, V>::iterator iterator;$/;"	t	class:limitedmap
iterator	prevector.h	/^        iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::iterator
iterator	prevector.h	/^    class iterator {$/;"	c	class:prevector
iterator	streams.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iterator_category	prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::const_reverse_iterator
iterator_category	prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::reverse_iterator
iterator_category	prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::const_iterator
iterator_category	prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::iterator
iteroptions	dbwrapper.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CDBWrapper
itostr	utilstrencodings.cpp	/^std::string itostr(int n)$/;"	f
k0	coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k1	coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
key	key.h	/^    CKey key;$/;"	m	struct:CExtKey
keyTmp	txdb.h	/^    std::pair<char, uint256> keyTmp;$/;"	m	class:CCoinsViewDBCursor
key_type	limitedmap.h	/^    typedef K key_type;$/;"	t	class:limitedmap
keydata	key.h	/^    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;$/;"	m	class:CKey
lNodesAnnouncingHeaderAndIDs	net_processing.cpp	/^    std::list<NodeId> lNodesAnnouncingHeaderAndIDs;$/;"	m	namespace:__anon7	file:
lastFewTxs	miner.h	/^    int lastFewTxs;$/;"	m	class:BlockAssembler
lastRollingFeeUpdate	txmempool.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CTxMemPool
lastSentFeeFilter	net.h	/^    CAmount lastSentFeeFilter;$/;"	m	class:CNode
left	memusage.h	/^    void* left;$/;"	m	struct:memusage::stl_tree_node
leveldb_libleveldb_a_AR	Makefile	/^leveldb_libleveldb_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_a_CPPFLAGS	Makefile	/^leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)$/;"	m
leveldb_libleveldb_a_CXXFLAGS	Makefile	/^leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
leveldb_libleveldb_a_LIBADD	Makefile	/^leveldb_libleveldb_a_LIBADD =$/;"	m
leveldb_libleveldb_a_OBJECTS	Makefile	/^leveldb_libleveldb_a_OBJECTS = $(am_leveldb_libleveldb_a_OBJECTS)$/;"	m
leveldb_libleveldb_a_SOURCES	Makefile	/^leveldb_libleveldb_a_SOURCES =  \\$/;"	m
leveldb_libmemenv_a_AR	Makefile	/^leveldb_libmemenv_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libmemenv_a_CPPFLAGS	Makefile	/^leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)$/;"	m
leveldb_libmemenv_a_CXXFLAGS	Makefile	/^leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)$/;"	m
leveldb_libmemenv_a_LIBADD	Makefile	/^leveldb_libmemenv_a_LIBADD =$/;"	m
leveldb_libmemenv_a_OBJECTS	Makefile	/^leveldb_libmemenv_a_OBJECTS = $(am_leveldb_libmemenv_a_OBJECTS)$/;"	m
leveldb_libmemenv_a_SOURCES	Makefile	/^leveldb_libmemenv_a_SOURCES =  \\$/;"	m
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)$/;"	m
libbitcoin_cli_a_AR	Makefile	/^libbitcoin_cli_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_cli_a_CPPFLAGS	Makefile	/^libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_cli_a_CXXFLAGS	Makefile	/^libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_cli_a_LIBADD	Makefile	/^libbitcoin_cli_a_LIBADD =$/;"	m
libbitcoin_cli_a_OBJECTS	Makefile	/^libbitcoin_cli_a_OBJECTS = $(am_libbitcoin_cli_a_OBJECTS)$/;"	m
libbitcoin_cli_a_SOURCES	Makefile	/^libbitcoin_cli_a_SOURCES = \\$/;"	m
libbitcoin_common_a_AR	Makefile	/^libbitcoin_common_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_common_a_CPPFLAGS	Makefile	/^libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_common_a_CXXFLAGS	Makefile	/^libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_common_a_LIBADD	Makefile	/^libbitcoin_common_a_LIBADD =$/;"	m
libbitcoin_common_a_OBJECTS	Makefile	/^libbitcoin_common_a_OBJECTS = $(am_libbitcoin_common_a_OBJECTS)$/;"	m
libbitcoin_common_a_SOURCES	Makefile	/^libbitcoin_common_a_SOURCES = \\$/;"	m
libbitcoin_consensus_a_AR	Makefile	/^libbitcoin_consensus_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_consensus_a_CPPFLAGS	Makefile	/^libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_consensus_a_CXXFLAGS	Makefile	/^libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_consensus_a_LIBADD	Makefile	/^libbitcoin_consensus_a_LIBADD =$/;"	m
libbitcoin_consensus_a_OBJECTS	Makefile	/^libbitcoin_consensus_a_OBJECTS = $(am_libbitcoin_consensus_a_OBJECTS)$/;"	m
libbitcoin_consensus_a_SOURCES	Makefile	/^libbitcoin_consensus_a_SOURCES = \\$/;"	m
libbitcoin_server_a_AR	Makefile	/^libbitcoin_server_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_server_a_CPPFLAGS	Makefile	/^libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)$/;"	m
libbitcoin_server_a_CXXFLAGS	Makefile	/^libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_server_a_LIBADD	Makefile	/^libbitcoin_server_a_LIBADD =$/;"	m
libbitcoin_server_a_OBJECTS	Makefile	/^libbitcoin_server_a_OBJECTS = $(am_libbitcoin_server_a_OBJECTS)$/;"	m
libbitcoin_server_a_SOURCES	Makefile	/^libbitcoin_server_a_SOURCES = \\$/;"	m
libbitcoin_util_a_AR	Makefile	/^libbitcoin_util_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_util_a_CPPFLAGS	Makefile	/^libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_util_a_CXXFLAGS	Makefile	/^libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_util_a_LIBADD	Makefile	/^libbitcoin_util_a_LIBADD =$/;"	m
libbitcoin_util_a_OBJECTS	Makefile	/^libbitcoin_util_a_OBJECTS = $(am_libbitcoin_util_a_OBJECTS) \\$/;"	m
libbitcoin_util_a_SOURCES	Makefile	/^libbitcoin_util_a_SOURCES = support\/lockedpool.cpp chainparamsbase.cpp \\$/;"	m
libbitcoin_wallet_a_AR	Makefile	/^libbitcoin_wallet_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_a_CPPFLAGS	Makefile	/^libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_a_CXXFLAGS	Makefile	/^libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_wallet_a_LIBADD	Makefile	/^libbitcoin_wallet_a_LIBADD =$/;"	m
libbitcoin_wallet_a_OBJECTS	Makefile	/^libbitcoin_wallet_a_OBJECTS = $(am_libbitcoin_wallet_a_OBJECTS)$/;"	m
libbitcoin_wallet_a_SOURCES	Makefile	/^libbitcoin_wallet_a_SOURCES = \\$/;"	m
libbitcoin_zmq_a_AR	Makefile	/^libbitcoin_zmq_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_zmq_a_LIBADD	Makefile	/^libbitcoin_zmq_a_LIBADD =$/;"	m
libbitcoin_zmq_a_OBJECTS	Makefile	/^libbitcoin_zmq_a_OBJECTS = $(am_libbitcoin_zmq_a_OBJECTS)$/;"	m
libbitcoinconsensus_la_CPPFLAGS	Makefile	/^libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)\/obj -I$(srcdir)\/secp256k1\/include -DBUILD_BITCOIN_INTERNAL$/;"	m
libbitcoinconsensus_la_CXXFLAGS	Makefile	/^libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoinconsensus_la_DEPENDENCIES	Makefile	/^libbitcoinconsensus_la_DEPENDENCIES =  \\$/;"	m
libbitcoinconsensus_la_LDFLAGS	Makefile	/^libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)$/;"	m
libbitcoinconsensus_la_LIBADD	Makefile	/^libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)$/;"	m
libbitcoinconsensus_la_LINK	Makefile	/^libbitcoinconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libbitcoinconsensus_la_OBJECTS	Makefile	/^libbitcoinconsensus_la_OBJECTS = $(am_libbitcoinconsensus_la_OBJECTS)$/;"	m
libbitcoinconsensus_la_SOURCES	Makefile	/^libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libevent_log_cb	httpserver.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
limitedmap	limitedmap.h	/^    limitedmap(size_type nMaxSizeIn)$/;"	f	class:limitedmap
limitedmap	limitedmap.h	/^class limitedmap$/;"	c
lines	torcontrol.cpp	/^    std::vector<std::string> lines;$/;"	m	class:TorControlReply	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	reverselock.h	/^    Lock& lock;$/;"	m	class:reverse_lock
lock	sync.h	/^    boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
lockPoints	txmempool.h	/^    LockPoints lockPoints;     \/\/!< Track the height and time at which tx was final$/;"	m	class:CTxMemPoolEntry
lockdata	sync.cpp	/^} static lockdata;$/;"	v	file:
lockorders	sync.cpp	/^    LockOrders lockorders;$/;"	m	struct:LockData	file:
lockstack	sync.cpp	/^boost::thread_specific_ptr<LockStack> lockstack;$/;"	v
lower_bound	indirectmap.h	/^    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lower_bound	indirectmap.h	/^    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lp	txmempool.h	/^    const LockPoints& lp;$/;"	m	struct:update_lock_points
m	indirectmap.h	/^    base m;$/;"	m	class:indirectmap
m	net.h	/^std::mutex m;$/;"	m	class:CConnman
m_N	tinyformat.h	/^        int m_N;$/;"	m	class:tinyformat::FormatList
m_formatImpl	tinyformat.h	/^        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,$/;"	m	class:tinyformat::detail::FormatArg
m_formatterStore	tinyformat.h	/^        FormatArg m_formatterStore[N];$/;"	m	class:tinyformat::detail::FormatListN
m_formatters	tinyformat.h	/^        const detail::FormatArg* m_formatters;$/;"	m	class:tinyformat::FormatList
m_toIntImpl	tinyformat.h	/^        int (*m_toIntImpl)(const void* value);$/;"	m	class:tinyformat::detail::FormatArg
m_value	tinyformat.h	/^        const void* m_value;$/;"	m	class:tinyformat::detail::FormatArg
main	bitcoin-cli.cpp	/^int main(int argc, char* argv[])$/;"	f
main	bitcoin-tx.cpp	/^int main(int argc, char* argv[])$/;"	f
main	bitcoind.cpp	/^int main(int argc, char* argv[])$/;"	f
mainParams	chainparams.cpp	/^static CMainParams mainParams;$/;"	v	file:
mainParams	chainparamsbase.cpp	/^static CBaseMainParams mainParams;$/;"	v	file:
makeFormatList	tinyformat.h	/^detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)$/;"	f	namespace:tinyformat
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map	limitedmap.h	/^    std::map<K, V> map;$/;"	m	class:limitedmap
mapAddr	addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapArgs	util.cpp	/^map<string, string> mapArgs;$/;"	v
mapAskFor	net.h	/^    std::multimap<int64_t, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	validation.cpp	/^BlockMap mapBlockIndex;$/;"	v
mapBlockSource	net_processing.cpp	/^    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;$/;"	m	namespace:__anon7	file:
mapBlocksInFlight	net_processing.cpp	/^    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;$/;"	m	namespace:__anon7	file:
mapBlocksUnlinked	validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;$/;"	m	namespace:__anon17	file:
mapCheckpoints	chainparams.h	/^    MapCheckpoints mapCheckpoints;$/;"	m	struct:CCheckpointData
mapDeltas	txmempool.h	/^    std::map<uint256, std::pair<double, CAmount> > mapDeltas;$/;"	m	class:CTxMemPool
mapInfo	addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
mapKeys	keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapLinks	txmempool.h	/^    txlinksMap mapLinks;$/;"	m	class:CTxMemPool
mapLocalHost	net.cpp	/^std::map<CNetAddr, LocalServiceInfo> mapLocalHost;$/;"	v
mapMsgCmdSize	net.h	/^typedef std::map<std::string, uint64_t> mapMsgCmdSize; \/\/command, total bytes$/;"	t
mapMultiArgs	util.cpp	/^const map<string, vector<string> >& mapMultiArgs = _mapMultiArgs;$/;"	v
mapNextTx	txmempool.h	/^    indirectmap<COutPoint, const CTransaction*> mapNextTx;$/;"	m	class:CTxMemPool
mapNodeState	net_processing.cpp	/^std::map<NodeId, CNodeState> mapNodeState;$/;"	m	namespace:__anon8	file:
mapRecvBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNode
mapRecvBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapRelay	net_processing.cpp	/^    MapRelay mapRelay;$/;"	m	namespace:__anon7	file:
mapScripts	keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapSendBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNode
mapSendBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSigHashTypes	core_write.cpp	/^const std::map<unsigned char, std::string> mapSigHashTypes =$/;"	v
mapTx	txmempool.h	/^    indexed_transaction_set mapTx;$/;"	m	class:CTxMemPool
mapWatchKeys	keystore.h	/^    WatchKeyMap mapWatchKeys;$/;"	m	class:CBasicKeyStore
mapped_type	limitedmap.h	/^    typedef V mapped_type;$/;"	t	class:limitedmap
maxDepth	httpserver.cpp	/^    size_t maxDepth;$/;"	m	class:WorkQueue	file:
maxInputBlock	txmempool.h	/^    CBlockIndex* maxInputBlock;$/;"	m	struct:LockPoints
maxTxFee	validation.cpp	/^CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;$/;"	v
max_size	indirectmap.h	/^    size_type max_size() const      { return m.max_size(); }$/;"	f	class:indirectmap
max_size	limitedmap.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:limitedmap
max_size	limitedmap.h	/^    size_type max_size(size_type s)$/;"	f	class:limitedmap
median	timedata.h	/^    T median() const$/;"	f	class:CMedianFilter
mem	cuckoocache.h	/^    std::unique_ptr<std::atomic<uint8_t>[]> mem;$/;"	m	class:CuckooCache::bit_packed_atomic_flags
mempool	txmempool.h	/^    const CTxMemPool& mempool;$/;"	m	class:CCoinsViewMemPool
mempool_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
mempoolentry_txid	txmempool.h	/^struct mempoolentry_txid$/;"	s
memusage	memusage.h	/^namespace memusage$/;"	n
message	torcontrol.cpp	/^    TorControlReply message;$/;"	m	class:TorControlConnection	file:
minFeeFilter	net.h	/^    CAmount minFeeFilter;$/;"	m	class:CNode
minRelayTxFee	validation.cpp	/^CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);$/;"	v
minerPolicyEstimator	txmempool.h	/^    CBlockPolicyEstimator* minerPolicyEstimator;$/;"	m	class:CTxMemPool
mining_score	txmempool.h	/^struct mining_score {};$/;"	s
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
modifiedentry_iter	miner.h	/^struct modifiedentry_iter {$/;"	s
modifyCount	txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_ancestor_state
modifyCount	txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_descendant_state
modifyFee	txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_ancestor_state
modifyFee	txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_descendant_state
modifySigOpsCost	txmempool.h	/^        int64_t modifySigOpsCost;$/;"	m	struct:update_ancestor_state
modifySize	txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_ancestor_state
modifySize	txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_descendant_state
modtxiter	miner.h	/^typedef indexed_modified_transaction_set::nth_index<0>::type::iterator modtxiter;$/;"	t
modtxscoreiter	miner.h	/^typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator modtxscoreiter;$/;"	t
most_recent_block	net_processing.cpp	/^static std::shared_ptr<const CBlock> most_recent_block;$/;"	v	file:
most_recent_block_hash	net_processing.cpp	/^static uint256 most_recent_block_hash;$/;"	v	file:
most_recent_compact_block	net_processing.cpp	/^static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block;$/;"	v	file:
mp	net_processing.cpp	/^    CTxMemPool *mp;$/;"	m	class:CompareInvMempoolOrder	file:
msg	net.h	/^    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;$/;"	m	struct:CSerializedNetMsg
msgIndent	util.cpp	/^static const int msgIndent = 7;$/;"	v	file:
multiUserAuthorized	httprpc.cpp	/^static bool multiUserAuthorized(std::string strUserPass)$/;"	f	file:
mut	threadinterrupt.h	/^    std::mutex mut;$/;"	m	class:CThreadInterrupt
mutex	checkqueue.h	/^    boost::mutex mutex;$/;"	m	class:CCheckQueue
mutex	sync.h	/^    boost::mutex mutex;$/;"	m	class:CSemaphore
mutexDebugLog	util.cpp	/^static boost::mutex* mutexDebugLog = NULL;$/;"	v	file:
mutexMsgProc	net.h	/^    std::mutex mutexMsgProc;$/;"	m	class:CConnman
mutexName	sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
myAddrPow	ntunodeid.cpp	/^AddrPow myAddrPow;$/;"	v
n	serialize.h	/^    I &n;$/;"	m	class:CVarInt
n	serialize.h	/^    uint64_t &n;$/;"	m	class:CCompactSize
nAttempts	addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nBanUntil	addrdb.h	/^    int64_t nBanUntil;$/;"	m	class:CBanEntry
nBatchSize	checkqueue.h	/^    unsigned int nBatchSize;$/;"	m	class:CCheckQueue
nBestHeight	net.h	/^        int nBestHeight = 0;$/;"	m	struct:CConnman::Options
nBestHeight	net.h	/^    std::atomic<int> nBestHeight;$/;"	m	class:CConnman
nBits	chain.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockMaxSize	miner.h	/^    unsigned int nBlockMaxWeight, nBlockMaxSize;$/;"	m	class:BlockAssembler
nBlockMaxWeight	miner.h	/^    unsigned int nBlockMaxWeight, nBlockMaxSize;$/;"	m	class:BlockAssembler
nBlockReverseSequenceId	validation.cpp	/^    int32_t nBlockReverseSequenceId = -1;$/;"	m	namespace:__anon17	file:
nBlockSequenceId	validation.cpp	/^    int32_t nBlockSequenceId = 1;$/;"	m	namespace:__anon17	file:
nBlockSigOpsCost	miner.h	/^    uint64_t nBlockSigOpsCost;$/;"	m	class:BlockAssembler
nBlockSize	miner.h	/^    uint64_t nBlockSize;$/;"	m	class:BlockAssembler
nBlockTx	miner.h	/^    uint64_t nBlockTx;$/;"	m	class:BlockAssembler
nBlockWeight	miner.h	/^    uint64_t nBlockWeight;$/;"	m	class:BlockAssembler
nBlocks	chain.h	/^    unsigned int nBlocks;      \/\/!< number of blocks stored in file$/;"	m	class:CBlockFileInfo
nBlocksInFlight	net_processing.cpp	/^    int nBlocksInFlight;$/;"	m	struct:__anon8::CNodeState	file:
nBlocksInFlightValidHeaders	net_processing.cpp	/^    int nBlocksInFlightValidHeaders;$/;"	m	struct:__anon8::CNodeState	file:
nChainTx	chain.h	/^    unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChainWork	chain.h	/^    arith_uint256 nChainWork;$/;"	m	class:CBlockIndex
nCheckFrequency	txmempool.h	/^    uint32_t nCheckFrequency; \/\/!< Value n means that n times in 2^32 we check.$/;"	m	class:CTxMemPool
nChild	key.h	/^    unsigned int nChild;$/;"	m	struct:CExtKey
nChild	pubkey.h	/^    unsigned int nChild;$/;"	m	struct:CExtPubKey
nCoinCacheUsage	validation.cpp	/^size_t nCoinCacheUsage = 5000 * 300;$/;"	v
nCommonHeight	net_processing.h	/^    int nCommonHeight;$/;"	m	struct:CNodeStateStats
nConnectTimeout	netbase.cpp	/^int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;$/;"	v
nCountWithAncestors	txmempool.h	/^    uint64_t nCountWithAncestors;$/;"	m	class:CTxMemPoolEntry
nCountWithDescendants	txmempool.h	/^    uint64_t nCountWithDescendants;  \/\/!< number of descendant transactions$/;"	m	class:CTxMemPoolEntry
nCreateTime	addrdb.h	/^    int64_t nCreateTime;$/;"	m	class:CBanEntry
nDataPos	chain.h	/^    unsigned int nDataPos;$/;"	m	class:CBlockIndex
nDataPos	net.h	/^    unsigned int nDataPos;$/;"	m	class:CNetMessage
nDefaultDbCache	txdb.h	/^static const int64_t nDefaultDbCache = 450;$/;"	v
nDefaultPort	chainparams.h	/^    int nDefaultPort;$/;"	m	class:CChainParams
nDepth	key.h	/^    unsigned char nDepth;$/;"	m	struct:CExtKey
nDepth	pubkey.h	/^    unsigned char nDepth;$/;"	m	struct:CExtPubKey
nDownloadingSince	net_processing.cpp	/^    int64_t nDownloadingSince;$/;"	m	struct:__anon8::CNodeState	file:
nEntriesPerGeneration	bloom.h	/^    int nEntriesPerGeneration;$/;"	m	class:CRollingBloomFilter
nEntriesThisGeneration	bloom.h	/^    int nEntriesThisGeneration;$/;"	m	class:CRollingBloomFilter
nFD	init.cpp	/^int nFD;$/;"	m	namespace:__anon5	file:
nFee	txmempool.h	/^    CAmount nFee;              \/\/!< Cached to avoid expensive parent-transaction lookups$/;"	m	class:CTxMemPoolEntry
nFeeDelta	txmempool.h	/^    int64_t nFeeDelta;$/;"	m	struct:TxMempoolInfo
nFees	miner.h	/^    CAmount nFees;$/;"	m	class:BlockAssembler
nFile	chain.h	/^    int nFile;$/;"	m	class:CBlockIndex
nFile	chain.h	/^    int nFile;$/;"	m	struct:CDiskBlockPos
nFlags	bloom.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nFlags	validation.h	/^    unsigned int nFlags;$/;"	m	class:CScriptCheck
nGeneration	bloom.h	/^    int nGeneration;$/;"	m	class:CRollingBloomFilter
nHashFuncs	bloom.h	/^    int nHashFuncs;$/;"	m	class:CRollingBloomFilter
nHashFuncs	bloom.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHdrPos	net.h	/^    unsigned int nHdrPos;$/;"	m	class:CNetMessage
nHeight	chain.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	coins.h	/^    int nHeight;$/;"	m	class:CCoins
nHeight	miner.h	/^    int nHeight;$/;"	m	class:BlockAssembler
nHeight	rest.cpp	/^    uint32_t nHeight;$/;"	m	struct:CCoin	file:
nHeight	undo.h	/^    unsigned int nHeight; \/\/ if the outpoint was the last unspent: its height$/;"	m	class:CTxInUndo
nHeightFirst	chain.h	/^    unsigned int nHeightFirst; \/\/!< lowest height of block in file$/;"	m	class:CBlockFileInfo
nHeightLast	chain.h	/^    unsigned int nHeightLast;  \/\/!< highest height of block in file$/;"	m	class:CBlockFileInfo
nIdCount	addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nIdle	checkqueue.h	/^    int nIdle;$/;"	m	class:CCheckQueue
nIn	validation.h	/^    unsigned int nIn;$/;"	m	class:CScriptCheck
nKey	addrman.h	/^    uint256 nKey;$/;"	m	class:CAddrMan
nKeyedNetGroup	net.cpp	/^    uint64_t nKeyedNetGroup;$/;"	m	struct:NodeEvictionCandidate	file:
nKeyedNetGroup	net.h	/^    const uint64_t nKeyedNetGroup;$/;"	m	class:CNode
nLastBlockFile	validation.cpp	/^    int nLastBlockFile = 0;$/;"	m	namespace:__anon17	file:
nLastBlockSize	miner.cpp	/^uint64_t nLastBlockSize = 0;$/;"	v
nLastBlockTime	net.cpp	/^    int64_t nLastBlockTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastBlockTime	net.h	/^    std::atomic<int64_t> nLastBlockTime;$/;"	m	class:CNode
nLastBlockTx	miner.cpp	/^uint64_t nLastBlockTx = 0;$/;"	v
nLastBlockWeight	miner.cpp	/^uint64_t nLastBlockWeight = 0;$/;"	v
nLastCountAttempt	addrman.h	/^    int64_t nLastCountAttempt;$/;"	m	class:CAddrInfo
nLastGood	addrman.h	/^    int64_t nLastGood;$/;"	m	class:CAddrMan
nLastNodeId	net.h	/^    std::atomic<NodeId> nLastNodeId;$/;"	m	class:CConnman
nLastPreciousChainwork	validation.cpp	/^    arith_uint256 nLastPreciousChainwork = 0;$/;"	m	namespace:__anon17	file:
nLastRecv	net.h	/^    int64_t nLastRecv;$/;"	m	class:CNodeStats
nLastRecv	net.h	/^    std::atomic<int64_t> nLastRecv;$/;"	m	class:CNode
nLastSend	net.h	/^    int64_t nLastSend;$/;"	m	class:CNodeStats
nLastSend	net.h	/^    std::atomic<int64_t> nLastSend;$/;"	m	class:CNode
nLastSuccess	addrman.h	/^    int64_t nLastSuccess;$/;"	m	class:CAddrInfo
nLastTXTime	net.cpp	/^    int64_t nLastTXTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastTXTime	net.h	/^    std::atomic<int64_t> nLastTXTime;$/;"	m	class:CNode
nLastTry	addrman.h	/^    int64_t nLastTry;$/;"	m	class:CAddrInfo
nLocalHostNonce	net.h	/^    const uint64_t nLocalHostNonce;$/;"	m	class:CNode
nLocalServices	init.cpp	/^ServiceFlags nLocalServices = NODE_NETWORK;$/;"	m	namespace:__anon5	file:
nLocalServices	net.h	/^        ServiceFlags nLocalServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nLocalServices	net.h	/^    ServiceFlags nLocalServices;$/;"	m	class:CConnman
nLocalServices	net.h	/^    const ServiceFlags nLocalServices;$/;"	m	class:CNode
nLockTimeCutoff	miner.h	/^    int64_t nLockTimeCutoff;$/;"	m	class:BlockAssembler
nMaxAddnode	net.h	/^        int nMaxAddnode = 0;$/;"	m	struct:CConnman::Options
nMaxAddnode	net.h	/^    int nMaxAddnode;$/;"	m	class:CConnman
nMaxBlockDBAndTxIndexCache	txdb.h	/^static const int64_t nMaxBlockDBAndTxIndexCache = 1024;$/;"	v
nMaxBlockDBCache	txdb.h	/^static const int64_t nMaxBlockDBCache = 2;$/;"	v
nMaxCoinsDBCache	txdb.h	/^static const int64_t nMaxCoinsDBCache = 8;$/;"	v
nMaxConnections	init.cpp	/^int nMaxConnections;$/;"	m	namespace:__anon5	file:
nMaxConnections	net.h	/^        int nMaxConnections = 0;$/;"	m	struct:CConnman::Options
nMaxConnections	net.h	/^    int nMaxConnections;$/;"	m	class:CConnman
nMaxDbCache	txdb.h	/^static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;$/;"	v
nMaxFeeler	net.h	/^        int nMaxFeeler = 0;$/;"	m	struct:CConnman::Options
nMaxFeeler	net.h	/^    int nMaxFeeler;$/;"	m	class:CConnman
nMaxOutbound	net.h	/^        int nMaxOutbound = 0;$/;"	m	struct:CConnman::Options
nMaxOutbound	net.h	/^    int nMaxOutbound;$/;"	m	class:CConnman
nMaxOutboundCycleStartTime	net.h	/^    uint64_t nMaxOutboundCycleStartTime;$/;"	m	class:CConnman
nMaxOutboundLimit	net.h	/^        uint64_t nMaxOutboundLimit = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundLimit	net.h	/^    uint64_t nMaxOutboundLimit;$/;"	m	class:CConnman
nMaxOutboundTimeframe	net.h	/^        uint64_t nMaxOutboundTimeframe = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundTimeframe	net.h	/^    uint64_t nMaxOutboundTimeframe;$/;"	m	class:CConnman
nMaxOutboundTotalBytesSentInCycle	net.h	/^    uint64_t nMaxOutboundTotalBytesSentInCycle;$/;"	m	class:CConnman
nMaxSize	limitedmap.h	/^    size_type nMaxSize;$/;"	m	class:limitedmap
nMaxTipAge	validation.cpp	/^int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;$/;"	v
nMedianTimeSpan	chain.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon4
nMessageSize	protocol.h	/^    uint32_t nMessageSize;$/;"	m	class:CMessageHeader
nMinDbCache	txdb.h	/^static const int64_t nMinDbCache = 4;$/;"	v
nMinDiskSpace	validation.h	/^static const uint64_t nMinDiskSpace = 52428800;$/;"	v
nMinPingUsecTime	net.cpp	/^    int64_t nMinPingUsecTime;$/;"	m	struct:NodeEvictionCandidate	file:
nMinPingUsecTime	net.h	/^    std::atomic<int64_t> nMinPingUsecTime;$/;"	m	class:CNode
nMisbehavior	net_processing.cpp	/^    int nMisbehavior;$/;"	m	struct:__anon8::CNodeState	file:
nMisbehavior	net_processing.h	/^    int nMisbehavior;$/;"	m	struct:CNodeStateStats
nMockTime	utiltime.cpp	/^static int64_t nMockTime = 0; \/\/!< For unit testing$/;"	v	file:
nModFeesWithAncestors	miner.h	/^    CAmount nModFeesWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nModFeesWithAncestors	txmempool.h	/^    CAmount nModFeesWithAncestors;$/;"	m	class:CTxMemPoolEntry
nModFeesWithDescendants	txmempool.h	/^    CAmount nModFeesWithDescendants; \/\/!< ... and total fees (all including us)$/;"	m	class:CTxMemPoolEntry
nModSize	txmempool.h	/^    size_t nModSize;           \/\/!< ... and modified size for priority$/;"	m	class:CTxMemPoolEntry
nMyStartingHeight	net.h	/^    const int nMyStartingHeight;$/;"	m	class:CNode
nNew	addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nNextAddrSend	net.h	/^    int64_t nNextAddrSend;$/;"	m	class:CNode
nNextInvSend	net.h	/^    int64_t nNextInvSend;$/;"	m	class:CNode
nNextLocalAddrSend	net.h	/^    int64_t nNextLocalAddrSend;$/;"	m	class:CNode
nNonce	chain.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nNonce2	chain.h	/^    unsigned int nNonce2;               \/\/2nd nonce for the 2nd PoW (cf. Steven's EPoW$/;"	m	class:CBlockIndex
nPeersWithValidatedDownloads	net_processing.cpp	/^    int nPeersWithValidatedDownloads = 0;$/;"	m	namespace:__anon7	file:
nPingNonceSent	net.h	/^    std::atomic<uint64_t> nPingNonceSent;$/;"	m	class:CNode
nPingUsecStart	net.h	/^    std::atomic<int64_t> nPingUsecStart;$/;"	m	class:CNode
nPingUsecTime	net.h	/^    std::atomic<int64_t> nPingUsecTime;$/;"	m	class:CNode
nPort	net.h	/^    int nPort;$/;"	m	struct:LocalServiceInfo
nPos	chain.h	/^    unsigned int nPos;$/;"	m	struct:CDiskBlockPos
nPos	streams.h	/^    size_t nPos;$/;"	m	class:CVectorWriter
nPreferredDownload	net_processing.cpp	/^    int nPreferredDownload = 0;$/;"	m	namespace:__anon7	file:
nProcessQueueSize	net.h	/^    size_t nProcessQueueSize;$/;"	m	class:CNode
nPruneAfterHeight	chainparams.h	/^    uint64_t nPruneAfterHeight;$/;"	m	class:CChainParams
nPruneTarget	validation.cpp	/^uint64_t nPruneTarget = 0;$/;"	v
nRPCPort	chainparamsbase.h	/^    int nRPCPort;$/;"	m	class:CBaseChainParams
nRandomPos	addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadLimit	streams.h	/^    uint64_t nReadLimit;  \/\/ up to which position we're allowed to read$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    uint64_t nReadPos;    \/\/ how many bytes have been read from this$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nReceiveFloodSize	net.h	/^        unsigned int nReceiveFloodSize = 0;$/;"	m	struct:CConnman::Options
nReceiveFloodSize	net.h	/^    unsigned int nReceiveFloodSize;$/;"	m	class:CConnman
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNode
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNodeStats
nRecvVersion	net.h	/^    std::atomic<int> nRecvVersion;$/;"	m	class:CNode
nRefCount	addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nRefCount	net.h	/^    std::atomic<int> nRefCount;$/;"	m	class:CNode
nRelevantServices	init.cpp	/^ServiceFlags nRelevantServices = NODE_NETWORK;$/;"	m	namespace:__anon5	file:
nRelevantServices	net.h	/^        ServiceFlags nRelevantServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nRelevantServices	net.h	/^    ServiceFlags nRelevantServices;$/;"	m	class:CConnman
nRewind	streams.h	/^    uint64_t nRewind;     \/\/ how many bytes we guarantee to rewind$/;"	m	class:CBufferedFile
nSatoshisPerK	amount.h	/^    CAmount nSatoshisPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nScore	net.h	/^    int nScore;$/;"	m	struct:LocalServiceInfo
nScriptCheckThreads	validation.cpp	/^int nScriptCheckThreads = 0;$/;"	v
nSeed0	net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSeed1	net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSendBufferMaxSize	net.h	/^        unsigned int nSendBufferMaxSize = 0;$/;"	m	struct:CConnman::Options
nSendBufferMaxSize	net.h	/^    unsigned int nSendBufferMaxSize;$/;"	m	class:CConnman
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNode
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNodeStats
nSendOffset	net.h	/^    size_t nSendOffset; \/\/ offset inside the first vSendMsg already sent$/;"	m	class:CNode
nSendSize	net.h	/^    size_t nSendSize; \/\/ total size of all vSendMsg entries$/;"	m	class:CNode
nSendVersion	net.h	/^    int nSendVersion;$/;"	m	class:CNode
nSequenceId	chain.h	/^    int32_t nSequenceId;$/;"	m	class:CBlockIndex
nServices	net.h	/^    ServiceFlags nServices;$/;"	m	class:CNodeStats
nServices	net.h	/^    std::atomic<ServiceFlags> nServices;$/;"	m	class:CNode
nServices	protocol.h	/^    ServiceFlags nServices;$/;"	m	class:CAddress
nServicesExpected	net.h	/^    ServiceFlags nServicesExpected;$/;"	m	class:CNode
nShardsForNextGen	chain.h	/^    unsigned int nShardsForNextGen;        \/\/Number of shards to create for the next blocks epoch$/;"	m	class:CBlockIndex
nSigOpCostWithAncestors	miner.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSigOpCostWithAncestors	txmempool.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSize	chain.h	/^    unsigned int nSize;        \/\/!< number of used bytes of block file$/;"	m	class:CBlockFileInfo
nSize	serialize.h	/^    size_t nSize;$/;"	m	class:CSizeComputer
nSize	timedata.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nSizeWithAncestors	miner.h	/^    uint64_t nSizeWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSizeWithAncestors	txmempool.h	/^    uint64_t nSizeWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSizeWithDescendants	txmempool.h	/^    uint64_t nSizeWithDescendants;   \/\/!< ... and size$/;"	m	class:CTxMemPoolEntry
nSpecialScripts	compressor.h	/^    static const unsigned int nSpecialScripts = 6;$/;"	m	class:CScriptCompressor
nSrcPos	streams.h	/^    uint64_t nSrcPos;     \/\/ how many bytes have been read from source$/;"	m	class:CBufferedFile
nStallingSince	net_processing.cpp	/^    int64_t nStallingSince;$/;"	m	struct:__anon8::CNodeState	file:
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStartingHeight	net.h	/^    std::atomic<int> nStartingHeight;$/;"	m	class:CNode
nStatus	chain.h	/^    unsigned int nStatus;$/;"	m	class:CBlockIndex
nSyncHeight	net_processing.h	/^    int nSyncHeight;$/;"	m	struct:CNodeStateStats
nSyncStarted	net_processing.cpp	/^    int nSyncStarted = 0;$/;"	m	namespace:__anon7	file:
nThreadsServicingQueue	scheduler.h	/^    int nThreadsServicingQueue;$/;"	m	class:CScheduler
nTime	chain.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	chainparams.h	/^    int64_t nTime;$/;"	m	struct:ChainTxData
nTime	net.h	/^    int64_t nTime;                  \/\/ time (in microseconds) of message receipt.$/;"	m	class:CNetMessage
nTime	protocol.h	/^    unsigned int nTime;$/;"	m	class:CAddress
nTime	txmempool.h	/^    int64_t nTime;             \/\/!< Local time when entering the mempool$/;"	m	class:CTxMemPoolEntry
nTime	txmempool.h	/^    int64_t nTime;$/;"	m	struct:TxMempoolInfo
nTimeCallbacks	validation.cpp	/^static int64_t nTimeCallbacks = 0;$/;"	v	file:
nTimeChainState	validation.cpp	/^static int64_t nTimeChainState = 0;$/;"	v	file:
nTimeCheck	validation.cpp	/^static int64_t nTimeCheck = 0;$/;"	v	file:
nTimeConnect	validation.cpp	/^static int64_t nTimeConnect = 0;$/;"	v	file:
nTimeConnectTotal	validation.cpp	/^static int64_t nTimeConnectTotal = 0;$/;"	v	file:
nTimeConnected	net.cpp	/^    int64_t nTimeConnected;$/;"	m	struct:NodeEvictionCandidate	file:
nTimeConnected	net.h	/^    const int64_t nTimeConnected;$/;"	m	class:CNode
nTimeConnected	net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNodeStats
nTimeExpire	net_processing.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeFirst	chain.h	/^    uint64_t nTimeFirst;       \/\/!< earliest time of block in file$/;"	m	class:CBlockFileInfo
nTimeFlush	validation.cpp	/^static int64_t nTimeFlush = 0;$/;"	v	file:
nTimeForks	validation.cpp	/^static int64_t nTimeForks = 0;$/;"	v	file:
nTimeIndex	validation.cpp	/^static int64_t nTimeIndex = 0;$/;"	v	file:
nTimeLast	chain.h	/^    uint64_t nTimeLast;        \/\/!< latest time of block in file$/;"	m	class:CBlockFileInfo
nTimeMax	chain.h	/^    unsigned int nTimeMax;$/;"	m	class:CBlockIndex
nTimeOffset	net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNodeStats
nTimeOffset	net.h	/^    std::atomic<int64_t> nTimeOffset;$/;"	m	class:CNode
nTimeOffset	timedata.cpp	/^static int64_t nTimeOffset = 0;$/;"	v	file:
nTimePostConnect	validation.cpp	/^static int64_t nTimePostConnect = 0;$/;"	v	file:
nTimeReadFromDisk	validation.cpp	/^static int64_t nTimeReadFromDisk = 0;$/;"	v	file:
nTimeTotal	validation.cpp	/^static int64_t nTimeTotal = 0;$/;"	v	file:
nTimeVerify	validation.cpp	/^static int64_t nTimeVerify = 0;$/;"	v	file:
nTodo	checkqueue.h	/^    unsigned int nTodo;$/;"	m	class:CCheckQueue
nTotal	checkqueue.h	/^    int nTotal;$/;"	m	class:CCheckQueue
nTotalBytesRecv	net.h	/^    uint64_t nTotalBytesRecv;$/;"	m	class:CConnman
nTotalBytesSent	net.h	/^    uint64_t nTotalBytesSent;$/;"	m	class:CConnman
nTransactions	merkleblock.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTransactionsUpdated	txmempool.h	/^    unsigned int nTransactionsUpdated;$/;"	m	class:CTxMemPool
nTried	addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nTweak	bloom.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTweak	bloom.h	/^    unsigned int nTweak;$/;"	m	class:CRollingBloomFilter
nTx	chain.h	/^    unsigned int nTx;$/;"	m	class:CBlockIndex
nTxCount	chainparams.h	/^    int64_t nTxCount;$/;"	m	struct:ChainTxData
nTxOffset	txdb.h	/^    unsigned int nTxOffset; \/\/ after header$/;"	m	struct:CDiskTxPos
nTxVer	rest.cpp	/^    uint32_t nTxVer; \/\/ Don't call this nVersion, that name has a special meaning inside IMPLEMENT_SERIALIZE$/;"	m	struct:CCoin	file:
nTxWeight	txmempool.h	/^    size_t nTxWeight;          \/\/!< ... and avoid recomputing tx weight (also used for GetTxSize())$/;"	m	class:CTxMemPoolEntry
nType	hash.h	/^    const int nType;$/;"	m	class:CHashWriter
nType	serialize.h	/^    const int nType;$/;"	m	class:CSizeComputer
nType	streams.h	/^    const int nType;$/;"	m	class:CAutoFile
nType	streams.h	/^    const int nType;$/;"	m	class:CBufferedFile
nType	streams.h	/^    const int nType;$/;"	m	class:CVectorWriter
nType	streams.h	/^    const int nType;$/;"	m	class:OverrideStream
nType	streams.h	/^    int nType;$/;"	m	class:CDataStream
nUnconnectingHeaders	net_processing.cpp	/^    int nUnconnectingHeaders;$/;"	m	struct:__anon8::CNodeState	file:
nUndoPos	chain.h	/^    unsigned int nUndoPos;$/;"	m	class:CBlockIndex
nUndoSize	chain.h	/^    unsigned int nUndoSize;    \/\/!< number of used bytes in the undo file$/;"	m	class:CBlockFileInfo
nUsageSize	txmempool.h	/^    size_t nUsageSize;         \/\/!< ... and total memory usage$/;"	m	class:CTxMemPoolEntry
nUserMaxConnections	init.cpp	/^int nUserMaxConnections;$/;"	m	namespace:__anon5	file:
nVersion	addrdb.h	/^    int nVersion;$/;"	m	class:CBanEntry
nVersion	chain.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	coins.h	/^    int nVersion;$/;"	m	class:CCoins
nVersion	hash.h	/^    const int nVersion;$/;"	m	class:CHashWriter
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	net.h	/^    std::atomic<int> nVersion;$/;"	m	class:CNode
nVersion	netmessagemaker.h	/^    const int nVersion;$/;"	m	class:CNetMsgMaker
nVersion	serialize.h	/^    const int nVersion;$/;"	m	class:CSizeComputer
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CAutoFile
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CBufferedFile
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CVectorWriter
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:OverrideStream
nVersion	streams.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	undo.h	/^    int nVersion;         \/\/ if the outpoint was the last unspent: its version$/;"	m	class:CTxInUndo
name	chainparams.h	/^    std::string name, host;$/;"	m	struct:CDNSSeedData
name	net_processing.cpp	/^    const std::string name;$/;"	m	struct:__anon8::CNodeState	file:
name	rest.cpp	/^    const char* name;$/;"	m	struct:__anon12	file:
name	versionbits.h	/^    const char *name;$/;"	m	struct:BIP9DeploymentInfo
nameProxy	netbase.cpp	/^static proxyType nameProxy;$/;"	v	file:
nbGroups	txmempool.h	/^    unsigned int nbGroups()$/;"	f	class:CTxMemPool
netmask	netaddress.h	/^        uint8_t netmask[16];$/;"	m	class:CSubNet
network	netaddress.h	/^        CNetAddr network;$/;"	m	class:CSubNet
newKey	ntunodeid.h	/^    void newKey()$/;"	f	class:AddrPow
newTaskMutex	scheduler.h	/^    mutable boost::mutex newTaskMutex;$/;"	m	class:CScheduler
newTaskScheduled	scheduler.h	/^    boost::condition_variable newTaskScheduled;$/;"	m	class:CScheduler
new_handler_terminate	init.cpp	/^[[noreturn]] static void new_handler_terminate()$/;"	f	file:
nextSendTimeFeeFilter	net.h	/^    int64_t nextSendTimeFeeFilter;$/;"	m	class:CNode
nodeid	net.h	/^    NodeId nodeid;$/;"	m	class:CNodeStats
nodist_bench_bench_bitcoin_OBJECTS	Makefile	/^nodist_bench_bench_bitcoin_OBJECTS =  \\$/;"	m
nodist_bench_bench_bitcoin_SOURCES	Makefile	/^nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
nodist_libbitcoin_util_a_OBJECTS	Makefile	/^nodist_libbitcoin_util_a_OBJECTS =$/;"	m
nodist_libbitcoin_util_a_SOURCES	Makefile	/^nodist_libbitcoin_util_a_SOURCES = $(srcdir)\/obj\/build.h$/;"	m
nodist_qt_libbitcoinqt_a_OBJECTS	Makefile	/^nodist_qt_libbitcoinqt_a_OBJECTS = $(am__objects_11) \\$/;"	m
nodist_qt_libbitcoinqt_a_SOURCES	Makefile	/^nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(PROTOBUF_CC) \\$/;"	m
nodist_qt_test_test_bitcoin_qt_OBJECTS	Makefile	/^nodist_qt_test_test_bitcoin_qt_OBJECTS =  \\$/;"	m
nodist_qt_test_test_bitcoin_qt_SOURCES	Makefile	/^nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)$/;"	m
nodist_test_test_bitcoin_OBJECTS	Makefile	/^nodist_test_test_bitcoin_OBJECTS =  \\$/;"	m
nodist_test_test_bitcoin_SOURCES	Makefile	/^nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_7)$/;"	m
nonce	blockencodings.h	/^    uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
nonce	ntunodeid.h	/^    uint32_t nonce;$/;"	m	class:AddrPow
noui_InitMessage	noui.cpp	/^static void noui_InitMessage(const std::string& message)$/;"	f	file:
noui_ThreadSafeMessageBox	noui.cpp	/^static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
noui_ThreadSafeQuestion	noui.cpp	/^static bool noui_ThreadSafeQuestion(const std::string& \/* ignored interactive message *\/, const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
noui_connect	noui.cpp	/^void noui_connect()$/;"	f
numThreads	httpserver.cpp	/^    int numThreads;$/;"	m	class:WorkQueue	file:
obfuscate_key	dbwrapper.h	/^    std::vector<unsigned char> obfuscate_key;$/;"	m	class:CDBWrapper
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
onlyUnconfirmed	miner.cpp	/^void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)$/;"	f	class:BlockAssembler
operator !	arith_uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }$/;"	f	class:base_uint
operator !=	chain.h	/^    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator !=	coins.h	/^    friend bool operator!=(const CCoins &a, const CCoins &b) {$/;"	f	class:CCoins
operator !=	netaddress.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	netaddress.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	netaddress.cpp	/^bool operator!=(const CSubNet& a, const CSubNet& b)$/;"	f
operator !=	prevector.h	/^        bool operator!=(const_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_iterator
operator !=	prevector.h	/^        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator !=	prevector.h	/^        bool operator!=(iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::iterator
operator !=	prevector.h	/^        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator !=	prevector.h	/^    bool operator!=(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator !=	pubkey.h	/^    friend bool operator!=(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator !=	uint256.h	/^    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }$/;"	f	class:base_blob
operator &	arith_uint256.h	/^    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }$/;"	f	class:base_uint
operator &=	arith_uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator ()	base58.cpp	/^    bool operator()(const CKeyID& id) const { return addr->Set(id); }$/;"	f	class:__anon2::CBitcoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CNoDestination& no) const { return false; }$/;"	f	class:__anon2::CBitcoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CScriptID& id) const { return addr->Set(id); }$/;"	f	class:__anon2::CBitcoinAddressVisitor
operator ()	coins.h	/^    size_t operator()(const uint256& txid) const {$/;"	f	class:SaltedTxidHasher
operator ()	httpserver.cpp	/^    void operator()()$/;"	f	class:HTTPWorkItem
operator ()	indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	f	struct:DereferencingComparator
operator ()	miner.cpp	/^    bool operator()(const CTxMemPool::txiter a, const CTxMemPool::txiter b)$/;"	f	class:ScoreCompare
operator ()	miner.h	/^    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)$/;"	f	struct:CompareTxIterByAncestorCount
operator ()	miner.h	/^    bool operator()(const CTxMemPool::txiter& a, const CTxMemPool::txiter& b) const$/;"	f	struct:CompareCTxMemPoolIter
operator ()	miner.h	/^    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)$/;"	f	struct:CompareModifiedEntry
operator ()	miner.h	/^    result_type operator() (const CTxMemPoolModifiedEntry &entry) const$/;"	f	struct:modifiedentry_iter
operator ()	miner.h	/^    void operator() (CTxMemPoolModifiedEntry &e)$/;"	f	struct:update_for_parent_inclusion
operator ()	net.h	/^    bool operator()(I first, I last) const$/;"	f	struct:CombinerAll
operator ()	net_processing.cpp	/^    bool operator()(const I& a, const I& b)$/;"	f	struct:IteratorComparator
operator ()	net_processing.cpp	/^    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)$/;"	f	class:CompareInvMempoolOrder
operator ()	threadinterrupt.cpp	/^void CThreadInterrupt::operator()()$/;"	f	class:CThreadInterrupt
operator ()	txmempool.cpp	/^    bool operator()(const CTxMemPool::indexed_transaction_set::const_iterator& a, const CTxMemPool::indexed_transaction_set::const_iterator& b)$/;"	f	class:__anon15::DepthAndScoreComparator
operator ()	txmempool.h	/^        bool operator()(const txiter &a, const txiter &b) const {$/;"	f	struct:CTxMemPool::CompareIteratorByHash
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByEntryTime
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByScore
operator ()	txmempool.h	/^    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)$/;"	f	struct:TxCoinAgePriorityCompare
operator ()	txmempool.h	/^    result_type operator() (const CTxMemPoolEntry &entry) const$/;"	f	struct:mempoolentry_txid
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }$/;"	f	struct:update_fee_delta
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }$/;"	f	struct:update_lock_points
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_ancestor_state
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_descendant_state
operator ()	validation.cpp	/^        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {$/;"	f	struct:__anon17::CBlockIndexWorkComparator
operator ()	validation.cpp	/^bool CScriptCheck::operator()() {$/;"	f	class:CScriptCheck
operator ()	validation.h	/^    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }$/;"	f	struct:BlockHasher
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	coins.h	/^    CCoins& operator*() { return it->second.coins; }$/;"	f	class:CCoinsModifier
operator *	prevector.h	/^        T& operator*() const { return *ptr; }$/;"	f	class:prevector::iterator
operator *	prevector.h	/^        T& operator*() { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)$/;"	f	class:base_uint
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)$/;"	f	class:base_uint
operator +	arith_uint256.h	/^    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }$/;"	f	class:base_uint
operator +	prevector.h	/^        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }$/;"	f	class:prevector::const_iterator
operator +	prevector.h	/^        iterator operator+(size_type n) { return iterator(ptr + n); }$/;"	f	class:prevector::iterator
operator +	streams.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator ++	arith_uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	arith_uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator ++	prevector.h	/^        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator ++	prevector.h	/^        const_iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::const_iterator
operator ++	prevector.h	/^        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	prevector.h	/^        const_reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	prevector.h	/^        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::iterator
operator ++	prevector.h	/^        iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::iterator
operator ++	prevector.h	/^        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator ++	prevector.h	/^        reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::reverse_iterator
operator +=	amount.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }$/;"	f	class:CFeeRate
operator +=	arith_uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	arith_uint256.h	/^    base_uint& operator+=(uint64_t b64)$/;"	f	class:base_uint
operator +=	prevector.h	/^        const_iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::const_iterator
operator +=	prevector.h	/^        iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::iterator
operator +=	streams.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator -	arith_uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	arith_uint256.h	/^    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }$/;"	f	class:base_uint
operator -	prevector.h	/^        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }$/;"	f	class:prevector::const_iterator
operator -	prevector.h	/^        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::const_iterator
operator -	prevector.h	/^        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::iterator
operator -	prevector.h	/^        iterator operator-(size_type n) { return iterator(ptr - n); }$/;"	f	class:prevector::iterator
operator --	arith_uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	arith_uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator --	prevector.h	/^        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator --	prevector.h	/^        const_iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::const_iterator
operator --	prevector.h	/^        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator --	prevector.h	/^        const_reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator --	prevector.h	/^        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::iterator
operator --	prevector.h	/^        iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::iterator
operator --	prevector.h	/^        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator --	prevector.h	/^        reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::reverse_iterator
operator -=	arith_uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	arith_uint256.h	/^    base_uint& operator-=(uint64_t b64)$/;"	f	class:base_uint
operator -=	prevector.h	/^        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::const_iterator
operator -=	prevector.h	/^        iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::iterator
operator ->	coins.h	/^    CCoins* operator->() { return &it->second.coins; }$/;"	f	class:CCoinsModifier
operator ->	prevector.h	/^        T* operator->() const { return ptr; }$/;"	f	class:prevector::iterator
operator ->	prevector.h	/^        T* operator->() { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator /	arith_uint256.h	/^    friend inline const base_uint operator\/(const base_uint& a, const base_uint& b) { return base_uint(a) \/= b; }$/;"	f	class:base_uint
operator /=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator\/=(const base_uint& b)$/;"	f	class:base_uint
operator <	amount.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <	arith_uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }$/;"	f	class:base_uint
operator <	base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	netaddress.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	netaddress.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	netaddress.cpp	/^bool operator<(const CSubNet& a, const CSubNet& b)$/;"	f
operator <	prevector.h	/^        bool operator<(const_iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::const_iterator
operator <	prevector.h	/^        bool operator<(iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::iterator
operator <	prevector.h	/^    bool operator<(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	pubkey.h	/^    friend bool operator<(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator <	uint256.h	/^    friend inline bool operator<(const base_blob& a, const base_blob& b) { return a.Compare(b) < 0; }$/;"	f	class:base_blob
operator <<	arith_uint256.h	/^    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }$/;"	f	class:base_uint
operator <<	hash.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	serialize.h	/^    CSizeComputer& operator<<(const T& obj)$/;"	f	class:CSizeComputer
operator <<	streams.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	streams.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	streams.h	/^    CVectorWriter& operator<<(const T& obj)$/;"	f	class:CVectorWriter
operator <<	streams.h	/^    OverrideStream<Stream>& operator<<(const T& obj)$/;"	f	class:OverrideStream
operator <<=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	amount.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <=	arith_uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }$/;"	f	class:base_uint
operator <=	base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	prevector.h	/^        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::const_iterator
operator <=	prevector.h	/^        bool operator<=(iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::iterator
operator =	arith_uint256.h	/^    base_uint& operator=(const base_uint& b)$/;"	f	class:base_uint
operator =	arith_uint256.h	/^    base_uint& operator=(uint64_t b)$/;"	f	class:base_uint
operator =	prevector.h	/^    prevector& operator=(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
operator =	prevector.h	/^    prevector& operator=(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
operator ==	amount.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }$/;"	f	class:base_uint
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }$/;"	f	class:base_uint
operator ==	base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	chain.h	/^    friend bool operator==(const CChain &a, const CChain &b) {$/;"	f	class:CChain
operator ==	chain.h	/^    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator ==	coins.h	/^    friend bool operator==(const CCoins &a, const CCoins &b) {$/;"	f	class:CCoins
operator ==	key.h	/^    friend bool operator==(const CExtKey& a, const CExtKey& b)$/;"	f	struct:CExtKey
operator ==	key.h	/^    friend bool operator==(const CKey& a, const CKey& b)$/;"	f	class:CKey
operator ==	netaddress.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	netaddress.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	netaddress.cpp	/^bool operator==(const CSubNet& a, const CSubNet& b)$/;"	f
operator ==	prevector.h	/^        bool operator==(const_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_iterator
operator ==	prevector.h	/^        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ==	prevector.h	/^        bool operator==(iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::iterator
operator ==	prevector.h	/^        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator ==	prevector.h	/^    bool operator==(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator ==	pubkey.h	/^    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)$/;"	f	struct:CExtPubKey
operator ==	pubkey.h	/^    friend bool operator==(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator ==	uint256.h	/^    friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }$/;"	f	class:base_blob
operator >	amount.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >	arith_uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }$/;"	f	class:base_uint
operator >	base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	prevector.h	/^        bool operator>(const_iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::const_iterator
operator >	prevector.h	/^        bool operator>(iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::iterator
operator >=	amount.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >=	arith_uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }$/;"	f	class:base_uint
operator >=	base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	prevector.h	/^        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::const_iterator
operator >=	prevector.h	/^        bool operator>=(iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::iterator
operator >>	arith_uint256.h	/^    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }$/;"	f	class:base_uint
operator >>	streams.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	streams.h	/^    CBufferedFile& operator>>(T& obj) {$/;"	f	class:CBufferedFile
operator >>	streams.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	streams.h	/^    OverrideStream<Stream>& operator>>(T& obj)$/;"	f	class:OverrideStream
operator >>=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator []	chain.h	/^    CBlockIndex *operator[](int nHeight) const {$/;"	f	class:CChain
operator []	prevector.h	/^        T& operator[](size_type pos) { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::const_iterator
operator []	prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	prevector.h	/^    T& operator[](size_type pos) {$/;"	f	class:prevector
operator []	prevector.h	/^    const T& operator[](size_type pos) const {$/;"	f	class:prevector
operator []	pubkey.h	/^    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }$/;"	f	class:CPubKey
operator []	streams.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	streams.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator ^	arith_uint256.h	/^    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(uint64_t b)$/;"	f	class:base_uint
operator bool	sync.h	/^    operator bool()$/;"	f	class:CMutexLock
operator bool	sync.h	/^    operator bool()$/;"	f	class:CSemaphoreGrant
operator bool	threadinterrupt.cpp	/^CThreadInterrupt::operator bool() const$/;"	f	class:CThreadInterrupt
operator |	arith_uint256.h	/^    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(uint64_t b)$/;"	f	class:base_uint
operator ~	arith_uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optIndent	util.cpp	/^static const int optIndent = 2;$/;"	v	file:
options	dbwrapper.h	/^    leveldb::Options options;$/;"	m	class:CDBWrapper
out	rest.cpp	/^    CTxOut out;$/;"	m	struct:CCoin	file:
pCurrentBaseParams	chainparamsbase.cpp	/^static CBaseChainParams* pCurrentBaseParams = 0;$/;"	v	file:
pCurrentParams	chainparams.cpp	/^static CChainParams *pCurrentParams = 0;$/;"	v	file:
p_util_hexdigit	utilstrencodings.cpp	/^const signed char p_util_hexdigit[256] =$/;"	v
parent	dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBBatch
parent	dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBIterator
parent	memusage.h	/^    void* parent;$/;"	m	struct:memusage::stl_tree_node
parents	txmempool.h	/^        setEntries parents;$/;"	m	struct:CTxMemPool::TxLinks
parseIntAndAdvance	tinyformat.h	/^inline int parseIntAndAdvance(const char*& c)$/;"	f	namespace:tinyformat::detail
partialBlock	net_processing.cpp	/^        std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  \/\/!< Optional, used for CMPCTBLOCK downloads$/;"	m	struct:__anon7::QueuedBlock	file:
password	netbase.cpp	/^    std::string password;$/;"	m	struct:ProxyCredentials	file:
path	httpserver.cpp	/^    std::string path;$/;"	m	class:HTTPWorkItem	file:
pathAddr	addrdb.h	/^    boost::filesystem::path pathAddr;$/;"	m	class:CAddrDB
pathBanlist	addrdb.h	/^    boost::filesystem::path pathBanlist;$/;"	m	class:CBanDB
pathCached	util.cpp	/^static boost::filesystem::path pathCached;$/;"	v	file:
pathCachedNetSpecific	util.cpp	/^static boost::filesystem::path pathCachedNetSpecific;$/;"	v	file:
pathHandlers	httpserver.cpp	/^std::vector<HTTPPathHandler> pathHandlers;$/;"	v
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pblock	miner.h	/^    CBlock* pblock;$/;"	m	class:BlockAssembler
pblocktemplate	miner.h	/^    std::unique_ptr<CBlockTemplate> pblocktemplate;$/;"	m	class:BlockAssembler
pblocktree	validation.cpp	/^CBlockTreeDB *pblocktree = NULL;$/;"	v
pchChecksum	protocol.h	/^    uint8_t pchChecksum[CHECKSUM_SIZE];$/;"	m	class:CMessageHeader
pchCommand	protocol.h	/^    char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	netaddress.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	chainparams.h	/^    CMessageHeader::MessageStartChars pchMessageStart;$/;"	m	class:CChainParams
pchMessageStart	protocol.h	/^    char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	netaddress.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pcoinsTip	validation.cpp	/^CCoinsViewCache *pcoinsTip = NULL;$/;"	v
pcoinscatcher	init.cpp	/^static CCoinsViewErrorCatcher *pcoinscatcher = NULL;$/;"	v	file:
pcoinsdbview	init.cpp	/^static CCoinsViewDB *pcoinsdbview = NULL;$/;"	v	file:
pcursor	txdb.h	/^    std::unique_ptr<CDBIterator> pcursor;$/;"	m	class:CCoinsViewDBCursor
pdb	dbwrapper.h	/^    leveldb::DB* pdb;$/;"	m	class:CDBWrapper
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
peerLogic	init.cpp	/^std::unique_ptr<PeerLogicValidation> peerLogic;$/;"	v
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
penv	dbwrapper.h	/^    leveldb::Env* penv;$/;"	m	class:CDBWrapper
pfilter	net.h	/^    CBloomFilter* pfilter;$/;"	m	class:CNode
phashBlock	chain.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pindex	net_processing.cpp	/^        const CBlockIndex* pindex;                               \/\/!< Optional.$/;"	m	struct:__anon7::QueuedBlock	file:
pindexBestForkBase	validation.cpp	/^CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;$/;"	v
pindexBestForkTip	validation.cpp	/^CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;$/;"	v
pindexBestHeader	validation.cpp	/^CBlockIndex *pindexBestHeader = NULL;$/;"	v
pindexBestHeaderSent	net_processing.cpp	/^    const CBlockIndex *pindexBestHeaderSent;$/;"	m	struct:__anon8::CNodeState	file:
pindexBestInvalid	validation.cpp	/^    CBlockIndex *pindexBestInvalid;$/;"	m	namespace:__anon17	file:
pindexBestKnownBlock	net_processing.cpp	/^    const CBlockIndex *pindexBestKnownBlock;$/;"	m	struct:__anon8::CNodeState	file:
pindexLastCommonBlock	net_processing.cpp	/^    const CBlockIndex *pindexLastCommonBlock;$/;"	m	struct:__anon8::CNodeState	file:
piter	dbwrapper.h	/^    leveldb::Iterator *piter;$/;"	m	class:CDBIterator
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/bitcoin$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/bitcoin$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/bitcoin$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/bitcoin$/;"	m
please_keep	cuckoocache.h	/^    inline void please_keep(uint32_t n) const$/;"	f	class:CuckooCache::cache
pn	arith_uint256.h	/^    uint32_t pn[WIDTH];$/;"	m	class:base_uint
pnSeed6_main	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_main[] = {$/;"	v
pnSeed6_test	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_test[] = {$/;"	v
pointer	prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::iterator
pointer	prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::reverse_iterator
pointer	prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_iterator
pointer	prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_reverse_iterator
pointer	prevector.h	/^    typedef value_type* pointer;$/;"	t	class:prevector
pool	blockencodings.h	/^    CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool	validation.cpp	/^    CTxMemPool &pool;$/;"	m	class:MemPoolConflictRemovalTracker	file:
pop_back	prevector.h	/^    void pop_back() {$/;"	f	class:prevector
pop_lock	sync.cpp	/^static void pop_lock()$/;"	f	file:
port	chainparams.h	/^    uint16_t port;$/;"	m	struct:SeedSpec6
port	netaddress.h	/^        unsigned short port; \/\/ host order$/;"	m	class:CService
post	sync.h	/^    void post()$/;"	f	class:CSemaphore
potential_deadlock_detected	sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
ppmutexOpenSSL	util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	chain.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
pqueue	checkqueue.h	/^    CCheckQueue<T>* pqueue;$/;"	m	class:CCheckQueueControl
prefilled_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	blockencodings.h	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	httpserver.cpp	/^    std::string prefix;$/;"	m	struct:HTTPPathHandler	file:
prefix	rest.cpp	/^    const char* prefix;$/;"	m	struct:__anon13	file:
prevBlockHash	ntunodeid.h	/^    uint256 prevBlockHash;$/;"	m	class:AddrPow
prevector	prevector.h	/^    explicit prevector(size_type n) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    explicit prevector(size_type n, const T& val = T()) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector() : _size(0) {}$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(InputIterator first, InputIterator last) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^class prevector {$/;"	c
printFormatStringLiteral	tinyformat.h	/^inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat::detail
printTests	ntunodeid.cpp	/^void AddrPow::printTests(std::string msg)$/;"	f	class:AddrPow
printf	tinyformat.h	/^inline void printf(const char* fmt)$/;"	f	namespace:tinyformat
printf	tinyformat.h	/^void printf(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
printfln	tinyformat.h	/^inline void printfln(const char* fmt)$/;"	f	namespace:tinyformat
printfln	tinyformat.h	/^void printfln(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
private_key	torcontrol.cpp	/^    std::string private_key;$/;"	m	class:TorController	file:
program_options	util.cpp	/^    namespace program_options {$/;"	n	namespace:boost	file:
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
protocolinfo_cb	torcontrol.cpp	/^void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
proxy	netbase.h	/^    CService proxy;$/;"	m	class:proxyType
proxyInfo	netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyType	netbase.h	/^    proxyType(): randomize_credentials(false) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^    proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^class proxyType$/;"	c
pruneSpent	txmempool.cpp	/^void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)$/;"	f	class:CTxMemPool
psdir	Makefile	/^psdir = ${docdir}$/;"	m
pskip	chain.h	/^    CBlockIndex* pskip;$/;"	m	class:CBlockIndex
pszBase58	base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptr	memusage.h	/^    void* ptr;$/;"	m	struct:memusage::boost_unordered_node
ptr	prevector.h	/^        T* ptr;$/;"	m	class:prevector::iterator
ptr	prevector.h	/^        T* ptr;$/;"	m	class:prevector::reverse_iterator
ptr	prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_iterator
ptr	prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_reverse_iterator
ptxTo	validation.h	/^    const CTransaction *ptxTo;$/;"	m	class:CScriptCheck
pubkey	pubkey.h	/^    CPubKey pubkey;$/;"	m	struct:CExtPubKey
publicKey	ntunodeid.h	/^    CPubKey publicKey;$/;"	m	class:AddrPow
push_back	prevector.h	/^    void push_back(const T& value) {$/;"	f	class:prevector
push_lock	sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
pzmqNotificationInterface	init.cpp	/^static CZMQNotificationInterface* pzmqNotificationInterface = NULL;$/;"	v	file:
qt_bitcoin_qt_CPPFLAGS	Makefile	/^qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\$/;"	m
qt_bitcoin_qt_CXXFLAGS	Makefile	/^qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)$/;"	m
qt_bitcoin_qt_DEPENDENCIES	Makefile	/^qt_bitcoin_qt_DEPENDENCIES = qt\/libbitcoinqt.a \\$/;"	m
qt_bitcoin_qt_LDADD	Makefile	/^qt_bitcoin_qt_LDADD = qt\/libbitcoinqt.a \\$/;"	m
qt_bitcoin_qt_LDFLAGS	Makefile	/^qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
qt_bitcoin_qt_LIBTOOLFLAGS	Makefile	/^qt_bitcoin_qt_LIBTOOLFLAGS = --tag CXX$/;"	m
qt_bitcoin_qt_LINK	Makefile	/^qt_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
qt_bitcoin_qt_OBJECTS	Makefile	/^qt_bitcoin_qt_OBJECTS = $(am_qt_bitcoin_qt_OBJECTS)$/;"	m
qt_bitcoin_qt_SOURCES	Makefile	/^qt_bitcoin_qt_SOURCES = qt\/bitcoin.cpp \\$/;"	m
qt_libbitcoinqt_a_AR	Makefile	/^qt_libbitcoinqt_a_AR = $(AR) $(ARFLAGS)$/;"	m
qt_libbitcoinqt_a_CPPFLAGS	Makefile	/^qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\$/;"	m
qt_libbitcoinqt_a_CXXFLAGS	Makefile	/^qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)$/;"	m
qt_libbitcoinqt_a_LIBADD	Makefile	/^qt_libbitcoinqt_a_LIBADD =$/;"	m
qt_libbitcoinqt_a_OBJECTS	Makefile	/^qt_libbitcoinqt_a_OBJECTS = $(am_qt_libbitcoinqt_a_OBJECTS) \\$/;"	m
qt_libbitcoinqt_a_SOURCES	Makefile	/^qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\$/;"	m
qt_test_test_bitcoin_qt_CPPFLAGS	Makefile	/^qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\$/;"	m
qt_test_test_bitcoin_qt_CXXFLAGS	Makefile	/^qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)$/;"	m
qt_test_test_bitcoin_qt_DEPENDENCIES	Makefile	/^qt_test_test_bitcoin_qt_DEPENDENCIES =  \\$/;"	m
qt_test_test_bitcoin_qt_LDADD	Makefile	/^qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) \\$/;"	m
qt_test_test_bitcoin_qt_LDFLAGS	Makefile	/^qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
qt_test_test_bitcoin_qt_LINK	Makefile	/^qt_test_test_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_test_test_bitcoin_qt_OBJECTS	Makefile	/^qt_test_test_bitcoin_qt_OBJECTS =  \\$/;"	m
qt_test_test_bitcoin_qt_SOURCES	Makefile	/^qt_test_test_bitcoin_qt_SOURCES =  \\$/;"	m
queryHashes	txmempool.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CTxMemPool
queue	checkqueue.h	/^    std::vector<T> queue;$/;"	m	class:CCheckQueue
queue	httpserver.cpp	/^    std::deque<std::unique_ptr<WorkItem>> queue;$/;"	m	class:WorkQueue	file:
rand32	random.h	/^    uint32_t rand32() {$/;"	f	class:FastRandomContext
randomize_credentials	netbase.h	/^    bool randomize_credentials;$/;"	m	class:proxyType
rbegin	prevector.h	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rbegin	prevector.h	/^    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rdbuf	streams.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	streams.h	/^    void read(char *pch, size_t nSize) {$/;"	f	class:CBufferedFile
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CDataStream
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:OverrideStream
readData	net.cpp	/^int CNetMessage::readData(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readHeader	net.cpp	/^int CNetMessage::readHeader(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readStdin	bitcoin-tx.cpp	/^static std::string readStdin()$/;"	f	file:
readcb	torcontrol.cpp	/^void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)$/;"	f	class:TorControlConnection
readoptions	dbwrapper.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CDBWrapper
recentRejects	net_processing.cpp	/^    std::unique_ptr<CRollingBloomFilter> recentRejects;$/;"	m	namespace:__anon7	file:
reconnect	torcontrol.cpp	/^    bool reconnect;$/;"	m	class:TorController	file:
reconnect_cb	torcontrol.cpp	/^void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	class:TorController
reconnect_ev	torcontrol.cpp	/^    struct event *reconnect_ev;$/;"	m	class:TorController	typeref:struct:TorController::event	file:
reconnect_timeout	torcontrol.cpp	/^    float reconnect_timeout;$/;"	m	class:TorController	file:
refcount	pubkey.cpp	/^\/* static *\/ int ECCVerifyHandle::refcount = 0;$/;"	m	class:ECCVerifyHandle	file:
refcount	pubkey.h	/^    static int refcount;$/;"	m	class:ECCVerifyHandle
reference	prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::iterator
reference	prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::reverse_iterator
reference	prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_iterator
reference	prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_reverse_iterator
reference	prevector.h	/^    typedef value_type& reference;$/;"	t	class:prevector
reference	streams.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
regTestParams	chainparams.cpp	/^static CRegTestParams regTestParams;$/;"	v	file:
regTestParams	chainparamsbase.cpp	/^static CBaseRegTestParams regTestParams;$/;"	v	file:
registers	bitcoin-tx.cpp	/^static std::map<std::string,UniValue> registers;$/;"	v	file:
rejects	net_processing.cpp	/^    std::vector<CBlockReject> rejects;$/;"	m	struct:__anon8::CNodeState	file:
release	streams.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
removeConflicts	txmempool.cpp	/^void CTxMemPool::removeConflicts(const CTransaction &tx)$/;"	f	class:CTxMemPool
removeForBlock	txmempool.cpp	/^void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)$/;"	f	class:CTxMemPool
removeForReorg	txmempool.cpp	/^void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)$/;"	f	class:CTxMemPool
removeRecursive	txmempool.cpp	/^void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeUnchecked	txmempool.cpp	/^void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
rend	prevector.h	/^    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rend	prevector.h	/^    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
replySent	httpserver.h	/^    bool replySent;$/;"	m	class:HTTPRequest
reply_handlers	torcontrol.cpp	/^    std::deque<ReplyHandlerCB> reply_handlers;$/;"	m	class:TorControlConnection	file:
req	httpserver.cpp	/^    std::unique_ptr<HTTPRequest> req;$/;"	m	class:HTTPWorkItem	file:
req	httpserver.h	/^    struct evhttp_request* req;$/;"	m	class:HTTPRequest	typeref:struct:HTTPRequest::evhttp_request
reserve	prevector.h	/^    void reserve(size_type new_capacity) {$/;"	f	class:prevector
reserve	streams.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
reset	bloom.cpp	/^void CBloomFilter::reset(unsigned int nNewTweak)$/;"	f	class:CBloomFilter
reset	bloom.cpp	/^void CRollingBloomFilter::reset()$/;"	f	class:CRollingBloomFilter
reset	threadinterrupt.cpp	/^void CThreadInterrupt::reset()$/;"	f	class:CThreadInterrupt
resetBlock	miner.cpp	/^void BlockAssembler::resetBlock()$/;"	f	class:BlockAssembler
resize	prevector.h	/^    void resize(size_type new_size) {$/;"	f	class:prevector
resize	streams.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
resolvedAddress	net.h	/^    CService resolvedAddress;$/;"	m	struct:AddedNodeInfo
rest_block	rest.cpp	/^static bool rest_block(HTTPRequest* req,$/;"	f	file:
rest_block_extended	rest.cpp	/^static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_block_notxdetails	rest.cpp	/^static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_chaininfo	rest.cpp	/^static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_getutxos	rest.cpp	/^static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_headers	rest.cpp	/^static bool rest_headers(HTTPRequest* req,$/;"	f	file:
rest_mempool_contents	rest.cpp	/^static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_mempool_info	rest.cpp	/^static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_tx	rest.cpp	/^static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
result_type	miner.h	/^    typedef CTxMemPool::txiter result_type;$/;"	t	struct:modifiedentry_iter
result_type	net.h	/^    typedef bool result_type;$/;"	t	struct:CombinerAll
result_type	txmempool.h	/^    typedef uint256 result_type;$/;"	t	struct:mempoolentry_txid
reverse_iterator	prevector.h	/^        reverse_iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::reverse_iterator
reverse_iterator	prevector.h	/^    class reverse_iterator {$/;"	c	class:prevector
reverse_iterator	streams.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
reverse_lock	reverselock.h	/^    explicit reverse_lock(Lock& _lock) : lock(_lock) {$/;"	f	class:reverse_lock
reverse_lock	reverselock.h	/^class reverse_lock$/;"	c
rf	rest.cpp	/^    enum RetFormat rf;$/;"	m	struct:__anon12	typeref:enum:__anon12::RetFormat	file:
rf_names	rest.cpp	/^} rf_names[] = {$/;"	v	typeref:struct:__anon12	file:
right	memusage.h	/^    void* right;$/;"	m	struct:memusage::stl_tree_node
rmap	limitedmap.h	/^    std::multimap<V, iterator> rmap;$/;"	m	class:limitedmap
rmap_iterator	limitedmap.h	/^    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;$/;"	t	class:limitedmap
rollingMinimumFeeRate	txmempool.h	/^    mutable double rollingMinimumFeeRate; \/\/!< minimum fee to get into the pool, decreases exponentially$/;"	m	class:CTxMemPool
rpc_allow_subnets	httpserver.cpp	/^static std::vector<CSubNet> rpc_allow_subnets;$/;"	v	file:
runCommand	util.cpp	/^void runCommand(const std::string& strCommand)$/;"	f
running	httpserver.cpp	/^    bool running;$/;"	m	class:WorkQueue	file:
runstatedir	Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
schedule	scheduler.cpp	/^void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)$/;"	f	class:CScheduler
scheduleEvery	scheduler.cpp	/^void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaSeconds)$/;"	f	class:CScheduler
scheduleFromNow	scheduler.cpp	/^void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaSeconds)$/;"	f	class:CScheduler
scopeId	netaddress.h	/^        uint32_t scopeId; \/\/ for scoped\/link-local ipv6 addresses$/;"	m	class:CNetAddr
screenWidth	util.cpp	/^static const int screenWidth = 79;$/;"	v	file:
script	compressor.h	/^    CScript &script;$/;"	m	class:CScriptCompressor
scriptPubKey	validation.h	/^    CScript scriptPubKey;$/;"	m	class:CScriptCheck
secp256k1_context_sign	key.cpp	/^static secp256k1_context* secp256k1_context_sign = NULL;$/;"	v	file:
secp256k1_context_verify	pubkey.cpp	/^secp256k1_context* secp256k1_context_verify = NULL;$/;"	m	namespace:__anon11	file:
seek	serialize.h	/^    void seek(size_t _nSize)$/;"	f	class:CSizeComputer
seek	streams.h	/^    void seek(size_t nSize)$/;"	f	class:CVectorWriter
sem	sync.h	/^    CSemaphore* sem;$/;"	m	class:CSemaphoreGrant
semAddnode	net.h	/^    CSemaphore *semAddnode;$/;"	m	class:CConnman
semOutbound	net.h	/^    CSemaphore *semOutbound;$/;"	m	class:CConnman
ser_double_to_uint64	serialize.h	/^inline uint64_t ser_double_to_uint64(double x)$/;"	f
ser_float_to_uint32	serialize.h	/^inline uint32_t ser_float_to_uint32(float x)$/;"	f
ser_readdata16	serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16(Stream &s)$/;"	f
ser_readdata32	serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32(Stream &s)$/;"	f
ser_readdata64	serialize.h	/^template<typename Stream> inline uint64_t ser_readdata64(Stream &s)$/;"	f
ser_readdata8	serialize.h	/^template<typename Stream> inline uint8_t ser_readdata8(Stream &s)$/;"	f
ser_uint32_to_float	serialize.h	/^inline float ser_uint32_to_float(uint32_t y)$/;"	f
ser_uint64_to_double	serialize.h	/^inline double ser_uint64_to_double(uint64_t y)$/;"	f
ser_writedata16	serialize.h	/^template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)$/;"	f
ser_writedata32	serialize.h	/^template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)$/;"	f
ser_writedata64	serialize.h	/^template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)$/;"	f
ser_writedata8	serialize.h	/^template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)$/;"	f
service	torcontrol.cpp	/^    CService service;$/;"	m	class:TorController	file:
serviceQueue	scheduler.cpp	/^void CScheduler::serviceQueue()$/;"	f	class:CScheduler
service_id	torcontrol.cpp	/^    std::string service_id;$/;"	m	class:TorController	file:
setAskFor	net.h	/^    std::set<uint256> setAskFor;$/;"	m	class:CNode
setBanned	net.h	/^    banmap_t setBanned;$/;"	m	class:CConnman
setBannedIsDirty	net.h	/^    bool setBannedIsDirty;$/;"	m	class:CConnman
setBlockIndexCandidates	validation.cpp	/^    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;$/;"	m	namespace:__anon17	file:
setDirtyBlockIndex	validation.cpp	/^    std::set<CBlockIndex*> setDirtyBlockIndex;$/;"	m	namespace:__anon17	file:
setDirtyFileInfo	validation.cpp	/^    std::set<int> setDirtyFileInfo;$/;"	m	namespace:__anon17	file:
setEntries	txmempool.h	/^    typedef std::set<txiter, CompareIteratorByHash> setEntries;$/;"	t	class:CTxMemPool
setInventoryTxToSend	net.h	/^    std::set<uint256> setInventoryTxToSend;$/;"	m	class:CNode
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setSanityCheck	txmempool.h	/^    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }$/;"	f	class:CTxMemPool
setWatchOnly	keystore.h	/^    WatchOnlySet setWatchOnly;$/;"	m	class:CBasicKeyStore
setup	cuckoocache.h	/^    inline void setup(uint32_t b)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
setup	cuckoocache.h	/^    uint32_t setup(uint32_t new_size)$/;"	f	class:CuckooCache::cache
setup_bytes	cuckoocache.h	/^    uint32_t setup_bytes(size_t bytes)$/;"	f	class:CuckooCache::cache
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash160
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash256
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shorttxidk0	blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	blockencodings.h	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
shouldStop	scheduler.h	/^    bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }$/;"	f	class:CScheduler
shrink_to_fit	prevector.h	/^    void shrink_to_fit() {$/;"	f	class:prevector
sigOpCost	txmempool.h	/^    int64_t sigOpCost;         \/\/!< Total sigop cost$/;"	m	class:CTxMemPoolEntry
sighashOptions	bitcoin-tx.cpp	/^} sighashOptions[N_SIGHASH_OPTS] = {$/;"	v	typeref:struct:__anon3	file:
sign	ntunodeid.h	/^    void sign()$/;"	f	class:AddrPow
signature	ntunodeid.h	/^    std::vector<unsigned char> signature;$/;"	m	class:AddrPow
size	addrman.h	/^    size_t size() const$/;"	f	class:CAddrMan
size	arith_uint256.h	/^    unsigned int size() const$/;"	f	class:base_uint
size	cuckoocache.h	/^    uint32_t size;$/;"	m	class:CuckooCache::cache
size	indirectmap.h	/^    size_type size() const          { return m.size(); }$/;"	f	class:indirectmap
size	key.h	/^    unsigned int size() const { return (fValid ? keydata.size() : 0); }$/;"	f	class:CKey
size	limitedmap.h	/^    size_type size() const { return map.size(); }$/;"	f	class:limitedmap
size	prevector.h	/^    size_type size() const {$/;"	f	class:prevector
size	pubkey.h	/^    unsigned int size() const { return GetLen(vch[0]); }$/;"	f	class:CPubKey
size	serialize.h	/^    size_t size() const {$/;"	f	class:CSizeComputer
size	streams.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	timedata.h	/^    int size() const$/;"	f	class:CMedianFilter
size	txmempool.h	/^    unsigned long size()$/;"	f	class:CTxMemPool
size	uint256.h	/^    unsigned int size() const$/;"	f	class:base_blob
size_type	indirectmap.h	/^    typedef typename base::size_type size_type;$/;"	t	class:indirectmap
size_type	limitedmap.h	/^    typedef typename std::map<K, V>::size_type size_type;$/;"	t	class:limitedmap
size_type	prevector.h	/^    typedef Size size_type;$/;"	t	class:prevector
size_type	streams.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::seconds rel_time)$/;"	f	class:CThreadInterrupt
socket	net.h	/^        SOCKET socket;$/;"	m	struct:CConnman::ListenSocket
sorted	timedata.h	/^    std::vector<T> sorted() const$/;"	f	class:CMedianFilter
source	addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
sourceFile	sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
spendsCoinbase	txmempool.h	/^    bool spendsCoinbase;       \/\/!< keep track of transactions that spend a coinbase$/;"	m	class:CTxMemPoolEntry
src	streams.h	/^    FILE *src;            \/\/ source file$/;"	m	class:CBufferedFile
srcdir	Makefile	/^srcdir = .$/;"	m
ssKey	dbwrapper.h	/^    CDataStream ssKey;$/;"	m	class:CDBBatch
ssValue	dbwrapper.h	/^    CDataStream ssValue;$/;"	m	class:CDBBatch
status	bitcoin-cli.cpp	/^    int status;$/;"	m	struct:HTTPReply	file:
stl_shared_counter	memusage.h	/^struct stl_shared_counter$/;"	s	namespace:memusage
stl_tree_node	memusage.h	/^struct stl_tree_node$/;"	s	namespace:memusage
stop	scheduler.cpp	/^void CScheduler::stop(bool drain)$/;"	f	class:CScheduler
stopRequested	scheduler.h	/^    bool stopRequested;$/;"	m	class:CScheduler
stopWhenEmpty	scheduler.h	/^    bool stopWhenEmpty;$/;"	m	class:CScheduler
str	streams.h	/^    std::string str() const$/;"	f	class:CDataStream
strAddedNode	net.h	/^    std::string strAddedNode;$/;"	m	struct:AddedNodeInfo
strDataDir	chainparamsbase.h	/^    std::string strDataDir;$/;"	m	class:CBaseChainParams
strMessageMagic	validation.cpp	/^const std::string strMessageMagic = "Bitcoin Signed Message:\\n";$/;"	v
strMiscWarning	warnings.cpp	/^std::string strMiscWarning;$/;"	v
strNetworkID	chainparams.h	/^    std::string strNetworkID;$/;"	m	class:CChainParams
strRPCUserColonPass	httprpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strRejectReason	net_processing.cpp	/^    std::string strRejectReason;$/;"	m	struct:__anon8::CBlockReject	file:
strSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
strSubVersion	net.cpp	/^std::string strSubVersion;$/;"	v
stream	streams.h	/^    Stream* stream;$/;"	m	class:OverrideStream
streamStateFromFormat	tinyformat.h	/^inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,$/;"	f	namespace:tinyformat::detail
string	serialize.h	/^    std::string& string;$/;"	m	class:LimitedString
strprintf	tinyformat.h	1047;"	d
subdir	Makefile	/^subdir = src$/;"	m
subdirs	Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
succeed	tinyformat.h	/^        struct succeed { char dummy; };$/;"	s	struct:tinyformat::detail::is_convertible
supportsServiceBitsFiltering	chainparams.h	/^    bool supportsServiceBitsFiltering;$/;"	m	struct:CDNSSeedData
swap	coins.h	/^    void swap(CCoins &to) {$/;"	f	class:CCoins
swap	prevector.h	/^    void swap(prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
swap	validation.h	/^    void swap(CScriptCheck &check) {$/;"	f	class:CScriptCheck
syncoptions	dbwrapper.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CDBWrapper
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
table	cuckoocache.h	/^    std::vector<Element> table;$/;"	m	class:CuckooCache::cache
target	torcontrol.cpp	/^    std::string target;$/;"	m	class:TorController	file:
target_alias	Makefile	/^target_alias = $/;"	m
taskQueue	scheduler.h	/^    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;$/;"	m	class:CScheduler
templock	reverselock.h	/^    Lock templock;$/;"	m	class:reverse_lock
testNetParams	chainparams.cpp	/^static CTestNetParams testNetParams;$/;"	v	file:
testNetParams	chainparamsbase.cpp	/^static CBaseTestNetParams testNetParams;$/;"	v	file:
test_test_bitcoin_CPPFLAGS	Makefile	/^test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)\/test\/ $(TESTDEFS) $(EVENT_CFLAGS)$/;"	m
test_test_bitcoin_CXXFLAGS	Makefile	/^test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_bitcoin_DEPENDENCIES	Makefile	/^test_test_bitcoin_DEPENDENCIES =  \\$/;"	m
test_test_bitcoin_LDADD	Makefile	/^test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) \\$/;"	m
test_test_bitcoin_LDFLAGS	Makefile	/^test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static$/;"	m
test_test_bitcoin_LINK	Makefile	/^test_test_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_bitcoin_OBJECTS	Makefile	/^test_test_bitcoin_OBJECTS = $(am_test_test_bitcoin_OBJECTS) \\$/;"	m
test_test_bitcoin_SOURCES	Makefile	/^test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)$/;"	m
test_test_bitcoin_fuzzy_CPPFLAGS	Makefile	/^test_test_bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
test_test_bitcoin_fuzzy_CXXFLAGS	Makefile	/^test_test_bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_bitcoin_fuzzy_DEPENDENCIES	Makefile	/^test_test_bitcoin_fuzzy_DEPENDENCIES =  \\$/;"	m
test_test_bitcoin_fuzzy_LDADD	Makefile	/^test_test_bitcoin_fuzzy_LDADD = $(LIBUNIVALUE) \\$/;"	m
test_test_bitcoin_fuzzy_LDFLAGS	Makefile	/^test_test_bitcoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_test_bitcoin_fuzzy_LINK	Makefile	/^test_test_bitcoin_fuzzy_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_bitcoin_fuzzy_OBJECTS	Makefile	/^test_test_bitcoin_fuzzy_OBJECTS =  \\$/;"	m
test_test_bitcoin_fuzzy_SOURCES	Makefile	/^test_test_bitcoin_fuzzy_SOURCES = test\/test_bitcoin_fuzzy.cpp$/;"	m
tests	ntunodeid.cpp	/^void AddrPow::tests()$/;"	f	class:AddrPow
threadAddressGeneration	net.h	/^std::thread threadAddressGeneration;$/;"	m	class:CConnman
threadDNSAddressSeed	net.h	/^    std::thread threadDNSAddressSeed;$/;"	m	class:CConnman
threadHTTP	httpserver.cpp	/^std::thread threadHTTP;$/;"	v
threadMessageHandler	net.h	/^    std::thread threadMessageHandler;$/;"	m	class:CConnman
threadOpenAddedConnections	net.h	/^    std::thread threadOpenAddedConnections;$/;"	m	class:CConnman
threadOpenConnections	net.h	/^    std::thread threadOpenConnections;$/;"	m	class:CConnman
threadResult	httpserver.cpp	/^std::future<bool> threadResult;$/;"	v
threadSocketHandler	net.h	/^    std::thread threadSocketHandler;$/;"	m	class:CConnman
time	txmempool.h	/^    int64_t time;$/;"	m	struct:LockPoints
timeLastMempoolReq	net.h	/^    std::atomic<int64_t> timeLastMempoolReq;$/;"	m	class:CNode
tinyformat	tinyformat.h	/^namespace tinyformat {$/;"	n
tinyformat	tinyformat.h	/^namespace tinyformat {}$/;"	n
tinyformat_wchar_is_not_supported	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	t	struct:tinyformat::detail::is_wchar
tmp	hash.h	/^    uint64_t tmp;$/;"	m	class:CSipHasher
toInt	tinyformat.h	/^        int toInt() const$/;"	f	class:tinyformat::detail::FormatArg
toIntImpl	tinyformat.h	/^        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)$/;"	f	class:tinyformat::detail::FormatArg
toPosixTime	scheduler.cpp	/^static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)$/;"	f	file:
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
torControlThread	torcontrol.cpp	/^boost::thread torControlThread;$/;"	v
totalTxSize	txmempool.h	/^    uint64_t totalTxSize;      \/\/!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.$/;"	m	class:CTxMemPool
trackPackageRemoved	txmempool.cpp	/^void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {$/;"	f	class:CTxMemPool
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
translationInterface	util.cpp	/^CTranslationInterface translationInterface;$/;"	v
trigger	httpserver.cpp	/^void HTTPEvent::trigger(struct timeval* tv)$/;"	f	class:HTTPEvent
try_wait	sync.h	/^    bool try_wait()$/;"	f	class:CSemaphore
tx	blockencodings.h	/^    CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	blockencodings.h	/^    CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	net_processing.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	txmempool.h	/^    CTransactionRef tx;$/;"	m	class:CTxMemPoolEntry
tx	txmempool.h	/^    CTransactionRef tx;$/;"	m	struct:TxMempoolInfo
txdata	validation.h	/^    PrecomputedTransactionData *txdata;$/;"	m	class:CScriptCheck
txiter	txmempool.h	/^    typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;$/;"	t	class:CTxMemPool
txlinksMap	txmempool.h	/^    typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;$/;"	t	class:CTxMemPool
txn	blockencodings.h	/^    std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	merkleblock.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	blockencodings.h	/^    std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txout	compressor.h	/^    CTxOut &txout;$/;"	m	class:CTxOutCompressor
txout	undo.h	/^    CTxOut txout;         \/\/ the txout data before being spent$/;"	m	class:CTxInUndo
type	protocol.h	/^    int type;$/;"	m	class:CInv
uiInterface	net.h	/^        CClientUIInterface* uiInterface = nullptr;$/;"	m	struct:CConnman::Options
uiInterface	ui_interface.cpp	/^CClientUIInterface uiInterface;$/;"	v
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160() {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const base_blob<160>& b) : base_blob<160>(b) {}$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_blob<160> {$/;"	c
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256() {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const base_blob<256>& b) : base_blob<256>(b) {}$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_blob<256> {$/;"	c
uint256S	uint256.h	/^inline uint256 uint256S(const char *str)$/;"	f
uint256S	uint256.h	/^inline uint256 uint256S(const std::string& str)$/;"	f
uint32_t	chain.h	/^enum BlockStatus: uint32_t {$/;"	g
uint64_t	protocol.h	/^enum ServiceFlags : uint64_t {$/;"	g
uint_error	arith_uint256.h	/^    explicit uint_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:uint_error
uint_error	arith_uint256.h	/^class uint_error : public std::runtime_error {$/;"	c
update	limitedmap.h	/^    void update(const_iterator itIn, const mapped_type& v)$/;"	f	class:limitedmap
update_ancestor_state	txmempool.h	/^    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :$/;"	f	struct:update_ancestor_state
update_ancestor_state	txmempool.h	/^struct update_ancestor_state$/;"	s
update_descendant_state	txmempool.h	/^    update_descendant_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount) :$/;"	f	struct:update_descendant_state
update_descendant_state	txmempool.h	/^struct update_descendant_state$/;"	s
update_fee_delta	txmempool.h	/^    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }$/;"	f	struct:update_fee_delta
update_fee_delta	txmempool.h	/^struct update_fee_delta$/;"	s
update_for_parent_inclusion	miner.h	/^    update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}$/;"	f	struct:update_for_parent_inclusion
update_for_parent_inclusion	miner.h	/^struct update_for_parent_inclusion$/;"	s
update_lock_points	txmempool.h	/^    update_lock_points(const LockPoints& _lp) : lp(_lp) { }$/;"	f	struct:update_lock_points
update_lock_points	txmempool.h	/^struct update_lock_points$/;"	s
uri_prefixes	rest.cpp	/^} uri_prefixes[] = {$/;"	v	typeref:struct:__anon13	file:
use_count	memusage.h	/^    size_t use_count;$/;"	m	struct:memusage::stl_shared_counter
username	netbase.cpp	/^    std::string username;$/;"	m	struct:ProxyCredentials	file:
v	hash.h	/^    uint64_t v[4];$/;"	m	class:CSipHasher
vAddedNodes	net.h	/^    std::vector<std::string> vAddedNodes;$/;"	m	class:CConnman
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBits	merkleblock.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlockHashesToAnnounce	net.h	/^    std::vector<uint256> vBlockHashesToAnnounce;$/;"	m	class:CNode
vBlocksInFlight	net_processing.cpp	/^    std::list<QueuedBlock> vBlocksInFlight;$/;"	m	struct:__anon8::CNodeState	file:
vChain	chain.h	/^    std::vector<CBlockIndex*> vChain;$/;"	m	class:CChain
vData	bloom.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vExtraTxnForCompactIt	net_processing.cpp	/^static size_t vExtraTxnForCompactIt = 0;$/;"	v	file:
vFixedSeeds	chainparams.h	/^    std::vector<SeedSpec6> vFixedSeeds;$/;"	m	class:CChainParams
vHash	merkleblock.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHeightInFlight	net_processing.h	/^    std::vector<int> vHeightInFlight;$/;"	m	struct:CNodeStateStats
vInventoryBlockToSend	net.h	/^    std::vector<uint256> vInventoryBlockToSend;$/;"	m	class:CNode
vMatchedTxn	merkleblock.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vMsgsBeforeOpenLog	util.cpp	/^static list<string> *vMsgsBeforeOpenLog;$/;"	v	file:
vNodes	net.h	/^    std::vector<CNode*> vNodes;$/;"	m	class:CConnman
vNodesDisconnected	net.h	/^    std::list<CNode*> vNodesDisconnected;$/;"	m	class:CConnman
vOneShots	net.h	/^    std::deque<std::string> vOneShots;$/;"	m	class:CConnman
vProcessMsg	net.h	/^    std::list<CNetMessage> vProcessMsg;$/;"	m	class:CNode
vRandom	addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vRecv	net.h	/^    CDataStream vRecv;              \/\/ received message data$/;"	m	class:CNetMessage
vRecvGetData	net.h	/^    std::deque<CInv> vRecvGetData;$/;"	m	class:CNode
vRecvMsg	net.h	/^    std::list<CNetMessage> vRecvMsg;  \/\/ Used only by SocketHandler thread$/;"	m	class:CNode
vRelayExpiration	net_processing.cpp	/^    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;$/;"	m	namespace:__anon7	file:
vSeeds	chainparams.h	/^    std::vector<CDNSSeedData> vSeeds;$/;"	m	class:CChainParams
vSendMsg	net.h	/^    std::deque<std::vector<unsigned char>> vSendMsg;$/;"	m	class:CNode
vSorted	timedata.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vTxFees	miner.h	/^    std::vector<CAmount> vTxFees;$/;"	m	struct:CBlockTemplate
vTxHashes	txmempool.h	/^    std::vector<std::pair<uint256, txiter> > vTxHashes; \/\/!< All tx witness hashes\/entries in mapTx, in random order$/;"	m	class:CTxMemPool
vTxHashesIdx	txmempool.h	/^    mutable size_t vTxHashesIdx; \/\/!< Index in mempool's vTxHashes$/;"	m	class:CTxMemPoolEntry
vTxSigOpsCost	miner.h	/^    std::vector<int64_t> vTxSigOpsCost;$/;"	m	struct:CBlockTemplate
vValues	timedata.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
vWhitelistedRange	net.h	/^    std::vector<CSubNet> vWhitelistedRange;$/;"	m	class:CConnman
valid	netaddress.h	/^        bool valid;$/;"	m	class:CSubNet
value	sync.h	/^    int value;$/;"	m	class:CSemaphore
value	tinyformat.h	/^        static const bool value =$/;"	m	struct:tinyformat::detail::is_convertible
value_type	indirectmap.h	/^    typedef typename base::value_type value_type;$/;"	t	class:indirectmap
value_type	limitedmap.h	/^    typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:limitedmap
value_type	prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::iterator
value_type	prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::reverse_iterator
value_type	prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_iterator
value_type	prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_reverse_iterator
value_type	prevector.h	/^    typedef T value_type;$/;"	t	class:prevector
value_type	streams.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
vch	pubkey.h	/^    unsigned char vch[65];$/;"	m	class:CPubKey
vch	streams.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchBuf	streams.h	/^    std::vector<char> vchBuf; \/\/ the buffer$/;"	m	class:CBufferedFile
vchCoinbaseCommitment	miner.h	/^    std::vector<unsigned char> vchCoinbaseCommitment;$/;"	m	struct:CBlockTemplate
vchData	base58.h	/^    vector_uchar vchData;$/;"	m	class:CBase58Data
vchData	streams.h	/^    std::vector<unsigned char>& vchData;$/;"	m	class:CVectorWriter
vchFingerprint	key.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtKey
vchFingerprint	pubkey.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtPubKey
vchVersion	base58.h	/^    std::vector<unsigned char> vchVersion;$/;"	m	class:CBase58Data
vector_type	streams.h	/^    typedef CSerializeData vector_type;$/;"	t	class:CDataStream
vector_uchar	base58.h	/^    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;$/;"	t	class:CBase58Data
versionbitscache	validation.cpp	/^VersionBitsCache versionbitscache;$/;"	v
vfLimited	net.cpp	/^static bool vfLimited[NET_MAX] = {};$/;"	v	file:
vformat	tinyformat.h	/^inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)$/;"	f	namespace:tinyformat
vhListenSocket	net.h	/^    std::vector<ListenSocket> vhListenSocket;$/;"	m	class:CConnman
vinfoBlockFile	validation.cpp	/^    std::vector<CBlockFileInfo> vinfoBlockFile;$/;"	m	namespace:__anon17	file:
vout	coins.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CCoins
vprevout	undo.h	/^    std::vector<CTxInUndo> vprevout;$/;"	m	class:CTxUndo
vtxundo	undo.h	/^    std::vector<CTxUndo> vtxundo; \/\/ for all but the coinbase$/;"	m	class:CBlockUndo
vvNew	addrman.h	/^    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
vvTried	addrman.h	/^    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
wait	sync.h	/^    void wait()$/;"	f	class:CSemaphore
warningcache	validation.cpp	/^static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];$/;"	v	file:
weak_count	memusage.h	/^    size_t weak_count;$/;"	m	struct:memusage::stl_shared_counter
whitelisted	net.h	/^        bool whitelisted;$/;"	m	struct:CConnman::ListenSocket
workQueue	httpserver.cpp	/^static WorkQueue<HTTPClosure>* workQueue = 0;$/;"	v	file:
wq	httpserver.cpp	/^        WorkQueue &wq;$/;"	m	class:WorkQueue::ThreadCounter	file:
write	hash.h	/^    void write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	serialize.h	/^    void write(const char *psz, size_t _nSize)$/;"	f	class:CSizeComputer
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CDataStream
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CVectorWriter
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:OverrideStream
writeoptions	dbwrapper.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CDBWrapper
x	memusage.h	/^    X x;$/;"	m	struct:memusage::stl_tree_node
~CAddrMan	addrman.h	/^    ~CAddrMan()$/;"	f	class:CAddrMan
~CAutoFile	streams.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBufferedFile	streams.h	/^    ~CBufferedFile()$/;"	f	class:CBufferedFile
~CCheckQueue	checkqueue.h	/^    ~CCheckQueue()$/;"	f	class:CCheckQueue
~CCheckQueueControl	checkqueue.h	/^    ~CCheckQueueControl()$/;"	f	class:CCheckQueueControl
~CCoinsModifier	coins.cpp	/^CCoinsModifier::~CCoinsModifier()$/;"	f	class:CCoinsModifier
~CCoinsView	coins.h	/^    virtual ~CCoinsView() {}$/;"	f	class:CCoinsView
~CCoinsViewCache	coins.cpp	/^CCoinsViewCache::~CCoinsViewCache()$/;"	f	class:CCoinsViewCache
~CCoinsViewCursor	coins.cpp	/^CCoinsViewCursor::~CCoinsViewCursor()$/;"	f	class:CCoinsViewCursor
~CCoinsViewDBCursor	txdb.h	/^    ~CCoinsViewDBCursor() {}$/;"	f	class:CCoinsViewDBCursor
~CConnman	net.cpp	/^CConnman::~CConnman()$/;"	f	class:CConnman
~CCriticalSection	sync.h	/^    ~CCriticalSection() {$/;"	f	class:CCriticalSection
~CDBIterator	dbwrapper.cpp	/^CDBIterator::~CDBIterator() { delete piter; }$/;"	f	class:CDBIterator
~CDBWrapper	dbwrapper.cpp	/^CDBWrapper::~CDBWrapper()$/;"	f	class:CDBWrapper
~CImportingNow	init.cpp	/^    ~CImportingNow() {$/;"	f	struct:CImportingNow
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	key.h	/^    ~CKey()$/;"	f	class:CKey
~CKeyStore	keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CMainCleanup	validation.cpp	/^    ~CMainCleanup() {$/;"	f	class:CMainCleanup
~CNetCleanup	net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNetProcessingCleanup	net_processing.cpp	/^    ~CNetProcessingCleanup() {$/;"	f	class:CNetProcessingCleanup
~CNode	net.cpp	/^CNode::~CNode()$/;"	f	class:CNode
~CScheduler	scheduler.cpp	/^CScheduler::~CScheduler()$/;"	f	class:CScheduler
~CSemaphoreGrant	sync.h	/^    ~CSemaphoreGrant()$/;"	f	class:CSemaphoreGrant
~CTxMemPool	txmempool.cpp	/^CTxMemPool::~CTxMemPool()$/;"	f	class:CTxMemPool
~CVerifyDB	validation.cpp	/^CVerifyDB::~CVerifyDB()$/;"	f	class:CVerifyDB
~ECCVerifyHandle	pubkey.cpp	/^ECCVerifyHandle::~ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
~HTTPClosure	httpserver.h	/^    virtual ~HTTPClosure() {}$/;"	f	class:HTTPClosure
~HTTPEvent	httpserver.cpp	/^HTTPEvent::~HTTPEvent()$/;"	f	class:HTTPEvent
~HTTPRequest	httpserver.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~LockData	sync.cpp	/^    ~LockData() { available = false; }$/;"	f	struct:LockData
~MemPoolConflictRemovalTracker	validation.cpp	/^    ~MemPoolConflictRemovalTracker() {$/;"	f	class:MemPoolConflictRemovalTracker
~Secp256k1Init	bitcoin-tx.cpp	/^    ~Secp256k1Init() {$/;"	f	class:Secp256k1Init
~ThreadCounter	httpserver.cpp	/^        ~ThreadCounter()$/;"	f	class:WorkQueue::ThreadCounter
~TorControlConnection	torcontrol.cpp	/^TorControlConnection::~TorControlConnection()$/;"	f	class:TorControlConnection
~TorController	torcontrol.cpp	/^TorController::~TorController()$/;"	f	class:TorController
~WorkQueue	httpserver.cpp	/^    ~WorkQueue()$/;"	f	class:WorkQueue
~prevector	prevector.h	/^    ~prevector() {$/;"	f	class:prevector
~reverse_lock	reverselock.h	/^    ~reverse_lock() {$/;"	f	class:reverse_lock
